!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(C,t){"use strict";var e=[],E=C.document,i=Object.getPrototypeOf,a=e.slice,g=e.concat,l=e.push,r=e.indexOf,n={},s=n.toString,m=n.hasOwnProperty,o=m.toString,c=o.call(Object),v={},y=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},_=function(t){return null!=t&&t===t.window},u={type:!0,src:!0,noModule:!0};function w(t,e,n){var i,r=(e=e||E).createElement("script");if(r.text=t,n)for(i in u)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?n[s.call(t)]||"object":typeof t}var h="3.3.1",T=function(t,e){return new T.fn.init(t,e)},d=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function f(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!y(t)&&!_(t)&&("array"===n||0===e||"number"==typeof e&&0<e&&e-1 in t)}T.fn=T.prototype={jquery:h,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(n){return this.pushStack(T.map(this,function(t,e){return n.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(0<=n&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},T.extend=T.fn.extend=function(){var t,e,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof o&&(c=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=o[e],o!==(i=t[e])&&(c&&i&&(T.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&T.isPlainObject(n)?n:{},o[e]=T.extend(c,s,i)):void 0!==i&&(o[e]=i));return o},T.extend({expando:"jQuery"+(h+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==s.call(t))&&(!(e=i(t))||"function"==typeof(n=m.call(e,"constructor")&&e.constructor)&&o.call(n)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){w(t)},each:function(t,e){var n,i=0;if(f(t))for(n=t.length;i<n&&!1!==e.call(t[i],i,t[i]);i++);else for(i in t)if(!1===e.call(t[i],i,t[i]))break;return t},trim:function(t){return null==t?"":(t+"").replace(d,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(f(Object(t))?T.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:r.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i=[],r=0,s=t.length,o=!n;r<s;r++)!e(t[r],r)!==o&&i.push(t[r]);return i},map:function(t,e,n){var i,r,s=0,o=[];if(f(t))for(i=t.length;s<i;s++)null!=(r=e(t[s],s,n))&&o.push(r);else for(s in t)null!=(r=e(t[s],s,n))&&o.push(r);return g.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=e[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){n["[object "+e+"]"]=e.toLowerCase()});var p=function(n){var t,f,w,s,r,p,h,g,b,l,c,x,C,o,E,m,a,u,v,T="sizzle"+1*new Date,y=n.document,D=0,i=0,d=ot(),_=ot(),S=ot(),A=function(t,e){return t===e&&(c=!0),0},k={}.hasOwnProperty,e=[],N=e.pop,I=e.push,j=e.push,O=e.slice,P=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",H="[\\x20\\t\\r\\n\\f]",$="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",M="\\["+H+"*("+$+")(?:"+H+"*([*^$|!~]?=)"+H+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+H+"*\\]",R=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+M+")*)|.*)\\)|)",q=new RegExp(H+"+","g"),W=new RegExp("^"+H+"+|((?:^|[^\\\\])(?:\\\\.)*)"+H+"+$","g"),z=new RegExp("^"+H+"*,"+H+"*"),F=new RegExp("^"+H+"*([>+~]|"+H+")"+H+"*"),B=new RegExp("="+H+"*([^\\]'\"]*?)"+H+"*\\]","g"),U=new RegExp(R),Q=new RegExp("^"+$+"$"),K={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+M),PSEUDO:new RegExp("^"+R),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+H+"*(even|odd|(([+-]|)(\\d*)n|)"+H+"*(?:([+-]|)"+H+"*(\\d+)|))"+H+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+H+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+H+"*((?:-\\d)?\\d*)"+H+"*\\)|)(?=[^-]|$)","i")},V=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,X=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,G=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+H+"?|("+H+")|.)","ig"),tt=function(t,e,n){var i="0x"+e-65536;return i!=i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},et=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,nt=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},it=function(){x()},rt=yt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{j.apply(e=O.call(y.childNodes),y.childNodes),e[y.childNodes.length].nodeType}catch(t){j={apply:e.length?function(t,e){I.apply(t,O.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}function st(t,e,n,i){var r,s,o,a,l,c,u,h=e&&e.ownerDocument,d=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==d&&9!==d&&11!==d)return n;if(!i&&((e?e.ownerDocument||e:y)!==C&&x(e),e=e||C,E)){if(11!==d&&(l=Z.exec(t)))if(r=l[1]){if(9===d){if(!(o=e.getElementById(r)))return n;if(o.id===r)return n.push(o),n}else if(h&&(o=h.getElementById(r))&&v(e,o)&&o.id===r)return n.push(o),n}else{if(l[2])return j.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return j.apply(n,e.getElementsByClassName(r)),n}if(f.qsa&&!S[t+" "]&&(!m||!m.test(t))){if(1!==d)h=e,u=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(et,nt):e.setAttribute("id",a=T),s=(c=p(t)).length;s--;)c[s]="#"+a+" "+vt(c[s]);u=c.join(","),h=G.test(t)&&gt(e.parentNode)||e}if(u)try{return j.apply(n,h.querySelectorAll(u)),n}catch(t){}finally{a===T&&e.removeAttribute("id")}}}return g(t.replace(W,"$1"),e,n,i)}function ot(){var i=[];return function t(e,n){return i.push(e+" ")>w.cacheLength&&delete t[i.shift()],t[e+" "]=n}}function at(t){return t[T]=!0,t}function lt(t){var e=C.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ct(t,e){for(var n=t.split("|"),i=n.length;i--;)w.attrHandle[n[i]]=e}function ut(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function ht(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function dt(n){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===n}}function ft(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function pt(o){return at(function(s){return s=+s,at(function(t,e){for(var n,i=o([],t.length,s),r=i.length;r--;)t[n=i[r]]&&(t[n]=!(e[n]=t[n]))})})}function gt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in f=st.support={},r=st.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},x=st.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:y;return i!==C&&9===i.nodeType&&i.documentElement&&(o=(C=i).documentElement,E=!r(C),y!==C&&(n=C.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",it,!1):n.attachEvent&&n.attachEvent("onunload",it)),f.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),f.getElementsByTagName=lt(function(t){return t.appendChild(C.createComment("")),!t.getElementsByTagName("*").length}),f.getElementsByClassName=X.test(C.getElementsByClassName),f.getById=lt(function(t){return o.appendChild(t).id=T,!C.getElementsByName||!C.getElementsByName(T).length}),f.getById?(w.filter.ID=function(t){var e=t.replace(J,tt);return function(t){return t.getAttribute("id")===e}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&E){var n=e.getElementById(t);return n?[n]:[]}}):(w.filter.ID=function(t){var n=t.replace(J,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},w.find.ID=function(t,e){if(void 0!==e.getElementById&&E){var n,i,r,s=e.getElementById(t);if(s){if((n=s.getAttributeNode("id"))&&n.value===t)return[s];for(r=e.getElementsByName(t),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===t)return[s]}return[]}}),w.find.TAG=f.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):f.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},w.find.CLASS=f.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&E)return e.getElementsByClassName(t)},a=[],m=[],(f.qsa=X.test(C.querySelectorAll))&&(lt(function(t){o.appendChild(t).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+H+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||m.push("\\["+H+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+T+"-]").length||m.push("~="),t.querySelectorAll(":checked").length||m.push(":checked"),t.querySelectorAll("a#"+T+"+*").length||m.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=C.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&m.push("name"+H+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),o.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),m.push(",.*:")})),(f.matchesSelector=X.test(u=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&lt(function(t){f.disconnectedMatch=u.call(t,"*"),u.call(t,"[s!='']:x"),a.push("!=",R)}),m=m.length&&new RegExp(m.join("|")),a=a.length&&new RegExp(a.join("|")),e=X.test(o.compareDocumentPosition),v=e||X.test(o.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},A=e?function(t,e){if(t===e)return c=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!f.sortDetached&&e.compareDocumentPosition(t)===n?t===C||t.ownerDocument===y&&v(y,t)?-1:e===C||e.ownerDocument===y&&v(y,e)?1:l?P(l,t)-P(l,e):0:4&n?-1:1)}:function(t,e){if(t===e)return c=!0,0;var n,i=0,r=t.parentNode,s=e.parentNode,o=[t],a=[e];if(!r||!s)return t===C?-1:e===C?1:r?-1:s?1:l?P(l,t)-P(l,e):0;if(r===s)return ut(t,e);for(n=t;n=n.parentNode;)o.unshift(n);for(n=e;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?ut(o[i],a[i]):o[i]===y?-1:a[i]===y?1:0}),C},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if((t.ownerDocument||t)!==C&&x(t),e=e.replace(B,"='$1']"),f.matchesSelector&&E&&!S[e+" "]&&(!a||!a.test(e))&&(!m||!m.test(e)))try{var n=u.call(t,e);if(n||f.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){}return 0<st(e,C,null,[t]).length},st.contains=function(t,e){return(t.ownerDocument||t)!==C&&x(t),v(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!==C&&x(t);var n=w.attrHandle[e.toLowerCase()],i=n&&k.call(w.attrHandle,e.toLowerCase())?n(t,e,!E):void 0;return void 0!==i?i:f.attributes||!E?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},st.escape=function(t){return(t+"").replace(et,nt)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,n=[],i=0,r=0;if(c=!f.detectDuplicates,l=!f.sortStable&&t.slice(0),t.sort(A),c){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return l=null,t},s=st.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=s(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=s(e);return n},(w=st.selectors={cacheLength:50,createPseudo:at,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(J,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(J,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&U.test(n)&&(e=p(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(J,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=d[t+" "];return e||(e=new RegExp("(^|"+H+")"+t+"("+H+"|$)"))&&d(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(n,i,r){return function(t){var e=st.attr(t,n);return null==e?"!="===i:!i||(e+="","="===i?e===r:"!="===i?e!==r:"^="===i?r&&0===e.indexOf(r):"*="===i?r&&-1<e.indexOf(r):"$="===i?r&&e.slice(-r.length)===r:"~="===i?-1<(" "+e.replace(q," ")+" ").indexOf(r):"|="===i&&(e===r||e.slice(0,r.length+1)===r+"-"))}},CHILD:function(p,t,e,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),_="of-type"===t;return 1===g&&0===m?function(t){return!!t.parentNode}:function(t,e,n){var i,r,s,o,a,l,c=v!==y?"nextSibling":"previousSibling",u=t.parentNode,h=_&&t.nodeName.toLowerCase(),d=!n&&!_,f=!1;if(u){if(v){for(;c;){for(o=t;o=o[c];)if(_?o.nodeName.toLowerCase()===h:1===o.nodeType)return!1;l=c="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?u.firstChild:u.lastChild],y&&d){for(f=(a=(i=(r=(s=(o=u)[T]||(o[T]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]||[])[0]===D&&i[1])&&i[2],o=a&&u.childNodes[a];o=++a&&o&&o[c]||(f=a=0)||l.pop();)if(1===o.nodeType&&++f&&o===t){r[p]=[D,a,f];break}}else if(d&&(f=a=(i=(r=(s=(o=t)[T]||(o[T]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]||[])[0]===D&&i[1]),!1===f)for(;(o=++a&&o&&o[c]||(f=a=0)||l.pop())&&((_?o.nodeName.toLowerCase()!==h:1!==o.nodeType)||!++f||(d&&((r=(s=o[T]||(o[T]={}))[o.uniqueID]||(s[o.uniqueID]={}))[p]=[D,f]),o!==t)););return(f-=m)===g||f%g==0&&0<=f/g}}},PSEUDO:function(t,s){var e,o=w.pseudos[t]||w.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return o[T]?o(s):1<o.length?(e=[t,t,"",s],w.setFilters.hasOwnProperty(t.toLowerCase())?at(function(t,e){for(var n,i=o(t,s),r=i.length;r--;)t[n=P(t,i[r])]=!(e[n]=i[r])}):function(t){return o(t,0,e)}):o}},pseudos:{not:at(function(t){var i=[],r=[],a=h(t.replace(W,"$1"));return a[T]?at(function(t,e,n,i){for(var r,s=a(t,null,i,[]),o=t.length;o--;)(r=s[o])&&(t[o]=!(e[o]=r))}):function(t,e,n){return i[0]=t,a(i,null,n,r),i[0]=null,!r.pop()}}),has:at(function(e){return function(t){return 0<st(e,t).length}}),contains:at(function(e){return e=e.replace(J,tt),function(t){return-1<(t.textContent||t.innerText||s(t)).indexOf(e)}}),lang:at(function(n){return Q.test(n||"")||st.error("unsupported lang: "+n),n=n.replace(J,tt).toLowerCase(),function(t){var e;do{if(e=E?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===n||0===e.indexOf(n+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=n.location&&n.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===o},focus:function(t){return t===C.activeElement&&(!C.hasFocus||C.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!w.pseudos.empty(t)},header:function(t){return Y.test(t.nodeName)},input:function(t){return V.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,e){return[e-1]}),eq:pt(function(t,e,n){return[n<0?n+e:n]}),even:pt(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:pt(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:pt(function(t,e,n){for(var i=n<0?n+e:n;0<=--i;)t.push(i);return t}),gt:pt(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}}).pseudos.nth=w.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})w.pseudos[t]=ht(t);for(t in{submit:!0,reset:!0})w.pseudos[t]=dt(t);function mt(){}function vt(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function yt(a,t,e){var l=t.dir,c=t.next,u=c||l,h=e&&"parentNode"===u,d=i++;return t.first?function(t,e,n){for(;t=t[l];)if(1===t.nodeType||h)return a(t,e,n);return!1}:function(t,e,n){var i,r,s,o=[D,d];if(n){for(;t=t[l];)if((1===t.nodeType||h)&&a(t,e,n))return!0}else for(;t=t[l];)if(1===t.nodeType||h)if(r=(s=t[T]||(t[T]={}))[t.uniqueID]||(s[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((i=r[u])&&i[0]===D&&i[1]===d)return o[2]=i[2];if((r[u]=o)[2]=a(t,e,n))return!0}return!1}}function _t(r){return 1<r.length?function(t,e,n){for(var i=r.length;i--;)if(!r[i](t,e,n))return!1;return!0}:r[0]}function wt(t,e,n,i,r){for(var s,o=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,r)||(o.push(s),c&&e.push(a)));return o}function bt(f,p,g,m,v,t){return m&&!m[T]&&(m=bt(m)),v&&!v[T]&&(v=bt(v,t)),at(function(t,e,n,i){var r,s,o,a=[],l=[],c=e.length,u=t||function(t,e,n){for(var i=0,r=e.length;i<r;i++)st(t,e[i],n);return n}(p||"*",n.nodeType?[n]:n,[]),h=!f||!t&&p?u:wt(u,a,f,n,i),d=g?v||(t?f:c||m)?[]:e:h;if(g&&g(h,d,n,i),m)for(r=wt(d,l),m(r,[],n,i),s=r.length;s--;)(o=r[s])&&(d[l[s]]=!(h[l[s]]=o));if(t){if(v||f){if(v){for(r=[],s=d.length;s--;)(o=d[s])&&r.push(h[s]=o);v(null,d=[],r,i)}for(s=d.length;s--;)(o=d[s])&&-1<(r=v?P(t,o):a[s])&&(t[r]=!(e[r]=o))}}else d=wt(d===e?d.splice(c,d.length):d),v?v(null,e,d,i):j.apply(e,d)})}function xt(t){for(var r,e,n,i=t.length,s=w.relative[t[0].type],o=s||w.relative[" "],a=s?1:0,l=yt(function(t){return t===r},o,!0),c=yt(function(t){return-1<P(r,t)},o,!0),u=[function(t,e,n){var i=!s&&(n||e!==b)||((r=e).nodeType?l(t,e,n):c(t,e,n));return r=null,i}];a<i;a++)if(e=w.relative[t[a].type])u=[yt(_t(u),e)];else{if((e=w.filter[t[a].type].apply(null,t[a].matches))[T]){for(n=++a;n<i&&!w.relative[t[n].type];n++);return bt(1<a&&_t(u),1<a&&vt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(W,"$1"),e,a<n&&xt(t.slice(a,n)),n<i&&xt(t=t.slice(n)),n<i&&vt(t))}u.push(e)}return _t(u)}return mt.prototype=w.filters=w.pseudos,w.setFilters=new mt,p=st.tokenize=function(t,e){var n,i,r,s,o,a,l,c=_[t+" "];if(c)return e?0:c.slice(0);for(o=t,a=[],l=w.preFilter;o;){for(s in n&&!(i=z.exec(o))||(i&&(o=o.slice(i[0].length)||o),a.push(r=[])),n=!1,(i=F.exec(o))&&(n=i.shift(),r.push({value:n,type:i[0].replace(W," ")}),o=o.slice(n.length)),w.filter)!(i=K[s].exec(o))||l[s]&&!(i=l[s](i))||(n=i.shift(),r.push({value:n,type:s,matches:i}),o=o.slice(n.length));if(!n)break}return e?o.length:o?st.error(t):_(t,a).slice(0)},h=st.compile=function(t,e){var n,m,v,y,_,i,r=[],s=[],o=S[t+" "];if(!o){for(e||(e=p(t)),n=e.length;n--;)(o=xt(e[n]))[T]?r.push(o):s.push(o);(o=S(t,(m=s,y=0<(v=r).length,_=0<m.length,i=function(t,e,n,i,r){var s,o,a,l=0,c="0",u=t&&[],h=[],d=b,f=t||_&&w.find.TAG("*",r),p=D+=null==d?1:Math.random()||.1,g=f.length;for(r&&(b=e===C||e||r);c!==g&&null!=(s=f[c]);c++){if(_&&s){for(o=0,e||s.ownerDocument===C||(x(s),n=!E);a=m[o++];)if(a(s,e||C,n)){i.push(s);break}r&&(D=p)}y&&((s=!a&&s)&&l--,t&&u.push(s))}if(l+=c,y&&c!==l){for(o=0;a=v[o++];)a(u,h,e,n);if(t){if(0<l)for(;c--;)u[c]||h[c]||(h[c]=N.call(i));h=wt(h)}j.apply(i,h),r&&!t&&0<h.length&&1<l+v.length&&st.uniqueSort(i)}return r&&(D=p,b=d),u},y?at(i):i))).selector=t}return o},g=st.select=function(t,e,n,i){var r,s,o,a,l,c="function"==typeof t&&t,u=!i&&p(t=c.selector||t);if(n=n||[],1===u.length){if(2<(s=u[0]=u[0].slice(0)).length&&"ID"===(o=s[0]).type&&9===e.nodeType&&E&&w.relative[s[1].type]){if(!(e=(w.find.ID(o.matches[0].replace(J,tt),e)||[])[0]))return n;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=K.needsContext.test(t)?0:s.length;r--&&(o=s[r],!w.relative[a=o.type]);)if((l=w.find[a])&&(i=l(o.matches[0].replace(J,tt),G.test(s[0].type)&&gt(e.parentNode)||e))){if(s.splice(r,1),!(t=i.length&&vt(s)))return j.apply(n,i),n;break}}return(c||h(t,u))(i,e,!E,n,!e||G.test(t)&&gt(e.parentNode)||e),n},f.sortStable=T.split("").sort(A).join("")===T,f.detectDuplicates=!!c,x(),f.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(C.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ct("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),f.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ct("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||ct(L,function(t,e,n){var i;if(!n)return!0===t[e]?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),st}(C);T.find=p,T.expr=p.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=p.uniqueSort,T.text=p.getText,T.isXMLDoc=p.isXML,T.contains=p.contains,T.escapeSelector=p.escape;var x=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&T(t).is(n))break;i.push(t)}return i},D=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},S=T.expr.match.needsContext;function A(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var k=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(t,n,i){return y(n)?T.grep(t,function(t,e){return!!n.call(t,e,t)!==i}):n.nodeType?T.grep(t,function(t){return t===n!==i}):"string"!=typeof n?T.grep(t,function(t){return-1<r.call(n,t)!==i}):T.filter(n,t,i)}T.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?T.find.matchesSelector(i,t)?[i]:[]:T.find.matches(t,T.grep(e,function(t){return 1===t.nodeType}))},T.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(T(t).filter(function(){for(e=0;e<i;e++)if(T.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)T.find(t,r[e],n);return 1<i?T.uniqueSort(n):n},filter:function(t){return this.pushStack(N(this,t||[],!1))},not:function(t){return this.pushStack(N(this,t||[],!0))},is:function(t){return!!N(this,"string"==typeof t&&S.test(t)?T(t):t||[],!1).length}});var I,j=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||I,"string"==typeof t){if(!(i="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:j.exec(t))||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:E,!0)),k.test(i[1])&&T.isPlainObject(e))for(i in e)y(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return(r=E.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):y(t)?void 0!==n.ready?n.ready(t):t(T):T.makeArray(t,this)}).prototype=T.fn,I=T(E);var O=/^(?:parents|prev(?:Until|All))/,P={children:!0,contents:!0,next:!0,prev:!0};function L(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(T.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,s=[],o="string"!=typeof t&&T(t);if(!S.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(o?-1<o.index(n):1===n.nodeType&&T.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(1<s.length?T.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?r.call(T(t),this[0]):r.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return x(t,"parentNode")},parentsUntil:function(t,e,n){return x(t,"parentNode",n)},next:function(t){return L(t,"nextSibling")},prev:function(t){return L(t,"previousSibling")},nextAll:function(t){return x(t,"nextSibling")},prevAll:function(t){return x(t,"previousSibling")},nextUntil:function(t,e,n){return x(t,"nextSibling",n)},prevUntil:function(t,e,n){return x(t,"previousSibling",n)},siblings:function(t){return D((t.parentNode||{}).firstChild,t)},children:function(t){return D(t.firstChild)},contents:function(t){return A(t,"iframe")?t.contentDocument:(A(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},function(i,r){T.fn[i]=function(t,e){var n=T.map(this,r,t);return"Until"!==i.slice(-5)&&(e=t),e&&"string"==typeof e&&(n=T.filter(e,n)),1<this.length&&(P[i]||T.uniqueSort(n),O.test(i)&&n.reverse()),this.pushStack(n)}});var H=/[^\x20\t\r\n\f]+/g;function $(t){return t}function M(t){throw t}function R(t,e,n,i){var r;try{t&&y(r=t.promise)?r.call(t).done(e).fail(n):t&&y(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}T.Callbacks=function(i){var t,n;i="string"==typeof i?(t=i,n={},T.each(t.match(H)||[],function(t,e){n[e]=!0}),n):T.extend({},i);var r,e,s,o,a=[],l=[],c=-1,u=function(){for(o=o||i.once,s=r=!0;l.length;c=-1)for(e=l.shift();++c<a.length;)!1===a[c].apply(e[0],e[1])&&i.stopOnFalse&&(c=a.length,e=!1);i.memory||(e=!1),r=!1,o&&(a=e?[]:"")},h={add:function(){return a&&(e&&!r&&(c=a.length-1,l.push(e)),function n(t){T.each(t,function(t,e){y(e)?i.unique&&h.has(e)||a.push(e):e&&e.length&&"string"!==b(e)&&n(e)})}(arguments),e&&!r&&u()),this},remove:function(){return T.each(arguments,function(t,e){for(var n;-1<(n=T.inArray(e,a,n));)a.splice(n,1),n<=c&&c--}),this},has:function(t){return t?-1<T.inArray(t,a):0<a.length},empty:function(){return a&&(a=[]),this},disable:function(){return o=l=[],a=e="",this},disabled:function(){return!a},lock:function(){return o=l=[],e||r||(a=e=""),this},locked:function(){return!!o},fireWith:function(t,e){return o||(e=[t,(e=e||[]).slice?e.slice():e],l.push(e),r||u()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!s}};return h},T.extend({Deferred:function(t){var s=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var r=arguments;return T.Deferred(function(i){T.each(s,function(t,e){var n=y(r[e[4]])&&r[e[4]];a[e[1]](function(){var t=n&&n.apply(this,arguments);t&&y(t.promise)?t.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[e[0]+"With"](this,n?[t]:arguments)})}),r=null}).promise()},then:function(e,n,i){var l=0;function c(r,s,o,a){return function(){var n=this,i=arguments,t=function(){var t,e;if(!(r<l)){if((t=o.apply(n,i))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,y(e)?a?e.call(t,c(l,s,$,a),c(l,s,M,a)):(l++,e.call(t,c(l,s,$,a),c(l,s,M,a),c(l,s,$,s.notifyWith))):(o!==$&&(n=void 0,i=[t]),(a||s.resolveWith)(n,i))}},e=a?t:function(){try{t()}catch(t){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(t,e.stackTrace),l<=r+1&&(o!==M&&(n=void 0,i=[t]),s.rejectWith(n,i))}};r?e():(T.Deferred.getStackHook&&(e.stackTrace=T.Deferred.getStackHook()),C.setTimeout(e))}}return T.Deferred(function(t){s[0][3].add(c(0,t,y(i)?i:$,t.notifyWith)),s[1][3].add(c(0,t,y(e)?e:$)),s[2][3].add(c(0,t,y(n)?n:M))}).promise()},promise:function(t){return null!=t?T.extend(t,o):o}},a={};return T.each(s,function(t,e){var n=e[2],i=e[5];o[e[1]]=n.add,i&&n.add(function(){r=i},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),n.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=n.fireWith}),o.promise(a),t&&t.call(a,a),a},when:function(t){var n=arguments.length,e=n,i=Array(e),r=a.call(arguments),s=T.Deferred(),o=function(e){return function(t){i[e]=this,r[e]=1<arguments.length?a.call(arguments):t,--n||s.resolveWith(i,r)}};if(n<=1&&(R(t,s.done(o(e)).resolve,s.reject,!n),"pending"===s.state()||y(r[e]&&r[e].then)))return s.then();for(;e--;)R(r[e],o(e),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){C.console&&C.console.warn&&t&&q.test(t.name)&&C.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){C.setTimeout(function(){throw t})};var W=T.Deferred();function z(){E.removeEventListener("DOMContentLoaded",z),C.removeEventListener("load",z),T.ready()}T.fn.ready=function(t){return W.then(t).catch(function(t){T.readyException(t)}),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0)!==t&&0<--T.readyWait||W.resolveWith(E,[T])}}),T.ready.then=W.then,"complete"===E.readyState||"loading"!==E.readyState&&!E.documentElement.doScroll?C.setTimeout(T.ready):(E.addEventListener("DOMContentLoaded",z),C.addEventListener("load",z));var F=function(t,e,n,i,r,s,o){var a=0,l=t.length,c=null==n;if("object"===b(n))for(a in r=!0,n)F(t,e,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,y(i)||(o=!0),c&&(o?(e.call(t,i),e=null):(c=e,e=function(t,e,n){return c.call(T(t),n)})),e))for(;a<l;a++)e(t[a],n,o?i:i.call(t[a],a,e(t[a],n)));return r?t:c?e.call(t):l?e(t[0],n):s},B=/^-ms-/,U=/-([a-z])/g;function Q(t,e){return e.toUpperCase()}function K(t){return t.replace(B,"ms-").replace(U,Q)}var V=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Y(){this.expando=T.expando+Y.uid++}Y.uid=1,Y.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[K(e)]=n;else for(i in e)r[K(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][K(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){n=(e=Array.isArray(e)?e.map(K):(e=K(e))in i?[e]:e.match(H)||[]).length;for(;n--;)delete i[e[n]]}(void 0===e||T.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var X=new Y,Z=new Y,G=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,n){var i,r;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:G.test(r)?JSON.parse(r):r)}catch(t){}Z.set(t,e,n)}else n=void 0;return n}T.extend({hasData:function(t){return Z.hasData(t)||X.hasData(t)},data:function(t,e,n){return Z.access(t,e,n)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,n){return X.access(t,e,n)},_removeData:function(t,e){X.remove(t,e)}}),T.fn.extend({data:function(n,t){var e,i,r,s=this[0],o=s&&s.attributes;if(void 0===n){if(this.length&&(r=Z.get(s),1===s.nodeType&&!X.get(s,"hasDataAttrs"))){for(e=o.length;e--;)o[e]&&0===(i=o[e].name).indexOf("data-")&&(i=K(i.slice(5)),tt(s,i,r[i]));X.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof n?this.each(function(){Z.set(this,n)}):F(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=Z.get(s,n))?e:void 0!==(e=tt(s,n))?e:void 0;this.each(function(){Z.set(this,n,t)})},null,t,1<arguments.length,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),T.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=X.get(t,e),n&&(!i||Array.isArray(n)?i=X.access(t,e,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=T.queue(t,e),i=n.length,r=n.shift(),s=T._queueHooks(t,e);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete s.stop,r.call(t,function(){T.dequeue(t,e)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return X.get(t,n)||X.access(t,n,{empty:T.Callbacks("once memory").add(function(){X.remove(t,[e+"queue",n])})})}}),T.fn.extend({queue:function(e,n){var t=2;return"string"!=typeof e&&(n=e,e="fx",t--),arguments.length<t?T.queue(this[0],e):void 0===n?this:this.each(function(){var t=T.queue(this,e,n);T._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&T.dequeue(this,e)})},dequeue:function(t){return this.each(function(){T.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=T.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)(n=X.get(s[o],t+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,nt=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],rt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&T.contains(t.ownerDocument,t)&&"none"===T.css(t,"display")},st=function(t,e,n,i){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];for(s in r=n.apply(t,i||[]),e)t.style[s]=o[s];return r};function ot(t,e,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return T.css(t,e,"")},l=a(),c=n&&n[3]||(T.cssNumber[e]?"":"px"),u=(T.cssNumber[e]||"px"!==c&&+l)&&nt.exec(T.css(t,e));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;o--;)T.style(t,e,u+c),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),u/=s;u*=2,T.style(t,e,u+c),n=n||[]}return n&&(u=+u||+l||0,r=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=r)),r}var at={};function lt(t,e){for(var n,i,r,s,o,a,l,c=[],u=0,h=t.length;u<h;u++)(i=t[u]).style&&(n=i.style.display,e?("none"===n&&(c[u]=X.get(i,"display")||null,c[u]||(i.style.display="")),""===i.style.display&&rt(i)&&(c[u]=(l=o=s=void 0,o=(r=i).ownerDocument,a=r.nodeName,(l=at[a])||(s=o.body.appendChild(o.createElement(a)),l=T.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),at[a]=l)))):"none"!==n&&(c[u]="none",X.set(i,"display",n)));for(u=0;u<h;u++)null!=c[u]&&(t[u].style.display=c[u]);return t}T.fn.extend({show:function(){return lt(this,!0)},hide:function(){return lt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){rt(this)?T(this).show():T(this).hide()})}});var ct=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,ht=/^$|^module$|\/(?:java|ecma)script/i,dt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ft(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&A(t,e)?T.merge([t],n):n}function pt(t,e){for(var n=0,i=t.length;n<i;n++)X.set(t[n],"globalEval",!e||X.get(e[n],"globalEval"))}dt.optgroup=dt.option,dt.tbody=dt.tfoot=dt.colgroup=dt.caption=dt.thead,dt.th=dt.td;var gt,mt,vt=/<|&#?\w+;/;function yt(t,e,n,i,r){for(var s,o,a,l,c,u,h=e.createDocumentFragment(),d=[],f=0,p=t.length;f<p;f++)if((s=t[f])||0===s)if("object"===b(s))T.merge(d,s.nodeType?[s]:s);else if(vt.test(s)){for(o=o||h.appendChild(e.createElement("div")),a=(ut.exec(s)||["",""])[1].toLowerCase(),l=dt[a]||dt._default,o.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],u=l[0];u--;)o=o.lastChild;T.merge(d,o.childNodes),(o=h.firstChild).textContent=""}else d.push(e.createTextNode(s));for(h.textContent="",f=0;s=d[f++];)if(i&&-1<T.inArray(s,i))r&&r.push(s);else if(c=T.contains(s.ownerDocument,s),o=ft(h.appendChild(s),"script"),c&&pt(o),n)for(u=0;s=o[u++];)ht.test(s.type||"")&&n.push(s);return h}gt=E.createDocumentFragment().appendChild(E.createElement("div")),(mt=E.createElement("input")).setAttribute("type","radio"),mt.setAttribute("checked","checked"),mt.setAttribute("name","t"),gt.appendChild(mt),v.checkClone=gt.cloneNode(!0).cloneNode(!0).lastChild.checked,gt.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!gt.cloneNode(!0).lastChild.defaultValue;var _t=E.documentElement,wt=/^key/,bt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,xt=/^([^.]*)(?:\.(.+)|)/;function Ct(){return!0}function Et(){return!1}function Tt(){try{return E.activeElement}catch(t){}}function Dt(t,e,n,i,r,s){var o,a;if("object"==typeof e){for(a in"string"!=typeof n&&(i=i||n,n=void 0),e)Dt(t,a,n,i,e[a],s);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Et;else if(!r)return t;return 1===s&&(o=r,(r=function(t){return T().off(t),o.apply(this,arguments)}).guid=o.guid||(o.guid=T.guid++)),t.each(function(){T.event.add(this,e,r,i,n)})}T.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,c,u,h,d,f,p,g,m=X.get(e);if(m)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&T.find.matchesSelector(_t,r),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(H)||[""]).length;c--;)f=g=(a=xt.exec(t[c])||[])[1],p=(a[2]||"").split(".").sort(),f&&(h=T.event.special[f]||{},f=(r?h.delegateType:h.bindType)||f,h=T.event.special[f]||{},u=T.extend({type:f,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&T.expr.match.needsContext.test(r),namespace:p.join(".")},s),(d=l[f])||((d=l[f]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(e,i,p,o)||e.addEventListener&&e.addEventListener(f,o)),h.add&&(h.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),r?d.splice(d.delegateCount++,0,u):d.push(u),T.event.global[f]=!0)},remove:function(t,e,n,i,r){var s,o,a,l,c,u,h,d,f,p,g,m=X.hasData(t)&&X.get(t);if(m&&(l=m.events)){for(c=(e=(e||"").match(H)||[""]).length;c--;)if(f=g=(a=xt.exec(e[c])||[])[1],p=(a[2]||"").split(".").sort(),f){for(h=T.event.special[f]||{},d=l[f=(i?h.delegateType:h.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=d.length;s--;)u=d[s],!r&&g!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(d.splice(s,1),u.selector&&d.delegateCount--,h.remove&&h.remove.call(t,u));o&&!d.length&&(h.teardown&&!1!==h.teardown.call(t,p,m.handle)||T.removeEvent(t,f,m.handle),delete l[f])}else for(f in l)T.event.remove(t,f+e[c],n,i,!0);T.isEmptyObject(l)&&X.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,s,o,a=T.event.fix(t),l=new Array(arguments.length),c=(X.get(this,"events")||{})[a.type]||[],u=T.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(o=T.event.handlers.call(this,a,c),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(i=((T.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,s,o,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=e[n]).selector+" "]&&(o[r]=i.needsContext?-1<T(r,this).index(c):T.find(r,this,null,[c]).length),o[r]&&s.push(i);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Tt()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Tt()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&A(this,"input"))return this.click(),!1},_default:function(t){return A(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ct:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ct,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ct,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ct,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&wt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&bt.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,r){T.event.special[t]={delegateType:r,bindType:r,handle:function(t){var e,n=t.relatedTarget,i=t.handleObj;return n&&(n===this||T.contains(this,n))||(t.type=i.origType,e=i.handler.apply(this,arguments),t.type=r),e}}}),T.fn.extend({on:function(t,e,n,i){return Dt(this,t,e,n,i)},one:function(t,e,n,i){return Dt(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,T(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Et),this.each(function(){T.event.remove(this,t,n,e)})}});var St=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,At=/<script|<style|<link/i,kt=/checked\s*(?:[^=]|=\s*.checked.)/i,Nt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function It(t,e){return A(t,"table")&&A(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function jt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ot(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Pt(t,e){var n,i,r,s,o,a,l,c;if(1===e.nodeType){if(X.hasData(t)&&(s=X.access(t),o=X.set(e,s),c=s.events))for(r in delete o.handle,o.events={},c)for(n=0,i=c[r].length;n<i;n++)T.event.add(e,r,c[r][n]);Z.hasData(t)&&(a=Z.access(t),l=T.extend({},a),Z.set(e,l))}}function Lt(n,i,r,s){i=g.apply([],i);var t,e,o,a,l,c,u=0,h=n.length,d=h-1,f=i[0],p=y(f);if(p||1<h&&"string"==typeof f&&!v.checkClone&&kt.test(f))return n.each(function(t){var e=n.eq(t);p&&(i[0]=f.call(this,t,e.html())),Lt(e,i,r,s)});if(h&&(e=(t=yt(i,n[0].ownerDocument,!1,n,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(o=T.map(ft(t,"script"),jt)).length;u<h;u++)l=t,u!==d&&(l=T.clone(l,!0,!0),a&&T.merge(o,ft(l,"script"))),r.call(n[u],l,u);if(a)for(c=o[o.length-1].ownerDocument,T.map(o,Ot),u=0;u<a;u++)l=o[u],ht.test(l.type||"")&&!X.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(l.src):w(l.textContent.replace(Nt,""),c,l))}return n}function Ht(t,e,n){for(var i,r=e?T.filter(e,t):t,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||T.cleanData(ft(i)),i.parentNode&&(n&&T.contains(i.ownerDocument,i)&&pt(ft(i,"script")),i.parentNode.removeChild(i));return t}T.extend({htmlPrefilter:function(t){return t.replace(St,"<$1></$2>")},clone:function(t,e,n){var i,r,s,o,a,l,c,u=t.cloneNode(!0),h=T.contains(t.ownerDocument,t);if(!(v.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(o=ft(u),i=0,r=(s=ft(t)).length;i<r;i++)a=s[i],l=o[i],void 0,"input"===(c=l.nodeName.toLowerCase())&&ct.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(n)for(s=s||ft(t),o=o||ft(u),i=0,r=s.length;i<r;i++)Pt(s[i],o[i]);else Pt(t,u);return 0<(o=ft(u,"script")).length&&pt(o,!h&&ft(t,"script")),u},cleanData:function(t){for(var e,n,i,r=T.event.special,s=0;void 0!==(n=t[s]);s++)if(V(n)){if(e=n[X.expando]){if(e.events)for(i in e.events)r[i]?T.event.remove(n,i):T.removeEvent(n,i,e.handle);n[X.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Ht(this,t,!0)},remove:function(t){return Ht(this,t)},text:function(t){return F(this,function(t){return void 0===t?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||It(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=It(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(ft(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return T.clone(this,t,e)})},html:function(t){return F(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!At.test(t)&&!dt[(ut.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;n<i;n++)1===(e=this[n]||{}).nodeType&&(T.cleanData(ft(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var n=[];return Lt(this,arguments,function(t){var e=this.parentNode;T.inArray(this,n)<0&&(T.cleanData(ft(this)),e&&e.replaceChild(t,this))},n)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,o){T.fn[t]=function(t){for(var e,n=[],i=T(t),r=i.length-1,s=0;s<=r;s++)e=s===r?this:this.clone(!0),T(i[s])[o](e),l.apply(n,e.get());return this.pushStack(n)}});var $t=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Mt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=C),e.getComputedStyle(t)},Rt=new RegExp(it.join("|"),"i");function qt(t,e,n){var i,r,s,o,a=t.style;return(n=n||Mt(t))&&(""!==(o=n.getPropertyValue(e)||n[e])||T.contains(t.ownerDocument,t)||(o=T.style(t,e)),!v.pixelBoxStyles()&&$t.test(o)&&Rt.test(e)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function Wt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(l){a.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",_t.appendChild(a).appendChild(l);var t=C.getComputedStyle(l);n="1%"!==t.top,o=12===e(t.marginLeft),l.style.right="60%",s=36===e(t.right),i=36===e(t.width),l.style.position="absolute",r=36===l.offsetWidth||"absolute",_t.removeChild(a),l=null}}function e(t){return Math.round(parseFloat(t))}var n,i,r,s,o,a=E.createElement("div"),l=E.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===l.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),o},scrollboxSize:function(){return t(),r}}))}();var zt=/^(none|table(?!-c[ea]).+)/,Ft=/^--/,Bt={position:"absolute",visibility:"hidden",display:"block"},Ut={letterSpacing:"0",fontWeight:"400"},Qt=["Webkit","Moz","ms"],Kt=E.createElement("div").style;function Vt(t){var e=T.cssProps[t];return e||(e=T.cssProps[t]=function(t){if(t in Kt)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=Qt.length;n--;)if((t=Qt[n]+e)in Kt)return t}(t)||t),e}function Yt(t,e,n){var i=nt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function Xt(t,e,n,i,r,s){var o="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=T.css(t,n+it[o],!0,r)),i?("content"===n&&(l-=T.css(t,"padding"+it[o],!0,r)),"margin"!==n&&(l-=T.css(t,"border"+it[o]+"Width",!0,r))):(l+=T.css(t,"padding"+it[o],!0,r),"padding"!==n?l+=T.css(t,"border"+it[o]+"Width",!0,r):a+=T.css(t,"border"+it[o]+"Width",!0,r));return!i&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))),l}function Zt(t,e,n){var i=Mt(t),r=qt(t,e,i),s="border-box"===T.css(t,"boxSizing",!1,i),o=s;if($t.test(r)){if(!n)return r;r="auto"}return o=o&&(v.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===T.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],o=!0),(r=parseFloat(r)||0)+Xt(t,e,n||(s?"border":"content"),o,i,r)+"px"}function Gt(t,e,n,i,r){return new Gt.prototype.init(t,e,n,i,r)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=qt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=K(e),l=Ft.test(e),c=t.style;if(l||(e=Vt(a)),o=T.cssHooks[e]||T.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(t,!1,i))?r:c[e];"string"===(s=typeof n)&&(r=nt.exec(n))&&r[1]&&(n=ot(t,e,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(T.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==e.indexOf("background")||(c[e]="inherit"),o&&"set"in o&&void 0===(n=o.set(t,n,i))||(l?c.setProperty(e,n):c[e]=n))}},css:function(t,e,n,i){var r,s,o,a=K(e);return Ft.test(e)||(e=Vt(a)),(o=T.cssHooks[e]||T.cssHooks[a])&&"get"in o&&(r=o.get(t,!0,n)),void 0===r&&(r=qt(t,e,i)),"normal"===r&&e in Ut&&(r=Ut[e]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),T.each(["height","width"],function(t,a){T.cssHooks[a]={get:function(t,e,n){if(e)return!zt.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?Zt(t,a,n):st(t,Bt,function(){return Zt(t,a,n)})},set:function(t,e,n){var i,r=Mt(t),s="border-box"===T.css(t,"boxSizing",!1,r),o=n&&Xt(t,a,n,s,r);return s&&v.scrollboxSize()===r.position&&(o-=Math.ceil(t["offset"+a[0].toUpperCase()+a.slice(1)]-parseFloat(r[a])-Xt(t,a,"border",!1,r)-.5)),o&&(i=nt.exec(e))&&"px"!==(i[3]||"px")&&(t.style[a]=e,e=T.css(t,a)),Yt(0,e,o)}}}),T.cssHooks.marginLeft=Wt(v.reliableMarginLeft,function(t,e){if(e)return(parseFloat(qt(t,"marginLeft"))||t.getBoundingClientRect().left-st(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(r,s){T.cssHooks[r+s]={expand:function(t){for(var e=0,n={},i="string"==typeof t?t.split(" "):[t];e<4;e++)n[r+it[e]+s]=i[e]||i[e-2]||i[0];return n}},"margin"!==r&&(T.cssHooks[r+s].set=Yt)}),T.fn.extend({css:function(t,e){return F(this,function(t,e,n){var i,r,s={},o=0;if(Array.isArray(e)){for(i=Mt(t),r=e.length;o<r;o++)s[e[o]]=T.css(t,e[o],!1,i);return s}return void 0!==n?T.style(t,e,n):T.css(t,e)},t,e,1<arguments.length)}}),((T.Tween=Gt).prototype={constructor:Gt,init:function(t,e,n,i,r,s){this.elem=t,this.prop=n,this.easing=r||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(T.cssNumber[n]?"":"px")},cur:function(){var t=Gt.propHooks[this.prop];return t&&t.get?t.get(this):Gt.propHooks._default.get(this)},run:function(t){var e,n=Gt.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Gt.propHooks._default.set(this),this}}).init.prototype=Gt.prototype,(Gt.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[T.cssProps[t.prop]]&&!T.cssHooks[t.prop]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=Gt.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=Gt.prototype.init,T.fx.step={};var Jt,te,ee,ne,ie=/^(?:toggle|show|hide)$/,re=/queueHooks$/;function se(){te&&(!1===E.hidden&&C.requestAnimationFrame?C.requestAnimationFrame(se):C.setTimeout(se,T.fx.interval),T.fx.tick())}function oe(){return C.setTimeout(function(){Jt=void 0}),Jt=Date.now()}function ae(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)r["margin"+(n=it[i])]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function le(t,e,n){for(var i,r=(ce.tweeners[e]||[]).concat(ce.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,e,t))return i}function ce(s,t,e){var n,o,i=0,r=ce.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=Jt||oe(),e=Math.max(0,c.startTime+c.duration-t),n=1-(e/c.duration||0),i=0,r=c.tweens.length;i<r;i++)c.tweens[i].run(n);return a.notifyWith(s,[c,n,e]),n<1&&r?e:(r||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},e),originalProperties:t,originalOptions:e,startTime:Jt||oe(),duration:e.duration,tweens:[],createTween:function(t,e){var n=T.Tween(s,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(n),n},stop:function(t){var e=0,n=t?c.tweens.length:0;if(o)return this;for(o=!0;e<n;e++)c.tweens[e].run(1);return t?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,t])):a.rejectWith(s,[c,t]),this}}),u=c.props;for(!function(t,e){var n,i,r,s,o;for(n in t)if(r=e[i=K(n)],s=t[n],Array.isArray(s)&&(r=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),(o=T.cssHooks[i])&&"expand"in o)for(n in s=o.expand(s),delete t[i],s)n in t||(t[n]=s[n],e[n]=r);else e[i]=r}(u,c.opts.specialEasing);i<r;i++)if(n=ce.prefilters[i].call(c,s,u,c.opts))return y(n.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return T.map(u,le,c),y(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(ce,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ot(n.elem,t,nt.exec(e),n),n}]},tweener:function(t,e){y(t)?(e=t,t=["*"]):t=t.match(H);for(var n,i=0,r=t.length;i<r;i++)n=t[i],ce.tweeners[n]=ce.tweeners[n]||[],ce.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var i,r,s,o,a,l,c,u,h="width"in e||"height"in e,d=this,f={},p=t.style,g=t.nodeType&&rt(t),m=X.get(t,"fxshow");for(i in n.queue||(null==(o=T._queueHooks(t,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,T.queue(t,"fx").length||o.empty.fire()})})),e)if(r=e[i],ie.test(r)){if(delete e[i],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}f[i]=m&&m[i]||T.style(t,i)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(f))for(i in h&&1===t.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(c=m&&m.display)&&(c=X.get(t,"display")),"none"===(u=T.css(t,"display"))&&(c?u=c:(lt([t],!0),c=t.style.display||c,u=T.css(t,"display"),lt([t]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===T.css(t,"float")&&(l||(d.done(function(){p.display=c}),null==c&&(u=p.display,c="none"===u?"":u)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,f)l||(m?"hidden"in m&&(g=m.hidden):m=X.access(t,"fxshow",{display:c}),s&&(m.hidden=!g),g&&lt([t],!0),d.done(function(){for(i in g||lt([t]),X.remove(t,"fxshow"),f)T.style(t,i,f[i])})),l=le(g?m[i]:0,i,d),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?ce.prefilters.unshift(t):ce.prefilters.push(t)}}),T.speed=function(t,e,n){var i=t&&"object"==typeof t?T.extend({},t):{complete:n||!n&&e||y(t)&&t,duration:t,easing:n&&e||e&&!y(e)&&e};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(t,e,n,i){return this.filter(rt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(e,t,n,i){var r=T.isEmptyObject(e),s=T.speed(t,n,i),o=function(){var t=ce(this,T.extend({},e),s);(r||X.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(r,t,s){var o=function(t){var e=t.stop;delete t.stop,e(s)};return"string"!=typeof r&&(s=t,t=r,r=void 0),t&&!1!==r&&this.queue(r||"fx",[]),this.each(function(){var t=!0,e=null!=r&&r+"queueHooks",n=T.timers,i=X.get(this);if(e)i[e]&&i[e].stop&&o(i[e]);else for(e in i)i[e]&&i[e].stop&&re.test(e)&&o(i[e]);for(e=n.length;e--;)n[e].elem!==this||null!=r&&n[e].queue!==r||(n[e].anim.stop(s),t=!1,n.splice(e,1));!t&&s||T.dequeue(this,r)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var t,e=X.get(this),n=e[o+"queue"],i=e[o+"queueHooks"],r=T.timers,s=n?n.length:0;for(e.finish=!0,T.queue(this,o,[]),i&&i.stop&&i.stop.call(this,!0),t=r.length;t--;)r[t].elem===this&&r[t].queue===o&&(r[t].anim.stop(!0),r.splice(t,1));for(t=0;t<s;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete e.finish})}}),T.each(["toggle","show","hide"],function(t,i){var r=T.fn[i];T.fn[i]=function(t,e,n){return null==t||"boolean"==typeof t?r.apply(this,arguments):this.animate(ae(i,!0),t,e,n)}}),T.each({slideDown:ae("show"),slideUp:ae("hide"),slideToggle:ae("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,i){T.fn[t]=function(t,e,n){return this.animate(i,t,e,n)}}),T.timers=[],T.fx.tick=function(){var t,e=0,n=T.timers;for(Jt=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||T.fx.stop(),Jt=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){te||(te=!0,se())},T.fx.stop=function(){te=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(i,t){return i=T.fx&&T.fx.speeds[i]||i,t=t||"fx",this.queue(t,function(t,e){var n=C.setTimeout(t,i);e.stop=function(){C.clearTimeout(n)}})},ee=E.createElement("input"),ne=E.createElement("select").appendChild(E.createElement("option")),ee.type="checkbox",v.checkOn=""!==ee.value,v.optSelected=ne.selected,(ee=E.createElement("input")).value="t",ee.type="radio",v.radioValue="t"===ee.value;var ue,he=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return F(this,T.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){T.removeAttr(this,t)})}}),T.extend({attr:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?T.prop(t,e,n):(1===s&&T.isXMLDoc(t)||(r=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?ue:void 0)),void 0!==n?null===n?void T.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:null==(i=T.find.attr(t,e))?void 0:i)},attrHooks:{type:{set:function(t,e){if(!v.radioValue&&"radio"===e&&A(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(H);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),ue={set:function(t,e,n){return!1===e?T.removeAttr(t,n):t.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(t,e){var o=he[e]||T.find.attr;he[e]=function(t,e,n){var i,r,s=e.toLowerCase();return n||(r=he[s],he[s]=i,i=null!=o(t,e,n)?s:null,he[s]=r),i}});var de=/^(?:input|select|textarea|button)$/i,fe=/^(?:a|area)$/i;function pe(t){return(t.match(H)||[]).join(" ")}function ge(t){return t.getAttribute&&t.getAttribute("class")||""}function me(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(H)||[]}T.fn.extend({prop:function(t,e){return F(this,T.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[T.propFix[t]||t]})}}),T.extend({prop:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(t)||(e=T.propFix[e]||e,r=T.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):de.test(t.nodeName)||fe.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){T(this).addClass(e.call(this,t,ge(this)))});if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+pe(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(a=pe(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){T(this).removeClass(e.call(this,t,ge(this)))});if(!arguments.length)return this.attr("class","");if((t=me(e)).length)for(;n=this[l++];)if(r=ge(n),i=1===n.nodeType&&" "+pe(r)+" "){for(o=0;s=t[o++];)for(;-1<i.indexOf(" "+s+" ");)i=i.replace(" "+s+" "," ");r!==(a=pe(i))&&n.setAttribute("class",a)}return this},toggleClass:function(r,e){var s=typeof r,o="string"===s||Array.isArray(r);return"boolean"==typeof e&&o?e?this.addClass(r):this.removeClass(r):y(r)?this.each(function(t){T(this).toggleClass(r.call(this,t,ge(this),e),e)}):this.each(function(){var t,e,n,i;if(o)for(e=0,n=T(this),i=me(r);t=i[e++];)n.hasClass(t)?n.removeClass(t):n.addClass(t);else void 0!==r&&"boolean"!==s||((t=ge(this))&&X.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===r?"":X.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+pe(ge(n))+" ").indexOf(e))return!0;return!1}});var ve=/\r/g;T.fn.extend({val:function(n){var i,t,r,e=this[0];return arguments.length?(r=y(n),this.each(function(t){var e;1===this.nodeType&&(null==(e=r?n.call(this,t,T(this).val()):n)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=T.map(e,function(t){return null==t?"":t+""})),(i=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in i&&void 0!==i.set(this,e,"value")||(this.value=e))})):e?(i=T.valHooks[e.type]||T.valHooks[e.nodeName.toLowerCase()])&&"get"in i&&void 0!==(t=i.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(ve,""):null==t?"":t:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:pe(T.text(t))}},select:{get:function(t){var e,n,i,r=t.options,s=t.selectedIndex,o="select-one"===t.type,a=o?null:[],l=o?s+1:r.length;for(i=s<0?l:o?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!A(n.parentNode,"optgroup"))){if(e=T(n).val(),o)return e;a.push(e)}return a},set:function(t,e){for(var n,i,r=t.options,s=T.makeArray(e),o=r.length;o--;)((i=r[o]).selected=-1<T.inArray(T.valHooks.option.get(i),s))&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<T.inArray(T(t).val(),e)}},v.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),v.focusin="onfocusin"in C;var ye=/^(?:focusinfocus|focusoutblur)$/,_e=function(t){t.stopPropagation()};T.extend(T.event,{trigger:function(t,e,n,i){var r,s,o,a,l,c,u,h,d=[n||E],f=m.call(t,"type")?t.type:t,p=m.call(t,"namespace")?t.namespace.split("."):[];if(s=h=o=n=n||E,3!==n.nodeType&&8!==n.nodeType&&!ye.test(f+T.event.triggered)&&(-1<f.indexOf(".")&&(f=(p=f.split(".")).shift(),p.sort()),l=f.indexOf(":")<0&&"on"+f,(t=t[T.expando]?t:new T.Event(f,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=p.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:T.makeArray(e,[t]),u=T.event.special[f]||{},i||!u.trigger||!1!==u.trigger.apply(n,e))){if(!i&&!u.noBubble&&!_(n)){for(a=u.delegateType||f,ye.test(a+f)||(s=s.parentNode);s;s=s.parentNode)d.push(s),o=s;o===(n.ownerDocument||E)&&d.push(o.defaultView||o.parentWindow||C)}for(r=0;(s=d[r++])&&!t.isPropagationStopped();)h=s,t.type=1<r?a:u.bindType||f,(c=(X.get(s,"events")||{})[t.type]&&X.get(s,"handle"))&&c.apply(s,e),(c=l&&s[l])&&c.apply&&V(s)&&(t.result=c.apply(s,e),!1===t.result&&t.preventDefault());return t.type=f,i||t.isDefaultPrevented()||u._default&&!1!==u._default.apply(d.pop(),e)||!V(n)||l&&y(n[f])&&!_(n)&&((o=n[l])&&(n[l]=null),T.event.triggered=f,t.isPropagationStopped()&&h.addEventListener(f,_e),n[f](),t.isPropagationStopped()&&h.removeEventListener(f,_e),T.event.triggered=void 0,o&&(n[l]=o)),t.result}},simulate:function(t,e,n){var i=T.extend(new T.Event,n,{type:t,isSimulated:!0});T.event.trigger(i,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each(function(){T.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return T.event.trigger(t,e,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(n,i){var r=function(t){T.event.simulate(i,t.target,T.event.fix(t))};T.event.special[i]={setup:function(){var t=this.ownerDocument||this,e=X.access(t,i);e||t.addEventListener(n,r,!0),X.access(t,i,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=X.access(t,i)-1;e?X.access(t,i,e):(t.removeEventListener(n,r,!0),X.remove(t,i))}}});var we=C.location,be=Date.now(),xe=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new C.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var Ce=/\[\]$/,Ee=/\r?\n/g,Te=/^(?:submit|button|image|reset|file)$/i,De=/^(?:input|select|textarea|keygen)/i;function Se(n,t,i,r){var e;if(Array.isArray(t))T.each(t,function(t,e){i||Ce.test(n)?r(n,e):Se(n+"["+("object"==typeof e&&null!=e?t:"")+"]",e,i,r)});else if(i||"object"!==b(t))r(n,t);else for(e in t)Se(n+"["+e+"]",t[e],i,r)}T.param=function(t,e){var n,i=[],r=function(t,e){var n=y(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,function(){r(this.name,this.value)});else for(n in t)Se(n,t[n],e,r);return i.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&De.test(this.nodeName)&&!Te.test(t)&&(this.checked||!ct.test(t))}).map(function(t,e){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(t){return{name:e.name,value:t.replace(Ee,"\r\n")}}):{name:e.name,value:n.replace(Ee,"\r\n")}}).get()}});var Ae=/%20/g,ke=/#.*$/,Ne=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)$/gm,je=/^(?:GET|HEAD)$/,Oe=/^\/\//,Pe={},Le={},He="*/".concat("*"),$e=E.createElement("a");function Me(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var n,i=0,r=t.toLowerCase().match(H)||[];if(y(e))for(;n=r[i++];)"+"===n[0]?(n=n.slice(1)||"*",(s[n]=s[n]||[]).unshift(e)):(s[n]=s[n]||[]).push(e)}}function Re(e,r,s,o){var a={},l=e===Le;function c(t){var i;return a[t]=!0,T.each(e[t]||[],function(t,e){var n=e(r,s,o);return"string"!=typeof n||l||a[n]?l?!(i=n):void 0:(r.dataTypes.unshift(n),c(n),!1)}),i}return c(r.dataTypes[0])||!a["*"]&&c("*")}function qe(t,e){var n,i,r=T.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&T.extend(!0,t,i),t}$e.href=we.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:we.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(we.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":He,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?qe(qe(t,T.ajaxSettings),e):qe(T.ajaxSettings,t)},ajaxPrefilter:Me(Pe),ajaxTransport:Me(Le),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var u,h,d,n,f,i,p,g,r,s,m=T.ajaxSetup({},e),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?T(v):T.event,_=T.Deferred(),w=T.Callbacks("once memory"),b=m.statusCode||{},o={},a={},l="canceled",x={readyState:0,getResponseHeader:function(t){var e;if(p){if(!n)for(n={};e=Ie.exec(d);)n[e[1].toLowerCase()]=e[2];e=n[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(t,e){return null==p&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,o[t]=e),this},overrideMimeType:function(t){return null==p&&(m.mimeType=t),this},statusCode:function(t){var e;if(t)if(p)x.always(t[x.status]);else for(e in t)b[e]=[b[e],t[e]];return this},abort:function(t){var e=t||l;return u&&u.abort(e),c(0,e),this}};if(_.promise(x),m.url=((t||m.url||we.href)+"").replace(Oe,we.protocol+"//"),m.type=e.method||e.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(H)||[""],null==m.crossDomain){i=E.createElement("a");try{i.href=m.url,i.href=i.href,m.crossDomain=$e.protocol+"//"+$e.host!=i.protocol+"//"+i.host}catch(t){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=T.param(m.data,m.traditional)),Re(Pe,m,e,x),p)return x;for(r in(g=T.event&&m.global)&&0==T.active++&&T.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!je.test(m.type),h=m.url.replace(ke,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Ae,"+")):(s=m.url.slice(h.length),m.data&&(m.processData||"string"==typeof m.data)&&(h+=(xe.test(h)?"&":"?")+m.data,delete m.data),!1===m.cache&&(h=h.replace(Ne,"$1"),s=(xe.test(h)?"&":"?")+"_="+be+++s),m.url=h+s),m.ifModified&&(T.lastModified[h]&&x.setRequestHeader("If-Modified-Since",T.lastModified[h]),T.etag[h]&&x.setRequestHeader("If-None-Match",T.etag[h])),(m.data&&m.hasContent&&!1!==m.contentType||e.contentType)&&x.setRequestHeader("Content-Type",m.contentType),x.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+He+"; q=0.01":""):m.accepts["*"]),m.headers)x.setRequestHeader(r,m.headers[r]);if(m.beforeSend&&(!1===m.beforeSend.call(v,x,m)||p))return x.abort();if(l="abort",w.add(m.complete),x.done(m.success),x.fail(m.error),u=Re(Le,m,e,x)){if(x.readyState=1,g&&y.trigger("ajaxSend",[x,m]),p)return x;m.async&&0<m.timeout&&(f=C.setTimeout(function(){x.abort("timeout")},m.timeout));try{p=!1,u.send(o,c)}catch(t){if(p)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,n,i){var r,s,o,a,l,c=e;p||(p=!0,f&&C.clearTimeout(f),u=void 0,d=i||"",x.readyState=0<t?4:0,r=200<=t&&t<300||304===t,n&&(a=function(t,e,n){for(var i,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(m,x,n)),a=function(t,e,n,i){var r,s,o,a,l,c={},u=t.dataTypes.slice();if(u[1])for(o in t.converters)c[o.toLowerCase()]=t.converters[o];for(s=u.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=u.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=c[l+" "+s]||c["* "+s]))for(r in c)if((a=r.split(" "))[1]===s&&(o=c[l+" "+a[0]]||c["* "+a[0]])){!0===o?o=c[r]:!0!==c[r]&&(s=a[0],u.unshift(a[1]));break}if(!0!==o)if(o&&t.throws)e=o(e);else try{e=o(e)}catch(t){return{state:"parsererror",error:o?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(m,a,x,r),r?(m.ifModified&&((l=x.getResponseHeader("Last-Modified"))&&(T.lastModified[h]=l),(l=x.getResponseHeader("etag"))&&(T.etag[h]=l)),204===t||"HEAD"===m.type?c="nocontent":304===t?c="notmodified":(c=a.state,s=a.data,r=!(o=a.error))):(o=c,!t&&c||(c="error",t<0&&(t=0))),x.status=t,x.statusText=(e||c)+"",r?_.resolveWith(v,[s,c,x]):_.rejectWith(v,[x,c,o]),x.statusCode(b),b=void 0,g&&y.trigger(r?"ajaxSuccess":"ajaxError",[x,m,r?s:o]),w.fireWith(v,[x,c]),g&&(y.trigger("ajaxComplete",[x,m]),--T.active||T.event.trigger("ajaxStop")))}return x},getJSON:function(t,e,n){return T.get(t,e,n,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],function(t,r){T[r]=function(t,e,n,i){return y(e)&&(i=i||n,n=e,e=void 0),T.ajax(T.extend({url:t,type:r,dataType:i,data:e,success:n},T.isPlainObject(t)&&t))}}),T._evalUrl=function(t){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(y(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(n){return y(n)?this.each(function(t){T(this).wrapInner(n.call(this,t))}):this.each(function(){var t=T(this),e=t.contents();e.length?e.wrapAll(n):t.append(n)})},wrap:function(e){var n=y(e);return this.each(function(t){T(this).wrapAll(n?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new C.XMLHttpRequest}catch(t){}};var We={0:200,1223:204},ze=T.ajaxSettings.xhr();v.cors=!!ze&&"withCredentials"in ze,v.ajax=ze=!!ze,T.ajaxTransport(function(r){var s,o;if(v.cors||ze&&!r.crossDomain)return{send:function(t,e){var n,i=r.xhr();if(i.open(r.type,r.url,r.async,r.username,r.password),r.xhrFields)for(n in r.xhrFields)i[n]=r.xhrFields[n];for(n in r.mimeType&&i.overrideMimeType&&i.overrideMimeType(r.mimeType),r.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)i.setRequestHeader(n,t[n]);s=function(t){return function(){s&&(s=o=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===t?i.abort():"error"===t?"number"!=typeof i.status?e(0,"error"):e(i.status,i.statusText):e(We[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=s(),o=i.onerror=i.ontimeout=s("error"),void 0!==i.onabort?i.onabort=o:i.onreadystatechange=function(){4===i.readyState&&C.setTimeout(function(){s&&o()})},s=s("abort");try{i.send(r.hasContent&&r.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),T.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),T.ajaxTransport("script",function(n){var i,r;if(n.crossDomain)return{send:function(t,e){i=T("<script>").prop({charset:n.scriptCharset,src:n.url}).on("load error",r=function(t){i.remove(),r=null,t&&e("error"===t.type?404:200,t.type)}),E.head.appendChild(i[0])},abort:function(){r&&r()}}});var Fe,Be=[],Ue=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Be.pop()||T.expando+"_"+be++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",function(t,e,n){var i,r,s,o=!1!==t.jsonp&&(Ue.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ue.test(t.data)&&"data");if(o||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=y(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,o?t[o]=t[o].replace(Ue,"$1"+i):!1!==t.jsonp&&(t.url+=(xe.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return s||T.error(i+" was not called"),s[0]},t.dataTypes[0]="json",r=C[i],C[i]=function(){s=arguments},n.always(function(){void 0===r?T(C).removeProp(i):C[i]=r,t[i]&&(t.jsonpCallback=e.jsonpCallback,Be.push(i)),s&&y(r)&&r(s[0]),s=r=void 0}),"script"}),v.createHTMLDocument=((Fe=E.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Fe.childNodes.length),T.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(v.createHTMLDocument?((i=(e=E.implementation.createHTMLDocument("")).createElement("base")).href=E.location.href,e.head.appendChild(i)):e=E),s=!n&&[],(r=k.exec(t))?[e.createElement(r[1])]:(r=yt([t],e,s),s&&s.length&&T(s).remove(),T.merge([],r.childNodes)));var i,r,s},T.fn.load=function(t,e,n){var i,r,s,o=this,a=t.indexOf(" ");return-1<a&&(i=pe(t.slice(a)),t=t.slice(0,a)),y(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),0<o.length&&T.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(i?T("<div>").append(T.parseHTML(t)).find(i):t)}).always(n&&function(t,e){o.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){T.fn[e]=function(t){return this.on(e,t)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(t,e,n){var i,r,s,o,a,l,c=T.css(t,"position"),u=T(t),h={};"static"===c&&(t.style.position="relative"),a=u.offset(),s=T.css(t,"top"),l=T.css(t,"left"),("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(o=(i=u.position()).top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),y(e)&&(e=e.call(t,n,T.extend({},a))),null!=e.top&&(h.top=e.top-a.top+o),null!=e.left&&(h.left=e.left-a.left+r),"using"in e?e.using.call(t,h):u.css(h)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===T.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&((r=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),r.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-T.css(i,"marginTop",!0),left:e.left-r.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||_t})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,r){var s="pageYOffset"===r;T.fn[e]=function(t){return F(this,function(t,e,n){var i;if(_(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===n)return i?i[r]:t[e];i?i.scrollTo(s?i.pageXOffset:n,s?n:i.pageYOffset):t[e]=n},e,t,arguments.length)}}),T.each(["top","left"],function(t,n){T.cssHooks[n]=Wt(v.pixelPosition,function(t,e){if(e)return e=qt(t,n),$t.test(e)?T(t).position()[n]+"px":e})}),T.each({Height:"height",Width:"width"},function(o,a){T.each({padding:"inner"+o,content:a,"":"outer"+o},function(i,s){T.fn[s]=function(t,e){var n=arguments.length&&(i||"boolean"!=typeof t),r=i||(!0===t||!0===e?"margin":"border");return F(this,function(t,e,n){var i;return _(t)?0===s.indexOf("outer")?t["inner"+o]:t.document.documentElement["client"+o]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+o],i["scroll"+o],t.body["offset"+o],i["offset"+o],i["client"+o])):void 0===n?T.css(t,e,r):T.style(t,e,n,r)},a,n?t:void 0,n)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){T.fn[n]=function(t,e){return 0<arguments.length?this.on(n,null,t,e):this.trigger(n)}}),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),T.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),y(t))return i=a.call(arguments,2),(r=function(){return t.apply(e||this,i.concat(a.call(arguments)))}).guid=t.guid=t.guid||T.guid++,r},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=A,T.isFunction=y,T.isWindow=_,T.camelCase=K,T.type=b,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var Qe=C.jQuery,Ke=C.$;return T.noConflict=function(t){return C.$===T&&(C.$=Ke),t&&C.jQuery===T&&(C.jQuery=Qe),T},t||(C.jQuery=C.$=T),T}),function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("jquery"),require("popper.js")):"function"==typeof define&&define.amd?define(["exports","jquery","popper.js"],e):e(t.bootstrap={},t.jQuery,t.Popper)}(this,function(t,e,u){"use strict";function i(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function o(t,e,n){return e&&i(t.prototype,e),n&&i(t,n),t}function c(r){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{},e=Object.keys(s);"function"==typeof Object.getOwnPropertySymbols&&(e=e.concat(Object.getOwnPropertySymbols(s).filter(function(t){return Object.getOwnPropertyDescriptor(s,t).enumerable}))),e.forEach(function(t){var e,n,i;e=r,i=s[n=t],n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i})}return r}e=e&&e.hasOwnProperty("default")?e.default:e,u=u&&u.hasOwnProperty("default")?u.default:u;var r,n,s,a,l,h,d,f,p,g,m,v,y,_,w,b,x,C,E,T,D,S,A,k,N,I,j,O,P,L,H,$,M,R,q,W,z,F,B,U,Q,K,V,Y,X,Z,G,J,tt,et,nt,it,rt,st,ot,at,lt,ct,ut,ht,dt,ft,pt,gt,mt,vt,yt,_t,wt,bt,xt,Ct,Et,Tt,Dt,St,At,kt,Nt,It,jt,Ot,Pt,Lt,Ht,$t,Mt,Rt,qt,Wt,zt,Ft,Bt,Ut,Qt,Kt,Vt,Yt,Xt,Zt,Gt,Jt,te,ee,ne,ie,re,se,oe,ae,le,ce,ue,he,de,fe,pe,ge,me,ve,ye,_e,we,be,xe,Ce,Ee,Te,De,Se,Ae,ke,Ne,Ie,je,Oe,Pe,Le,He,$e,Me,Re,qe,We,ze,Fe,Be,Ue,Qe,Ke,Ve,Ye,Xe,Ze,Ge,Je,tn,en,nn,rn,sn,on,an,ln,cn,un,hn,dn,fn,pn,gn,mn,vn,yn,_n,wn,bn,xn,Cn,En,Tn,Dn,Sn,An,kn,Nn,In,jn,On,Pn,Ln,Hn,$n,Mn,Rn,qn,Wn,zn=function(i){var e="transitionend";function t(t){var e=this,n=!1;return i(this).one(l.TRANSITION_END,function(){n=!0}),setTimeout(function(){n||l.triggerTransitionEnd(e)},t),this}var l={TRANSITION_END:"bsTransitionEnd",getUID:function(t){for(;t+=~~(1e6*Math.random()),document.getElementById(t););return t},getSelectorFromElement:function(t){var e=t.getAttribute("data-target");e&&"#"!==e||(e=t.getAttribute("href")||"");try{return 0<i(document).find(e).length?e:null}catch(t){return null}},getTransitionDurationFromElement:function(t){if(!t)return 0;var e=i(t).css("transition-duration");return parseFloat(e)?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(t){i(t).trigger(e)},supportsTransitionEnd:function(){return Boolean(e)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,e,n){for(var i in n)if(Object.prototype.hasOwnProperty.call(n,i)){var r=n[i],s=e[i],o=s&&l.isElement(s)?"element":(a=s,{}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(r).test(o))throw new Error(t.toUpperCase()+': Option "'+i+'" provided type "'+o+'" but expected type "'+r+'".')}var a}};return i.fn.emulateTransitionEnd=t,i.event.special[l.TRANSITION_END]={bindType:e,delegateType:e,handle:function(t){if(i(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}},l}(e),Fn=(n="alert",a="."+(s="bs.alert"),l=(r=e).fn[n],h={CLOSE:"close"+a,CLOSED:"closed"+a,CLICK_DATA_API:"click"+a+".data-api"},d="alert",f="fade",p="show",g=function(){function i(t){this._element=t}var t=i.prototype;return t.close=function(t){t=t||this._element;var e=this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)},t.dispose=function(){r.removeData(this._element,s),this._element=null},t._getRootElement=function(t){var e=zn.getSelectorFromElement(t),n=!1;return e&&(n=r(e)[0]),n||(n=r(t).closest("."+d)[0]),n},t._triggerCloseEvent=function(t){var e=r.Event(h.CLOSE);return r(t).trigger(e),e},t._removeElement=function(e){var n=this;if(r(e).removeClass(p),r(e).hasClass(f)){var t=zn.getTransitionDurationFromElement(e);r(e).one(zn.TRANSITION_END,function(t){return n._destroyElement(e,t)}).emulateTransitionEnd(t)}else this._destroyElement(e)},t._destroyElement=function(t){r(t).detach().trigger(h.CLOSED).remove()},i._jQueryInterface=function(n){return this.each(function(){var t=r(this),e=t.data(s);e||(e=new i(this),t.data(s,e)),"close"===n&&e[n](this)})},i._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},o(i,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),i}(),r(document).on(h.CLICK_DATA_API,'[data-dismiss="alert"]',g._handleDismiss(new g)),r.fn[n]=g._jQueryInterface,r.fn[n].Constructor=g,r.fn[n].noConflict=function(){return r.fn[n]=l,g._jQueryInterface},g),Bn=(v="button",_="."+(y="bs.button"),w=".data-api",b=(m=e).fn[v],x="active",C="btn",T='[data-toggle^="button"]',D='[data-toggle="buttons"]',S="input",A=".active",k=".btn",N={CLICK_DATA_API:"click"+_+w,FOCUS_BLUR_DATA_API:(E="focus")+_+w+" blur"+_+w},I=function(){function n(t){this._element=t}var t=n.prototype;return t.toggle=function(){var t=!0,e=!0,n=m(this._element).closest(D)[0];if(n){var i=m(this._element).find(S)[0];if(i){if("radio"===i.type)if(i.checked&&m(this._element).hasClass(x))t=!1;else{var r=m(n).find(A)[0];r&&m(r).removeClass(x)}if(t){if(i.hasAttribute("disabled")||n.hasAttribute("disabled")||i.classList.contains("disabled")||n.classList.contains("disabled"))return;i.checked=!m(this._element).hasClass(x),m(i).trigger("change")}i.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!m(this._element).hasClass(x)),t&&m(this._element).toggleClass(x)},t.dispose=function(){m.removeData(this._element,y),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var t=m(this).data(y);t||(t=new n(this),m(this).data(y,t)),"toggle"===e&&t[e]()})},o(n,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),n}(),m(document).on(N.CLICK_DATA_API,T,function(t){t.preventDefault();var e=t.target;m(e).hasClass(C)||(e=m(e).closest(k)),I._jQueryInterface.call(m(e),"toggle")}).on(N.FOCUS_BLUR_DATA_API,T,function(t){var e=m(t.target).closest(k)[0];m(e).toggleClass(E,/^focus(in)?$/.test(t.type))}),m.fn[v]=I._jQueryInterface,m.fn[v].Constructor=I,m.fn[v].noConflict=function(){return m.fn[v]=b,I._jQueryInterface},I),Un=(O="carousel",L="."+(P="bs.carousel"),H=".data-api",$=(j=e).fn[O],M={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},R={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},q="next",W="prev",z="left",F="right",B={SLIDE:"slide"+L,SLID:"slid"+L,KEYDOWN:"keydown"+L,MOUSEENTER:"mouseenter"+L,MOUSELEAVE:"mouseleave"+L,TOUCHEND:"touchend"+L,LOAD_DATA_API:"load"+L+H,CLICK_DATA_API:"click"+L+H},U="carousel",Q="active",K="slide",V="carousel-item-right",Y="carousel-item-left",X="carousel-item-next",Z="carousel-item-prev",G=".active",J=".active.carousel-item",tt=".carousel-item",et=".carousel-item-next, .carousel-item-prev",nt=".carousel-indicators",it="[data-slide], [data-slide-to]",rt='[data-ride="carousel"]',st=function(){function s(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=j(t)[0],this._indicatorsElement=j(this._element).find(nt)[0],this._addEventListeners()}var t=s.prototype;return t.next=function(){this._isSliding||this._slide(q)},t.nextWhenVisible=function(){!document.hidden&&j(this._element).is(":visible")&&"hidden"!==j(this._element).css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide(W)},t.pause=function(t){t||(this._isPaused=!0),j(this._element).find(et)[0]&&(zn.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(t){var e=this;this._activeElement=j(this._element).find(J)[0];var n=this._getItemIndex(this._activeElement);if(!(t>this._items.length-1||t<0))if(this._isSliding)j(this._element).one(B.SLID,function(){return e.to(t)});else{if(n===t)return this.pause(),void this.cycle();var i=n<t?q:W;this._slide(i,this._items[t])}},t.dispose=function(){j(this._element).off(L),j.removeData(this._element,P),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(t){return t=c({},M,t),zn.typeCheckConfig(O,t,R),t},t._addEventListeners=function(){var e=this;this._config.keyboard&&j(this._element).on(B.KEYDOWN,function(t){return e._keydown(t)}),"hover"===this._config.pause&&(j(this._element).on(B.MOUSEENTER,function(t){return e.pause(t)}).on(B.MOUSELEAVE,function(t){return e.cycle(t)}),"ontouchstart"in document.documentElement&&j(this._element).on(B.TOUCHEND,function(){e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout(function(t){return e.cycle(t)},500+e._config.interval)}))},t._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},t._getItemIndex=function(t){return this._items=j.makeArray(j(t).parent().find(tt)),this._items.indexOf(t)},t._getItemByDirection=function(t,e){var n=t===q,i=t===W,r=this._getItemIndex(e),s=this._items.length-1;if((i&&0===r||n&&r===s)&&!this._config.wrap)return e;var o=(r+(t===W?-1:1))%this._items.length;return-1===o?this._items[this._items.length-1]:this._items[o]},t._triggerSlideEvent=function(t,e){var n=this._getItemIndex(t),i=this._getItemIndex(j(this._element).find(J)[0]),r=j.Event(B.SLIDE,{relatedTarget:t,direction:e,from:i,to:n});return j(this._element).trigger(r),r},t._setActiveIndicatorElement=function(t){if(this._indicatorsElement){j(this._indicatorsElement).find(G).removeClass(Q);var e=this._indicatorsElement.children[this._getItemIndex(t)];e&&j(e).addClass(Q)}},t._slide=function(t,e){var n,i,r,s=this,o=j(this._element).find(J)[0],a=this._getItemIndex(o),l=e||o&&this._getItemByDirection(t,o),c=this._getItemIndex(l),u=Boolean(this._interval);if(t===q?(n=Y,i=X,r=z):(n=V,i=Z,r=F),l&&j(l).hasClass(Q))this._isSliding=!1;else if(!this._triggerSlideEvent(l,r).isDefaultPrevented()&&o&&l){this._isSliding=!0,u&&this.pause(),this._setActiveIndicatorElement(l);var h=j.Event(B.SLID,{relatedTarget:l,direction:r,from:a,to:c});if(j(this._element).hasClass(K)){j(l).addClass(i),zn.reflow(l),j(o).addClass(n),j(l).addClass(n);var d=zn.getTransitionDurationFromElement(o);j(o).one(zn.TRANSITION_END,function(){j(l).removeClass(n+" "+i).addClass(Q),j(o).removeClass(Q+" "+i+" "+n),s._isSliding=!1,setTimeout(function(){return j(s._element).trigger(h)},0)}).emulateTransitionEnd(d)}else j(o).removeClass(Q),j(l).addClass(Q),this._isSliding=!1,j(this._element).trigger(h);u&&this.cycle()}},s._jQueryInterface=function(i){return this.each(function(){var t=j(this).data(P),e=c({},M,j(this).data());"object"==typeof i&&(e=c({},e,i));var n="string"==typeof i?i:e.slide;if(t||(t=new s(this,e),j(this).data(P,t)),"number"==typeof i)t.to(i);else if("string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}else e.interval&&(t.pause(),t.cycle())})},s._dataApiClickHandler=function(t){var e=zn.getSelectorFromElement(this);if(e){var n=j(e)[0];if(n&&j(n).hasClass(U)){var i=c({},j(n).data(),j(this).data()),r=this.getAttribute("data-slide-to");r&&(i.interval=!1),s._jQueryInterface.call(j(n),i),r&&j(n).data(P).to(r),t.preventDefault()}}},o(s,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return M}}]),s}(),j(document).on(B.CLICK_DATA_API,it,st._dataApiClickHandler),j(window).on(B.LOAD_DATA_API,function(){j(rt).each(function(){var t=j(this);st._jQueryInterface.call(t,t.data())})}),j.fn[O]=st._jQueryInterface,j.fn[O].Constructor=st,j.fn[O].noConflict=function(){return j.fn[O]=$,st._jQueryInterface},st),Qn=(at="collapse",ct="."+(lt="bs.collapse"),ut=(ot=e).fn[at],ht={toggle:!0,parent:""},dt={toggle:"boolean",parent:"(string|element)"},ft={SHOW:"show"+ct,SHOWN:"shown"+ct,HIDE:"hide"+ct,HIDDEN:"hidden"+ct,CLICK_DATA_API:"click"+ct+".data-api"},pt="show",gt="collapse",mt="collapsing",vt="collapsed",yt="width",_t="height",wt=".show, .collapsing",bt='[data-toggle="collapse"]',xt=function(){function a(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=ot.makeArray(ot('[data-toggle="collapse"][href="#'+t.id+'"],[data-toggle="collapse"][data-target="#'+t.id+'"]'));for(var n=ot(bt),i=0;i<n.length;i++){var r=n[i],s=zn.getSelectorFromElement(r);null!==s&&0<ot(s).filter(t).length&&(this._selector=s,this._triggerArray.push(r))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=a.prototype;return t.toggle=function(){ot(this._element).hasClass(pt)?this.hide():this.show()},t.show=function(){var t,e,n=this;if(!this._isTransitioning&&!ot(this._element).hasClass(pt)&&(this._parent&&0===(t=ot.makeArray(ot(this._parent).find(wt).filter('[data-parent="'+this._config.parent+'"]'))).length&&(t=null),!(t&&(e=ot(t).not(this._selector).data(lt))&&e._isTransitioning))){var i=ot.Event(ft.SHOW);if(ot(this._element).trigger(i),!i.isDefaultPrevented()){t&&(a._jQueryInterface.call(ot(t).not(this._selector),"hide"),e||ot(t).data(lt,null));var r=this._getDimension();ot(this._element).removeClass(gt).addClass(mt),(this._element.style[r]=0)<this._triggerArray.length&&ot(this._triggerArray).removeClass(vt).attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(r[0].toUpperCase()+r.slice(1)),o=zn.getTransitionDurationFromElement(this._element);ot(this._element).one(zn.TRANSITION_END,function(){ot(n._element).removeClass(mt).addClass(gt).addClass(pt),n._element.style[r]="",n.setTransitioning(!1),ot(n._element).trigger(ft.SHOWN)}).emulateTransitionEnd(o),this._element.style[r]=this._element[s]+"px"}}},t.hide=function(){var t=this;if(!this._isTransitioning&&ot(this._element).hasClass(pt)){var e=ot.Event(ft.HIDE);if(ot(this._element).trigger(e),!e.isDefaultPrevented()){var n=this._getDimension();if(this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",zn.reflow(this._element),ot(this._element).addClass(mt).removeClass(gt).removeClass(pt),0<this._triggerArray.length)for(var i=0;i<this._triggerArray.length;i++){var r=this._triggerArray[i],s=zn.getSelectorFromElement(r);if(null!==s)ot(s).hasClass(pt)||ot(r).addClass(vt).attr("aria-expanded",!1)}this.setTransitioning(!0);this._element.style[n]="";var o=zn.getTransitionDurationFromElement(this._element);ot(this._element).one(zn.TRANSITION_END,function(){t.setTransitioning(!1),ot(t._element).removeClass(mt).addClass(gt).trigger(ft.HIDDEN)}).emulateTransitionEnd(o)}}},t.setTransitioning=function(t){this._isTransitioning=t},t.dispose=function(){ot.removeData(this._element,lt),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(t){return(t=c({},ht,t)).toggle=Boolean(t.toggle),zn.typeCheckConfig(at,t,dt),t},t._getDimension=function(){return ot(this._element).hasClass(yt)?yt:_t},t._getParent=function(){var n=this,t=null;zn.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=ot(this._config.parent)[0];var e='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]';return ot(t).find(e).each(function(t,e){n._addAriaAndCollapsedClass(a._getTargetFromElement(e),[e])}),t},t._addAriaAndCollapsedClass=function(t,e){if(t){var n=ot(t).hasClass(pt);0<e.length&&ot(e).toggleClass(vt,!n).attr("aria-expanded",n)}},a._getTargetFromElement=function(t){var e=zn.getSelectorFromElement(t);return e?ot(e)[0]:null},a._jQueryInterface=function(i){return this.each(function(){var t=ot(this),e=t.data(lt),n=c({},ht,t.data(),"object"==typeof i&&i);if(!e&&n.toggle&&/show|hide/.test(i)&&(n.toggle=!1),e||(e=new a(this,n),t.data(lt,e)),"string"==typeof i){if(void 0===e[i])throw new TypeError('No method named "'+i+'"');e[i]()}})},o(a,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return ht}}]),a}(),ot(document).on(ft.CLICK_DATA_API,bt,function(t){"A"===t.currentTarget.tagName&&t.preventDefault();var n=ot(this),e=zn.getSelectorFromElement(this);ot(e).each(function(){var t=ot(this),e=t.data(lt)?"toggle":n.data();xt._jQueryInterface.call(t,e)})}),ot.fn[at]=xt._jQueryInterface,ot.fn[at].Constructor=xt,ot.fn[at].noConflict=function(){return ot.fn[at]=ut,xt._jQueryInterface},xt),Kn=(Et="dropdown",Dt="."+(Tt="bs.dropdown"),St=".data-api",At=(Ct=e).fn[Et],kt=new RegExp("38|40|27"),Nt={HIDE:"hide"+Dt,HIDDEN:"hidden"+Dt,SHOW:"show"+Dt,SHOWN:"shown"+Dt,CLICK:"click"+Dt,CLICK_DATA_API:"click"+Dt+St,KEYDOWN_DATA_API:"keydown"+Dt+St,KEYUP_DATA_API:"keyup"+Dt+St},It="disabled",jt="show",Ot="dropup",Pt="dropright",Lt="dropleft",Ht="dropdown-menu-right",$t="position-static",Mt='[data-toggle="dropdown"]',Rt=".dropdown form",qt=".dropdown-menu",Wt=".navbar-nav",zt=".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",Ft="top-start",Bt="top-end",Ut="bottom-start",Qt="bottom-end",Kt="right-start",Vt="left-start",Yt={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},Xt={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},Zt=function(){function l(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=l.prototype;return t.toggle=function(){if(!this._element.disabled&&!Ct(this._element).hasClass(It)){var t=l._getParentFromElement(this._element),e=Ct(this._menu).hasClass(jt);if(l._clearMenus(),!e){var n={relatedTarget:this._element},i=Ct.Event(Nt.SHOW,n);if(Ct(t).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===u)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var r=this._element;"parent"===this._config.reference?r=t:zn.isElement(this._config.reference)&&(r=this._config.reference,void 0!==this._config.reference.jquery&&(r=this._config.reference[0])),"scrollParent"!==this._config.boundary&&Ct(t).addClass($t),this._popper=new u(r,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===Ct(t).closest(Wt).length&&Ct(document.body).children().on("mouseover",null,Ct.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),Ct(this._menu).toggleClass(jt),Ct(t).toggleClass(jt).trigger(Ct.Event(Nt.SHOWN,n))}}}},t.dispose=function(){Ct.removeData(this._element,Tt),Ct(this._element).off(Dt),this._element=null,(this._menu=null)!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;Ct(this._element).on(Nt.CLICK,function(t){t.preventDefault(),t.stopPropagation(),e.toggle()})},t._getConfig=function(t){return t=c({},this.constructor.Default,Ct(this._element).data(),t),zn.typeCheckConfig(Et,t,this.constructor.DefaultType),t},t._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);this._menu=Ct(t).find(qt)[0]}return this._menu},t._getPlacement=function(){var t=Ct(this._element).parent(),e=Ut;return t.hasClass(Ot)?(e=Ft,Ct(this._menu).hasClass(Ht)&&(e=Bt)):t.hasClass(Pt)?e=Kt:t.hasClass(Lt)?e=Vt:Ct(this._menu).hasClass(Ht)&&(e=Qt),e},t._detectNavbar=function(){return 0<Ct(this._element).closest(".navbar").length},t._getPopperConfig=function(){var e=this,t={};"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=c({},t.offsets,e._config.offset(t.offsets)||{}),t}:t.offset=this._config.offset;var n={placement:this._getPlacement(),modifiers:{offset:t,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(n.modifiers.applyStyle={enabled:!1}),n},l._jQueryInterface=function(e){return this.each(function(){var t=Ct(this).data(Tt);if(t||(t=new l(this,"object"==typeof e?e:null),Ct(this).data(Tt,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},l._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var e=Ct.makeArray(Ct(Mt)),n=0;n<e.length;n++){var i=l._getParentFromElement(e[n]),r=Ct(e[n]).data(Tt),s={relatedTarget:e[n]};if(r){var o=r._menu;if(Ct(i).hasClass(jt)&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&Ct.contains(i,t.target))){var a=Ct.Event(Nt.HIDE,s);Ct(i).trigger(a),a.isDefaultPrevented()||("ontouchstart"in document.documentElement&&Ct(document.body).children().off("mouseover",null,Ct.noop),e[n].setAttribute("aria-expanded","false"),Ct(o).removeClass(jt),Ct(i).removeClass(jt).trigger(Ct.Event(Nt.HIDDEN,s)))}}}},l._getParentFromElement=function(t){var e,n=zn.getSelectorFromElement(t);return n&&(e=Ct(n)[0]),e||t.parentNode},l._dataApiKeydownHandler=function(t){if((/input|textarea/i.test(t.target.tagName)?!(32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||Ct(t.target).closest(qt).length)):kt.test(t.which))&&(t.preventDefault(),t.stopPropagation(),!this.disabled&&!Ct(this).hasClass(It))){var e=l._getParentFromElement(this),n=Ct(e).hasClass(jt);if((n||27===t.which&&32===t.which)&&(!n||27!==t.which&&32!==t.which)){var i=Ct(e).find(zt).get();if(0!==i.length){var r=i.indexOf(t.target);38===t.which&&0<r&&r--,40===t.which&&r<i.length-1&&r++,r<0&&(r=0),i[r].focus()}}else{if(27===t.which){var s=Ct(e).find(Mt)[0];Ct(s).trigger("focus")}Ct(this).trigger("click")}}},o(l,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return Yt}},{key:"DefaultType",get:function(){return Xt}}]),l}(),Ct(document).on(Nt.KEYDOWN_DATA_API,Mt,Zt._dataApiKeydownHandler).on(Nt.KEYDOWN_DATA_API,qt,Zt._dataApiKeydownHandler).on(Nt.CLICK_DATA_API+" "+Nt.KEYUP_DATA_API,Zt._clearMenus).on(Nt.CLICK_DATA_API,Mt,function(t){t.preventDefault(),t.stopPropagation(),Zt._jQueryInterface.call(Ct(this),"toggle")}).on(Nt.CLICK_DATA_API,Rt,function(t){t.stopPropagation()}),Ct.fn[Et]=Zt._jQueryInterface,Ct.fn[Et].Constructor=Zt,Ct.fn[Et].noConflict=function(){return Ct.fn[Et]=At,Zt._jQueryInterface},Zt),Vn=(Jt="modal",ee="."+(te="bs.modal"),ne=(Gt=e).fn[Jt],ie={backdrop:!0,keyboard:!0,focus:!0,show:!0},re={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},se={HIDE:"hide"+ee,HIDDEN:"hidden"+ee,SHOW:"show"+ee,SHOWN:"shown"+ee,FOCUSIN:"focusin"+ee,RESIZE:"resize"+ee,CLICK_DISMISS:"click.dismiss"+ee,KEYDOWN_DISMISS:"keydown.dismiss"+ee,MOUSEUP_DISMISS:"mouseup.dismiss"+ee,MOUSEDOWN_DISMISS:"mousedown.dismiss"+ee,CLICK_DATA_API:"click"+ee+".data-api"},oe="modal-scrollbar-measure",ae="modal-backdrop",le="modal-open",ce="fade",ue="show",he=".modal-dialog",de='[data-toggle="modal"]',fe='[data-dismiss="modal"]',pe=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",ge=".sticky-top",me=".navbar-toggler",ve=function(){function r(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=Gt(t).find(he)[0],this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var t=r.prototype;return t.toggle=function(t){return this._isShown?this.hide():this.show(t)},t.show=function(t){var e=this;if(!this._isTransitioning&&!this._isShown){Gt(this._element).hasClass(ce)&&(this._isTransitioning=!0);var n=Gt.Event(se.SHOW,{relatedTarget:t});Gt(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),Gt(document.body).addClass(le),this._setEscapeEvent(),this._setResizeEvent(),Gt(this._element).on(se.CLICK_DISMISS,fe,function(t){return e.hide(t)}),Gt(this._dialog).on(se.MOUSEDOWN_DISMISS,function(){Gt(e._element).one(se.MOUSEUP_DISMISS,function(t){Gt(t.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(t)}))}},t.hide=function(t){var e=this;if(t&&t.preventDefault(),!this._isTransitioning&&this._isShown){var n=Gt.Event(se.HIDE);if(Gt(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var i=Gt(this._element).hasClass(ce);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),Gt(document).off(se.FOCUSIN),Gt(this._element).removeClass(ue),Gt(this._element).off(se.CLICK_DISMISS),Gt(this._dialog).off(se.MOUSEDOWN_DISMISS),i){var r=zn.getTransitionDurationFromElement(this._element);Gt(this._element).one(zn.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(r)}else this._hideModal()}}},t.dispose=function(){Gt.removeData(this._element,te),Gt(window,document,this._element,this._backdrop).off(ee),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(t){return t=c({},ie,t),zn.typeCheckConfig(Jt,t,re),t},t._showElement=function(t){var e=this,n=Gt(this._element).hasClass(ce);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,n&&zn.reflow(this._element),Gt(this._element).addClass(ue),this._config.focus&&this._enforceFocus();var i=Gt.Event(se.SHOWN,{relatedTarget:t}),r=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,Gt(e._element).trigger(i)};if(n){var s=zn.getTransitionDurationFromElement(this._element);Gt(this._dialog).one(zn.TRANSITION_END,r).emulateTransitionEnd(s)}else r()},t._enforceFocus=function(){var e=this;Gt(document).off(se.FOCUSIN).on(se.FOCUSIN,function(t){document!==t.target&&e._element!==t.target&&0===Gt(e._element).has(t.target).length&&e._element.focus()})},t._setEscapeEvent=function(){var e=this;this._isShown&&this._config.keyboard?Gt(this._element).on(se.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),e.hide())}):this._isShown||Gt(this._element).off(se.KEYDOWN_DISMISS)},t._setResizeEvent=function(){var e=this;this._isShown?Gt(window).on(se.RESIZE,function(t){return e.handleUpdate(t)}):Gt(window).off(se.RESIZE)},t._hideModal=function(){var t=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){Gt(document.body).removeClass(le),t._resetAdjustments(),t._resetScrollbar(),Gt(t._element).trigger(se.HIDDEN)})},t._removeBackdrop=function(){this._backdrop&&(Gt(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(t){var e=this,n=Gt(this._element).hasClass(ce)?ce:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=ae,n&&Gt(this._backdrop).addClass(n),Gt(this._backdrop).appendTo(document.body),Gt(this._element).on(se.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),n&&zn.reflow(this._backdrop),Gt(this._backdrop).addClass(ue),!t)return;if(!n)return void t();var i=zn.getTransitionDurationFromElement(this._backdrop);Gt(this._backdrop).one(zn.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){Gt(this._backdrop).removeClass(ue);var r=function(){e._removeBackdrop(),t&&t()};if(Gt(this._element).hasClass(ce)){var s=zn.getTransitionDurationFromElement(this._backdrop);Gt(this._backdrop).one(zn.TRANSITION_END,r).emulateTransitionEnd(s)}else r()}else t&&t()},t._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var r=this;if(this._isBodyOverflowing){Gt(pe).each(function(t,e){var n=Gt(e)[0].style.paddingRight,i=Gt(e).css("padding-right");Gt(e).data("padding-right",n).css("padding-right",parseFloat(i)+r._scrollbarWidth+"px")}),Gt(ge).each(function(t,e){var n=Gt(e)[0].style.marginRight,i=Gt(e).css("margin-right");Gt(e).data("margin-right",n).css("margin-right",parseFloat(i)-r._scrollbarWidth+"px")}),Gt(me).each(function(t,e){var n=Gt(e)[0].style.marginRight,i=Gt(e).css("margin-right");Gt(e).data("margin-right",n).css("margin-right",parseFloat(i)+r._scrollbarWidth+"px")});var t=document.body.style.paddingRight,e=Gt(document.body).css("padding-right");Gt(document.body).data("padding-right",t).css("padding-right",parseFloat(e)+this._scrollbarWidth+"px")}},t._resetScrollbar=function(){Gt(pe).each(function(t,e){var n=Gt(e).data("padding-right");void 0!==n&&Gt(e).css("padding-right",n).removeData("padding-right")}),Gt(ge+", "+me).each(function(t,e){var n=Gt(e).data("margin-right");void 0!==n&&Gt(e).css("margin-right",n).removeData("margin-right")});var t=Gt(document.body).data("padding-right");void 0!==t&&Gt(document.body).css("padding-right",t).removeData("padding-right")},t._getScrollbarWidth=function(){var t=document.createElement("div");t.className=oe,document.body.appendChild(t);var e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e},r._jQueryInterface=function(n,i){return this.each(function(){var t=Gt(this).data(te),e=c({},r.Default,Gt(this).data(),"object"==typeof n&&n);if(t||(t=new r(this,e),Gt(this).data(te,t)),"string"==typeof n){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n](i)}else e.show&&t.show(i)})},o(r,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return ie}}]),r}(),Gt(document).on(se.CLICK_DATA_API,de,function(t){var e,n=this,i=zn.getSelectorFromElement(this);i&&(e=Gt(i)[0]);var r=Gt(e).data(te)?"toggle":c({},Gt(e).data(),Gt(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();var s=Gt(e).one(se.SHOW,function(t){t.isDefaultPrevented()||s.one(se.HIDDEN,function(){Gt(n).is(":visible")&&n.focus()})});ve._jQueryInterface.call(Gt(e),r,this)}),Gt.fn[Jt]=ve._jQueryInterface,Gt.fn[Jt].Constructor=ve,Gt.fn[Jt].noConflict=function(){return Gt.fn[Jt]=ne,ve._jQueryInterface},ve),Yn=(_e="tooltip",be="."+(we="bs.tooltip"),xe=(ye=e).fn[_e],Ce="bs-tooltip",Ee=new RegExp("(^|\\s)"+Ce+"\\S+","g"),Se={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!(De={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"}),selector:!(Te={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"}),placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},ke="out",Ne={HIDE:"hide"+be,HIDDEN:"hidden"+be,SHOW:(Ae="show")+be,SHOWN:"shown"+be,INSERTED:"inserted"+be,CLICK:"click"+be,FOCUSIN:"focusin"+be,FOCUSOUT:"focusout"+be,MOUSEENTER:"mouseenter"+be,MOUSELEAVE:"mouseleave"+be},Ie="fade",je="show",Oe=".tooltip-inner",Pe=".arrow",Le="hover",He="focus",$e="click",Me="manual",Re=function(){function i(t,e){if(void 0===u)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}var t=i.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(t){if(this._isEnabled)if(t){var e=this.constructor.DATA_KEY,n=ye(t.currentTarget).data(e);n||(n=new this.constructor(t.currentTarget,this._getDelegateConfig()),ye(t.currentTarget).data(e,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(ye(this.getTipElement()).hasClass(je))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),ye.removeData(this.element,this.constructor.DATA_KEY),ye(this.element).off(this.constructor.EVENT_KEY),ye(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&ye(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,(this._activeTrigger=null)!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===ye(this.element).css("display"))throw new Error("Please use show on visible elements");var t=ye.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){ye(this.element).trigger(t);var n=ye.contains(this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!n)return;var i=this.getTipElement(),r=zn.getUID(this.constructor.NAME);i.setAttribute("id",r),this.element.setAttribute("aria-describedby",r),this.setContent(),this.config.animation&&ye(i).addClass(Ie);var s="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,o=this._getAttachment(s);this.addAttachmentClass(o);var a=!1===this.config.container?document.body:ye(this.config.container);ye(i).data(this.constructor.DATA_KEY,this),ye.contains(this.element.ownerDocument.documentElement,this.tip)||ye(i).appendTo(a),ye(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new u(this.element,i,{placement:o,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:Pe},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&e._handlePopperPlacementChange(t)},onUpdate:function(t){e._handlePopperPlacementChange(t)}}),ye(i).addClass(je),"ontouchstart"in document.documentElement&&ye(document.body).children().on("mouseover",null,ye.noop);var l=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,ye(e.element).trigger(e.constructor.Event.SHOWN),t===ke&&e._leave(null,e)};if(ye(this.tip).hasClass(Ie)){var c=zn.getTransitionDurationFromElement(this.tip);ye(this.tip).one(zn.TRANSITION_END,l).emulateTransitionEnd(c)}else l()}},t.hide=function(t){var e=this,n=this.getTipElement(),i=ye.Event(this.constructor.Event.HIDE),r=function(){e._hoverState!==Ae&&n.parentNode&&n.parentNode.removeChild(n),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),ye(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),t&&t()};if(ye(this.element).trigger(i),!i.isDefaultPrevented()){if(ye(n).removeClass(je),"ontouchstart"in document.documentElement&&ye(document.body).children().off("mouseover",null,ye.noop),this._activeTrigger[$e]=!1,this._activeTrigger[He]=!1,this._activeTrigger[Le]=!1,ye(this.tip).hasClass(Ie)){var s=zn.getTransitionDurationFromElement(n);ye(n).one(zn.TRANSITION_END,r).emulateTransitionEnd(s)}else r();this._hoverState=""}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(t){ye(this.getTipElement()).addClass(Ce+"-"+t)},t.getTipElement=function(){return this.tip=this.tip||ye(this.config.template)[0],this.tip},t.setContent=function(){var t=ye(this.getTipElement());this.setElementContent(t.find(Oe),this.getTitle()),t.removeClass(Ie+" "+je)},t.setElementContent=function(t,e){var n=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?n?ye(e).parent().is(t)||t.empty().append(e):t.text(ye(e).text()):t[n?"html":"text"](e)},t.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},t._getAttachment=function(t){return De[t.toUpperCase()]},t._setListeners=function(){var i=this;this.config.trigger.split(" ").forEach(function(t){if("click"===t)ye(i.element).on(i.constructor.Event.CLICK,i.config.selector,function(t){return i.toggle(t)});else if(t!==Me){var e=t===Le?i.constructor.Event.MOUSEENTER:i.constructor.Event.FOCUSIN,n=t===Le?i.constructor.Event.MOUSELEAVE:i.constructor.Event.FOCUSOUT;ye(i.element).on(e,i.config.selector,function(t){return i._enter(t)}).on(n,i.config.selector,function(t){return i._leave(t)})}ye(i.element).closest(".modal").on("hide.bs.modal",function(){return i.hide()})}),this.config.selector?this.config=c({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(t,e){var n=this.constructor.DATA_KEY;(e=e||ye(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ye(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusin"===t.type?He:Le]=!0),ye(e.getTipElement()).hasClass(je)||e._hoverState===Ae?e._hoverState=Ae:(clearTimeout(e._timeout),e._hoverState=Ae,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===Ae&&e.show()},e.config.delay.show):e.show())},t._leave=function(t,e){var n=this.constructor.DATA_KEY;(e=e||ye(t.currentTarget).data(n))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),ye(t.currentTarget).data(n,e)),t&&(e._activeTrigger["focusout"===t.type?He:Le]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=ke,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===ke&&e.hide()},e.config.delay.hide):e.hide())},t._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},t._getConfig=function(t){return"number"==typeof(t=c({},this.constructor.Default,ye(this.element).data(),t)).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),zn.typeCheckConfig(_e,t,this.constructor.DefaultType),t},t._getDelegateConfig=function(){var t={};if(this.config)for(var e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t},t._cleanTipClass=function(){var t=ye(this.getTipElement()),e=t.attr("class").match(Ee);null!==e&&0<e.length&&t.removeClass(e.join(""))},t._handlePopperPlacementChange=function(t){this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},t._fixTransition=function(){var t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(ye(t).removeClass(Ie),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},i._jQueryInterface=function(n){return this.each(function(){var t=ye(this).data(we),e="object"==typeof n&&n;if((t||!/dispose|hide/.test(n))&&(t||(t=new i(this,e),ye(this).data(we,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return Se}},{key:"NAME",get:function(){return _e}},{key:"DATA_KEY",get:function(){return we}},{key:"Event",get:function(){return Ne}},{key:"EVENT_KEY",get:function(){return be}},{key:"DefaultType",get:function(){return Te}}]),i}(),ye.fn[_e]=Re._jQueryInterface,ye.fn[_e].Constructor=Re,ye.fn[_e].noConflict=function(){return ye.fn[_e]=xe,Re._jQueryInterface},Re),Xn=(We="popover",Fe="."+(ze="bs.popover"),Be=(qe=e).fn[We],Ue="bs-popover",Qe=new RegExp("(^|\\s)"+Ue+"\\S+","g"),Ke=c({},Yn.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),Ve=c({},Yn.DefaultType,{content:"(string|element|function)"}),Ye="fade",Ze=".popover-header",Ge=".popover-body",Je={HIDE:"hide"+Fe,HIDDEN:"hidden"+Fe,SHOW:(Xe="show")+Fe,SHOWN:"shown"+Fe,INSERTED:"inserted"+Fe,CLICK:"click"+Fe,FOCUSIN:"focusin"+Fe,FOCUSOUT:"focusout"+Fe,MOUSEENTER:"mouseenter"+Fe,MOUSELEAVE:"mouseleave"+Fe},tn=function(t){var e,n;function i(){return t.apply(this,arguments)||this}n=t,(e=i).prototype=Object.create(n.prototype),(e.prototype.constructor=e).__proto__=n;var r=i.prototype;return r.isWithContent=function(){return this.getTitle()||this._getContent()},r.addAttachmentClass=function(t){qe(this.getTipElement()).addClass(Ue+"-"+t)},r.getTipElement=function(){return this.tip=this.tip||qe(this.config.template)[0],this.tip},r.setContent=function(){var t=qe(this.getTipElement());this.setElementContent(t.find(Ze),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(Ge),e),t.removeClass(Ye+" "+Xe)},r._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},r._cleanTipClass=function(){var t=qe(this.getTipElement()),e=t.attr("class").match(Qe);null!==e&&0<e.length&&t.removeClass(e.join(""))},i._jQueryInterface=function(n){return this.each(function(){var t=qe(this).data(ze),e="object"==typeof n?n:null;if((t||!/destroy|hide/.test(n))&&(t||(t=new i(this,e),qe(this).data(ze,t)),"string"==typeof n)){if(void 0===t[n])throw new TypeError('No method named "'+n+'"');t[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return Ke}},{key:"NAME",get:function(){return We}},{key:"DATA_KEY",get:function(){return ze}},{key:"Event",get:function(){return Je}},{key:"EVENT_KEY",get:function(){return Fe}},{key:"DefaultType",get:function(){return Ve}}]),i}(Yn),qe.fn[We]=tn._jQueryInterface,qe.fn[We].Constructor=tn,qe.fn[We].noConflict=function(){return qe.fn[We]=Be,tn._jQueryInterface},tn),Zn=(nn="scrollspy",sn="."+(rn="bs.scrollspy"),on=(en=e).fn[nn],an={offset:10,method:"auto",target:""},ln={offset:"number",method:"string",target:"(string|element)"},cn={ACTIVATE:"activate"+sn,SCROLL:"scroll"+sn,LOAD_DATA_API:"load"+sn+".data-api"},un="dropdown-item",hn="active",dn='[data-spy="scroll"]',fn=".active",pn=".nav, .list-group",gn=".nav-link",mn=".nav-item",vn=".list-group-item",yn=".dropdown",_n=".dropdown-item",wn=".dropdown-toggle",bn="offset",xn="position",Cn=function(){function n(t,e){var n=this;this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=this._config.target+" "+gn+","+this._config.target+" "+vn+","+this._config.target+" "+_n,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,en(this._scrollElement).on(cn.SCROLL,function(t){return n._process(t)}),this.refresh(),this._process()}var t=n.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?bn:xn,r="auto"===this._config.method?t:this._config.method,s=r===xn?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),en.makeArray(en(this._selector)).map(function(t){var e,n=zn.getSelectorFromElement(t);if(n&&(e=en(n)[0]),e){var i=e.getBoundingClientRect();if(i.width||i.height)return[en(e)[r]().top+s,n]}return null}).filter(function(t){return t}).sort(function(t,e){return t[0]-e[0]}).forEach(function(t){e._offsets.push(t[0]),e._targets.push(t[1])})},t.dispose=function(){en.removeData(this._element,rn),en(this._scrollElement).off(sn),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(t){if("string"!=typeof(t=c({},an,t)).target){var e=en(t.target).attr("id");e||(e=zn.getUID(nn),en(t.target).attr("id",e)),t.target="#"+e}return zn.typeCheckConfig(nn,t,ln),t},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),n=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),n<=t){var i=this._targets[this._targets.length-1];this._activeTarget!==i&&this._activate(i)}else{if(this._activeTarget&&t<this._offsets[0]&&0<this._offsets[0])return this._activeTarget=null,void this._clear();for(var r=this._offsets.length;r--;){this._activeTarget!==this._targets[r]&&t>=this._offsets[r]&&(void 0===this._offsets[r+1]||t<this._offsets[r+1])&&this._activate(this._targets[r])}}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",");t=t.map(function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'});var n=en(t.join(","));n.hasClass(un)?(n.closest(yn).find(wn).addClass(hn),n.addClass(hn)):(n.addClass(hn),n.parents(pn).prev(gn+", "+vn).addClass(hn),n.parents(pn).prev(mn).children(gn).addClass(hn)),en(this._scrollElement).trigger(cn.ACTIVATE,{relatedTarget:e})},t._clear=function(){en(this._selector).filter(fn).removeClass(hn)},n._jQueryInterface=function(e){return this.each(function(){var t=en(this).data(rn);if(t||(t=new n(this,"object"==typeof e&&e),en(this).data(rn,t)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}})},o(n,null,[{key:"VERSION",get:function(){return"4.1.0"}},{key:"Default",get:function(){return an}}]),n}(),en(window).on(cn.LOAD_DATA_API,function(){for(var t=en.makeArray(en(dn)),e=t.length;e--;){var n=en(t[e]);Cn._jQueryInterface.call(n,n.data())}}),en.fn[nn]=Cn._jQueryInterface,en.fn[nn].Constructor=Cn,en.fn[nn].noConflict=function(){return en.fn[nn]=on,Cn._jQueryInterface},Cn),Gn=(Dn="."+(Tn="bs.tab"),Sn=(En=e).fn.tab,An={HIDE:"hide"+Dn,HIDDEN:"hidden"+Dn,SHOW:"show"+Dn,SHOWN:"shown"+Dn,CLICK_DATA_API:"click"+Dn+".data-api"},kn="dropdown-menu",Nn="active",In="disabled",jn="fade",On="show",Pn=".dropdown",Ln=".nav, .list-group",Hn=".active",$n="> li > .active",Mn='[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',Rn=".dropdown-toggle",qn="> .dropdown-menu .active",Wn=function(){function i(t){this._element=t}var t=i.prototype;return t.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&En(this._element).hasClass(Nn)||En(this._element).hasClass(In))){var t,i,e=En(this._element).closest(Ln)[0],r=zn.getSelectorFromElement(this._element);if(e){var s="UL"===e.nodeName?$n:Hn;i=(i=En.makeArray(En(e).find(s)))[i.length-1]}var o=En.Event(An.HIDE,{relatedTarget:this._element}),a=En.Event(An.SHOW,{relatedTarget:i});if(i&&En(i).trigger(o),En(this._element).trigger(a),!a.isDefaultPrevented()&&!o.isDefaultPrevented()){r&&(t=En(r)[0]),this._activate(this._element,e);var l=function(){var t=En.Event(An.HIDDEN,{relatedTarget:n._element}),e=En.Event(An.SHOWN,{relatedTarget:i});En(i).trigger(t),En(n._element).trigger(e)};t?this._activate(t,t.parentNode,l):l()}}},t.dispose=function(){En.removeData(this._element,Tn),this._element=null},t._activate=function(t,e,n){var i=this,r=("UL"===e.nodeName?En(e).find($n):En(e).children(Hn))[0],s=n&&r&&En(r).hasClass(jn),o=function(){return i._transitionComplete(t,r,n)};if(r&&s){var a=zn.getTransitionDurationFromElement(r);En(r).one(zn.TRANSITION_END,o).emulateTransitionEnd(a)}else o()},t._transitionComplete=function(t,e,n){if(e){En(e).removeClass(On+" "+Nn);var i=En(e.parentNode).find(qn)[0];i&&En(i).removeClass(Nn),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(En(t).addClass(Nn),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),zn.reflow(t),En(t).addClass(On),t.parentNode&&En(t.parentNode).hasClass(kn)){var r=En(t).closest(Pn)[0];r&&En(r).find(Rn).addClass(Nn),t.setAttribute("aria-expanded",!0)}n&&n()},i._jQueryInterface=function(n){return this.each(function(){var t=En(this),e=t.data(Tn);if(e||(e=new i(this),t.data(Tn,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.1.0"}}]),i}(),En(document).on(An.CLICK_DATA_API,Mn,function(t){t.preventDefault(),Wn._jQueryInterface.call(En(this),"show")}),En.fn.tab=Wn._jQueryInterface,En.fn.tab.Constructor=Wn,En.fn.tab.noConflict=function(){return En.fn.tab=Sn,Wn._jQueryInterface},Wn);!function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||4<=e[0])throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}(e),t.Util=zn,t.Alert=Fn,t.Button=Bn,t.Carousel=Un,t.Collapse=Qn,t.Dropdown=Kn,t.Modal=Vn,t.Popover=Xn,t.Scrollspy=Zn,t.Tab=Gn,t.Tooltip=Yn,Object.defineProperty(t,"__esModule",{value:!0})}),function(l,n,r,a){function c(t,e){this.settings=null,this.options=l.extend({},c.Defaults,e),this.$element=l(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},l.each(["onResize","onThrottledResize"],l.proxy(function(t,e){this._handlers[e]=l.proxy(this[e],this)},this)),l.each(c.Plugins,l.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),l.each(c.Workers,l.proxy(function(t,e){this._pipe.push({filter:e.filter,run:l.proxy(e.run,this)})},this)),this.setup(),this.initialize()}c.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:n,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},c.Width={Default:"default",Inner:"inner",Outer:"outer"},c.Type={Event:"event",State:"state"},c.Plugins={},c.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=1<n||t.items.merge,s[i]=r?e*n:this._items[i].width();this._widths=s}},{filter:["items","settings"],run:function(){var t=[],e=this._items,n=this.settings,i=Math.max(2*n.items,4),r=2*Math.ceil(e.length/2),s=n.loop&&e.length?n.rewind?i:Math.max(i,r):0,o="",a="";for(s/=2;0<s;)t.push(this.normalize(t.length/2,!0)),o+=e[t[t.length-1]][0].outerHTML,t.push(this.normalize(e.length-1-(t.length-1)/2,!0)),a=e[t[t.length-1]][0].outerHTML+a,s-=1;this._clones=t,l(o).addClass("cloned").appendTo(this.$stage),l(a).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,s=[];++n<e;)i=s[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,s.push(i+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],c.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=l("<"+this.settings.stageElement+">",{class:this.settings.stageClass}).wrap(l("<div/>",{class:this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},c.prototype.initializeItems=function(){var t=this.$element.find(".owl-item");if(t.length)return this._items=t.get().map(function(t){return l(t)}),this._mergers=this._items.map(function(){return 1}),void this.refresh();this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass)},c.prototype.initialize=function(){var t,e,n;(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading"))&&(t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:a,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t));this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},c.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},c.prototype.setup=function(){var e=this.viewport(),t=this.options.responsive,n=-1,i=null;t?(l.each(t,function(t){t<=e&&n<t&&(n=Number(t))}),"function"==typeof(i=l.extend({},this.options,t[n])).stagePadding&&(i.stagePadding=i.stagePadding()),delete i.responsive,i.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):i=l.extend({},this.options),this.trigger("change",{property:{name:"settings",value:i}}),this._breakpoint=n,this.settings=i,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},c.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},c.prototype.prepare=function(t){var e=this.trigger("prepare",{content:t});return e.data||(e.data=l("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:e.data}),e.data},c.prototype.update=function(){for(var t=0,e=this._pipe.length,n=l.proxy(function(t){return this[t]},this._invalidated),i={};t<e;)(this._invalidated.all||0<l.grep(this._pipe[t].filter,n).length)&&this._pipe[t].run(i),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},c.prototype.width=function(t){switch(t=t||c.Width.Default){case c.Width.Inner:case c.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},c.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},c.prototype.onThrottledResize=function(){n.clearTimeout(this.resizeTimer),this.resizeTimer=n.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},c.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},c.prototype.registerEventHandlers=function(){l.support.transition&&this.$stage.on(l.support.transition.end+".owl.core",l.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(n,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",l.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",l.proxy(this.onDragEnd,this)))},c.prototype.onDragStart=function(t){var e=null;3!==t.which&&(l.support.transform?e={x:(e=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","))[16===e.length?12:4],y:e[16===e.length?13:5]}:(e=this.$stage.position(),e={x:this.settings.rtl?e.left+this.$stage.width()-this.width()+this.settings.margin:e.left,y:e.top}),this.is("animating")&&(l.support.transform?this.animate(e.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=l(t.target),this._drag.stage.start=e,this._drag.stage.current=e,this._drag.pointer=this.pointer(t),l(r).on("mouseup.owl.core touchend.owl.core",l.proxy(this.onDragEnd,this)),l(r).one("mousemove.owl.core touchmove.owl.core",l.proxy(function(t){var e=this.difference(this._drag.pointer,this.pointer(t));l(r).on("mousemove.owl.core touchmove.owl.core",l.proxy(this.onDragMove,this)),Math.abs(e.x)<Math.abs(e.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},c.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+i),n+i)),this._drag.stage.current=s,this.animate(s.x))},c.prototype.onDragEnd=function(t){var e=this.difference(this._drag.pointer,this.pointer(t)),n=this._drag.stage.current,i=0<e.x^this.settings.rtl?"left":"right";l(r).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==e.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(n.x,0!==e.x?i:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=i,(3<Math.abs(e.x)||300<(new Date).getTime()-this._drag.time)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},c.prototype.closest=function(n,i){var r=-1,s=this.width(),o=this.coordinates();return this.settings.freeDrag||l.each(o,l.proxy(function(t,e){return"left"===i&&e-30<n&&n<e+30?r=t:"right"===i&&e-s-30<n&&n<e-s+30?r=t+1:this.op(n,"<",e)&&this.op(n,">",o[t+1]!==a?o[t+1]:e-s)&&(r="left"===i?t+1:t),-1===r},this)),this.settings.loop||(this.op(n,">",o[this.minimum()])?r=n=this.minimum():this.op(n,"<",o[this.maximum()])&&(r=n=this.maximum())),r},c.prototype.animate=function(t){var e=0<this.speed();this.is("animating")&&this.onTransitionEnd(),e&&(this.enter("animating"),this.trigger("translate")),l.support.transform3d&&l.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):e?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,l.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},c.prototype.is=function(t){return this._states.current[t]&&0<this._states.current[t]},c.prototype.current=function(t){if(t===a)return this._current;if(0===this._items.length)return a;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==a&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},c.prototype.invalidate=function(t){return"string"===l.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),l.map(this._invalidated,function(t,e){return e})},c.prototype.reset=function(t){(t=this.normalize(t))!==a&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},c.prototype.normalize=function(t,e){var n=this._items.length,i=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=a:(t<0||n+i<=t)&&(t=((t-i/2)%n+n)%n+i/2),t},c.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},c.prototype.maximum=function(t){var e,n,i,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},c.prototype.minimum=function(t){return t?0:this._clones.length/2},c.prototype.items=function(t){return t===a?this._items.slice():(t=this.normalize(t,!0),this._items[t])},c.prototype.mergers=function(t){return t===a?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},c.prototype.clones=function(n){var e=this._clones.length/2,i=e+this._items.length,r=function(t){return t%2==0?i+t/2:e-(t+1)/2};return n===a?l.map(this._clones,function(t,e){return r(e)}):l.map(this._clones,function(t,e){return t===n?r(e):null})},c.prototype.speed=function(t){return t!==a&&(this._speed=t),this._speed},c.prototype.coordinates=function(t){var e,n=1,i=t-1;return t===a?l.map(this._coordinates,l.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(n=-1,i=t+1),e=this._coordinates[t],e+=(this.width()-e+(this._coordinates[i]||0))/2*n):e=this._coordinates[i]||0,e=Math.ceil(e))},c.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},c.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),s=(0<r)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),(i=(((t=n+r)-a)%o+o)%o+a)!==t&&i-r<=l&&0<i-r&&(n=i-r,t=i,this.reset(n))):this.settings.rewind?t=(t%(l+=1)+l)%l:t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},c.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},c.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},c.prototype.onTransitionEnd=function(t){if(t!==a&&(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)!==this.$stage.get(0)))return!1;this.leave("animating"),this.trigger("translated")},c.prototype.viewport=function(){var t;return this.options.responsiveBaseElement!==n?t=l(this.options.responsiveBaseElement).width():n.innerWidth?t=n.innerWidth:r.documentElement&&r.documentElement.clientWidth?t=r.documentElement.clientWidth:console.warn("Can not detect viewport width."),t},c.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:l(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(l.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},c.prototype.add=function(t,e){var n=this.relative(this._current);e=e===a?this._items.length:this.normalize(e,!0),t=t instanceof jQuery?t:l(t),this.trigger("add",{content:t,position:e}),t=this.prepare(t),0===this._items.length||e===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[e-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[e].before(t),this._items.splice(e,0,t),this._mergers.splice(e,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[n]&&this.reset(this._items[n].index()),this.invalidate("items"),this.trigger("added",{content:t,position:e})},c.prototype.remove=function(t){(t=this.normalize(t,!0))!==a&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},c.prototype.preloadAutoWidthImages=function(t){t.each(l.proxy(function(t,e){this.enter("pre-loading"),e=l(e),l(new Image).one("load",l.proxy(function(t){e.attr("src",t.target.src),e.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",e.attr("src")||e.attr("data-src")||e.attr("data-src-retina"))},this))},c.prototype.destroy=function(){for(var t in this.$element.off(".owl.core"),this.$stage.off(".owl.core"),l(r).off(".owl.core"),!1!==this.settings.responsive&&(n.clearTimeout(this.resizeTimer),this.off(n,"resize",this._handlers.onThrottledResize)),this._plugins)this._plugins[t].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},c.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?n<t:t<n;case">":return i?t<n:n<t;case">=":return i?t<=n:n<=t;case"<=":return i?n<=t:t<=n}},c.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},c.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},c.prototype.trigger=function(t,e,n,i,r){var s={item:{count:this._items.length,index:this.current()}},o=l.camelCase(l.grep(["on",t,n],function(t){return t}).join("-").toLowerCase()),a=l.Event([t,"owl",n||"carousel"].join(".").toLowerCase(),l.extend({relatedTarget:this},s,e));return this._supress[t]||(l.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(a)}),this.register({type:c.Type.Event,name:t}),this.$element.trigger(a),this.settings&&"function"==typeof this.settings[o]&&this.settings[o].call(this,a)),a},c.prototype.enter=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]===a&&(this._states.current[e]=0),this._states.current[e]++},this))},c.prototype.leave=function(t){l.each([t].concat(this._states.tags[t]||[]),l.proxy(function(t,e){this._states.current[e]--},this))},c.prototype.register=function(n){if(n.type===c.Type.Event){if(l.event.special[n.name]||(l.event.special[n.name]={}),!l.event.special[n.name].owl){var e=l.event.special[n.name]._default;l.event.special[n.name]._default=function(t){return!e||!e.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&-1<t.namespace.indexOf("owl"):e.apply(this,arguments)},l.event.special[n.name].owl=!0}}else n.type===c.Type.State&&(this._states.tags[n.name]?this._states.tags[n.name]=this._states.tags[n.name].concat(n.tags):this._states.tags[n.name]=n.tags,this._states.tags[n.name]=l.grep(this._states.tags[n.name],l.proxy(function(t,e){return l.inArray(t,this._states.tags[n.name])===e},this)))},c.prototype.suppress=function(t){l.each(t,l.proxy(function(t,e){this._supress[e]=!0},this))},c.prototype.release=function(t){l.each(t,l.proxy(function(t,e){delete this._supress[e]},this))},c.prototype.pointer=function(t){var e={x:null,y:null};return(t=(t=t.originalEvent||t||n.event).touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t).pageX?(e.x=t.pageX,e.y=t.pageY):(e.x=t.clientX,e.y=t.clientY),e},c.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},c.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},l.fn.owlCarousel=function(e){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var t=l(this),n=t.data("owl.carousel");n||(n=new c(this,"object"==typeof e&&e),t.data("owl.carousel",n),l.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,e){n.register({type:c.Type.Event,name:e}),n.$element.on(e+".owl.carousel.core",l.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([e]),n[e].apply(this,[].slice.call(arguments,1)),this.release([e]))},n))})),"string"==typeof e&&"_"!==e.charAt(0)&&n[e].apply(n,i)})},l.fn.owlCarousel.Constructor=c}(window.Zepto||window.jQuery,window,document),function(e,n,t,i){var r=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=n.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,e;for(t in n.clearInterval(this._interval),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(a,s,t,e){var n=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":a.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type)){var e=this._core.settings,n=e.center&&Math.ceil(e.items/2)||e.items,i=e.center&&-1*n||0,r=(t.property&&void 0!==t.property.value?t.property.value:this._core.current())+i,s=this._core.clones().length,o=a.proxy(function(t,e){this.load(e)},this);for(0<e.lazyLoadEager&&(n+=e.lazyLoadEager,e.loop&&(r-=e.lazyLoadEager,n++));i++<n;)this.load(s/2+this._core.relative(r)),s&&a.each(this._core.clones(this._core.relative(r)),o),r++}},this)},this._core.options=a.extend({},n.Defaults,this._core.options),this._core.$element.on(this._handlers)};n.Defaults={lazyLoad:!1,lazyLoadEager:0},n.prototype.load=function(t){var e=this._core.$stage.children().eq(t),n=e&&e.find(".owl-lazy");!n||-1<a.inArray(e.get(0),this._loaded)||(n.each(a.proxy(function(t,e){var n,i=a(e),r=1<s.devicePixelRatio&&i.attr("data-src-retina")||i.attr("data-src")||i.attr("data-srcset");this._core.trigger("load",{element:i,url:r},"lazy"),i.is("img")?i.one("load.owl.lazy",a.proxy(function(){i.css("opacity",1),this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("src",r):i.is("source")?i.one("load.owl.lazy",a.proxy(function(){this._core.trigger("loaded",{element:i,url:r},"lazy")},this)).attr("srcset",r):((n=new Image).onload=a.proxy(function(){i.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:i,url:r},"lazy")},this),n.src=r)},this)),this._loaded.push(e.get(0)))},n.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},a.fn.owlCarousel.Constructor.Plugins.Lazy=n}(window.Zepto||window.jQuery,window,document),function(o,n,t,e){var i=function(t){this._core=t,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":o.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=o.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var e=this;o(n).on("load",function(){e._core.settings.autoHeight&&e.update()}),o(n).resize(function(){e._core.settings.autoHeight&&(null!=e._intervalId&&clearTimeout(e._intervalId),e._intervalId=setTimeout(function(){e.update()},250))})};i.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},i.prototype.update=function(){var t=this._core._current,e=t+this._core.settings.items,n=this._core.settings.lazyLoad,i=this._core.$stage.children().toArray().slice(t,e),r=[],s=0;o.each(i,function(t,e){r.push(o(e).height())}),(s=Math.max.apply(null,r))<=1&&n&&this._previousHeight&&(s=this._previousHeight),this._previousHeight=s,this._core.$stage.parent().height(s).addClass(this._core.settings.autoHeightClass)},i.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},o.fn.owlCarousel.Constructor.Plugins.AutoHeight=i}(window.Zepto||window.jQuery,window,document),function(u,t,e,n){var i=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":u.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":u.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":u.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":u.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":u.proxy(function(t){if(t.namespace){var e=u(t.content).find(".owl-video");e.length&&(e.css("display","none"),this.fetch(e,u(t.content)))}},this)},this._core.options=u.extend({},i.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",u.proxy(function(t){this.play(t)},this))};i.Defaults={video:!1,videoHeight:!1,videoWidth:!1},i.prototype.fetch=function(t,e){var n=t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube",i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if(-1<(i=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/))[3].indexOf("youtu"))n="youtube";else if(-1<i[3].indexOf("vimeo"))n="vimeo";else{if(!(-1<i[3].indexOf("vzaar")))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[o]={type:n,id:i,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},i.prototype.thumbnail=function(e,t){var n,i,r=t.width&&t.height?"width:"+t.width+"px;height:"+t.height+"px;":"",s=e.find("img"),o="src",a="",l=this._core.settings,c=function(t){'<div class="owl-video-play-icon"></div>',n=l.lazyLoad?u("<div/>",{class:"owl-video-tn "+a,srcType:t}):u("<div/>",{class:"owl-video-tn",style:"opacity:1;background-image:url("+t+")"}),e.after(n),e.after('<div class="owl-video-play-icon"></div>')};if(e.wrap(u("<div/>",{class:"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(o="data-src",a="owl-lazy"),s.length)return c(s.attr(o)),s.remove(),!1;"youtube"===t.type?(i="//img.youtube.com/vi/"+t.id+"/hqdefault.jpg",c(i)):"vimeo"===t.type?u.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t[0].thumbnail_large,c(i)}}):"vzaar"===t.type&&u.ajax({type:"GET",url:"//vzaar.com/api/videos/"+t.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){i=t.framegrab_url,c(i)}})},i.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},i.prototype.play=function(t){var e,n=u(t.target).closest("."+this._core.settings.itemClass),i=this._videos[n.attr("data-video")],r=i.width||"100%",s=i.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),n=this._core.items(this._core.relative(n.index())),this._core.reset(n.index()),(e=u('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>')).attr("height",s),e.attr("width",r),"youtube"===i.type?e.attr("src","//www.youtube.com/embed/"+i.id+"?autoplay=1&rel=0&v="+i.id):"vimeo"===i.type?e.attr("src","//player.vimeo.com/video/"+i.id+"?autoplay=1"):"vzaar"===i.type&&e.attr("src","//view.vzaar.com/"+i.id+"/player?autoplay=true"),u(e).wrap('<div class="owl-video-frame" />').insertAfter(n.find(".owl-video")),this._playing=n.addClass("owl-video-playing"))},i.prototype.isInFullScreen=function(){var t=e.fullscreenElement||e.mozFullScreenElement||e.webkitFullscreenElement;return t&&u(t).parent().hasClass("owl-video-frame")},i.prototype.destroy=function(){var t,e;for(t in this._core.$element.off("click.owl.video"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},u.fn.owlCarousel.Constructor.Plugins.Video=i}(window.Zepto||window.jQuery,window,document),function(o,t,e,n){var i=function(t){this.core=t,this.core.options=o.extend({},i.Defaults,this.core.options),this.swapping=!0,this.previous=void 0,this.next=void 0,this.handlers={"change.owl.carousel":o.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":o.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":o.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};i.Defaults={animateOut:!1,animateIn:!1},i.prototype.swap=function(){if(1===this.core.settings.items&&o.support.animation&&o.support.transition){this.core.speed(0);var t,e=o.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),i=this.core.$stage.children().eq(this.next),r=this.core.settings.animateIn,s=this.core.settings.animateOut;this.core.current()!==this.previous&&(s&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(o.support.animation.end,e).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(s)),r&&i.one(o.support.animation.end,e).addClass("animated owl-animated-in").addClass(r))}},i.prototype.clear=function(t){o(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},i.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},o.fn.owlCarousel.Constructor.Plugins.Animate=i}(window.Zepto||window.jQuery,window,document),function(i,r,e,t){var n=function(t){this._core=t,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":i.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":i.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":i.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":i.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":i.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=i.extend({},n.Defaults,this._core.options)};n.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},n.prototype._next=function(t){this._call=r.setTimeout(i.proxy(this._next,this,t),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||e.hidden||this._core.next(t||this._core.settings.autoplaySpeed)},n.prototype.read=function(){return(new Date).getTime()-this._time},n.prototype.play=function(t,e){var n;this._core.is("rotating")||this._core.enter("rotating"),t=t||this._core.settings.autoplayTimeout,n=Math.min(this._time%(this._timeout||t),t),this._paused?(this._time=this.read(),this._paused=!1):r.clearTimeout(this._call),this._time+=this.read()%t-n,this._timeout=t,this._call=r.setTimeout(i.proxy(this._next,this,e),t-n)},n.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,r.clearTimeout(this._call),this._core.leave("rotating"))},n.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,r.clearTimeout(this._call))},n.prototype.destroy=function(){var t,e;for(t in this.stop(),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.autoplay=n}(window.Zepto||window.jQuery,window,document),function(s,t,e,n){"use strict";var i=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+s(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":s.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":s.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":s.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":s.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=s.extend({},i.Defaults,this._core.options),this.$element.on(this._handlers)};i.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},i.prototype.initialize=function(){var t,n=this._core.settings;for(t in this._controls.$relative=(n.navContainer?s(n.navContainer):s("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=s("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",s.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=s("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",s.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[s('<button role="button">').addClass(n.dotClass).append(s("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?s(n.dotsContainer):s("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",s.proxy(function(t){var e=s(t.target).parent().is(this._controls.$absolute)?s(t.target).index():s(t.target).parent().index();t.preventDefault(),this.to(e,n.dotsSpeed)},this)),this._overrides)this._core[t]=s.proxy(this[t],this)},i.prototype.destroy=function(){var t,e,n,i,r;for(t in r=this._core.settings,this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},i.prototype.update=function(){var t,e,n=this._core.clones().length/2,i=n+this._core.items().length,r=this._core.maximum(!0),s=this._core.settings,o=s.center||s.autoWidth||s.dotsData?1:s.dotsEach||s.items;if("page"!==s.slideBy&&(s.slideBy=Math.min(s.slideBy,s.items)),s.dots||"page"==s.slideBy)for(this._pages=[],t=n,e=0;t<i;t++){if(o<=e||0===e){if(this._pages.push({start:Math.min(r,t-n),end:t-n+o-1}),Math.min(r,t-n)===r)break;e=0,0}e+=this._core.mergers(this._core.relative(t))}},i.prototype.draw=function(){var t,e=this._core.settings,n=this._core.items().length<=e.items,i=this._core.relative(this._core.current()),r=e.loop||e.rewind;this._controls.$relative.toggleClass("disabled",!e.nav||n),e.nav&&(this._controls.$previous.toggleClass("disabled",!r&&i<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!r&&i>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!e.dots||n),e.dots&&(t=this._pages.length-this._controls.$absolute.children().length,e.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):0<t?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):t<0&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(s.inArray(this.current(),this._pages)).addClass("active"))},i.prototype.onTrigger=function(t){var e=this._core.settings;t.page={index:s.inArray(this.current(),this._pages),count:this._pages.length,size:e&&(e.center||e.autoWidth||e.dotsData?1:e.dotsEach||e.items)}},i.prototype.current=function(){var n=this._core.relative(this._core.current());return s.grep(this._pages,s.proxy(function(t,e){return t.start<=n&&t.end>=n},this)).pop()},i.prototype.getPosition=function(t){var e,n,i=this._core.settings;return"page"==i.slideBy?(e=s.inArray(this.current(),this._pages),n=this._pages.length,t?++e:--e,e=this._pages[(e%n+n)%n].start):(e=this._core.relative(this._core.current()),n=this._core.items().length,t?e+=i.slideBy:e-=i.slideBy),e},i.prototype.next=function(t){s.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},i.prototype.prev=function(t){s.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},i.prototype.to=function(t,e,n){var i;!n&&this._pages.length?(i=this._pages.length,s.proxy(this._overrides.to,this._core)(this._pages[(t%i+i)%i].start,e)):s.proxy(this._overrides.to,this._core)(t,e)},s.fn.owlCarousel.Constructor.Plugins.Navigation=i}(window.Zepto||window.jQuery,window,document),function(i,r,t,e){"use strict";var n=function(t){this._core=t,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":i.proxy(function(t){t.namespace&&"URLHash"===this._core.settings.startPosition&&i(r).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":i.proxy(function(t){if(t.namespace){var e=i(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!e)return;this._hashes[e]=t.content}},this),"changed.owl.carousel":i.proxy(function(t){if(t.namespace&&"position"===t.property.name){var n=this._core.items(this._core.relative(this._core.current())),e=i.map(this._hashes,function(t,e){return t===n?e:null}).join();if(!e||r.location.hash.slice(1)===e)return;r.location.hash=e}},this)},this._core.options=i.extend({},n.Defaults,this._core.options),this.$element.on(this._handlers),i(r).on("hashchange.owl.navigation",i.proxy(function(t){var e=r.location.hash.substring(1),n=this._core.$stage.children(),i=this._hashes[e]&&n.index(this._hashes[e]);void 0!==i&&i!==this._core.current()&&this._core.to(this._core.relative(i),!1,!0)},this))};n.Defaults={URLhashListener:!1},n.prototype.destroy=function(){var t,e;for(t in i(r).off("hashchange.owl.navigation"),this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},i.fn.owlCarousel.Constructor.Plugins.Hash=n}(window.Zepto||window.jQuery,window,document),function(r,t,e,s){function n(t,n){var i=!1,e=t.charAt(0).toUpperCase()+t.slice(1);return r.each((t+" "+a.join(e+" ")+e).split(" "),function(t,e){if(o[e]!==s)return i=!n||e,!1}),i}function i(t){return n(t,!0)}var o=r("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},c=function(){return!!n("transform")},u=function(){return!!n("perspective")},h=function(){return!!n("animation")};(function(){return!!n("transition")})()&&(r.support.transition=new String(i("transition")),r.support.transition.end=l.transition.end[r.support.transition]),h()&&(r.support.animation=new String(i("animation")),r.support.animation.end=l.animation.end[r.support.animation]),c()&&(r.support.transform=new String(i("transform")),r.support.transform3d=u())}(window.Zepto||window.jQuery,window,document),$(document).ready(function(){$(".portfolio-carousel").owlCarousel({loop:!0,margin:10,merge:!0,nav:!0,dots:!1,autoplayTimeout:3e3,smartSpeed:700,responsive:{0:{items:3},768:{items:5},1400:{items:6}}}),$(".review-carousel").owlCarousel({loop:!0,margin:30,merge:!0,nav:!0,dots:!1,autoplayTimeout:3e3,smartSpeed:700,responsive:{0:{items:5},768:{items:5},1400:{items:6}}}),$(document).on("click",".video__poster",function(t){t.preventDefault();var e,n,i,r=$(this).closest(".video__wrapper");n=(e=r).find(".video__iframe"),i=n.data("src"),e.closest(".team").addClass("team__active"),n.attr("src",i)})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkb2N1bWVudCIsInciLCJFcnJvciIsIndpbmRvdyIsInRoaXMiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiT2JqZWN0IiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImNvbmNhdCIsInB1c2giLCJpbmRleE9mIiwiY2xhc3MydHlwZSIsInRvU3RyaW5nIiwiaGFzT3duIiwiaGFzT3duUHJvcGVydHkiLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJjYWxsIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub01vZHVsZSIsIkRPTUV2YWwiLCJjb2RlIiwiZG9jIiwibm9kZSIsImkiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsInZlcnNpb24iLCJqUXVlcnkiLCJzZWxlY3RvciIsImNvbnRleHQiLCJmbiIsImluaXQiLCJydHJpbSIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwicHJvdG90eXBlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJmaXJzdCIsImVxIiwibGFzdCIsImxlbiIsImoiLCJlbmQiLCJzb3J0Iiwic3BsaWNlIiwiZXh0ZW5kIiwib3B0aW9ucyIsIm5hbWUiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJjbG9uZSIsInRhcmdldCIsImRlZXAiLCJpc1BsYWluT2JqZWN0IiwiQXJyYXkiLCJpc0FycmF5IiwidW5kZWZpbmVkIiwiZXhwYW5kbyIsIk1hdGgiLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwidHJpbSIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiZ3JlcCIsImludmVydCIsIm1hdGNoZXMiLCJjYWxsYmFja0V4cGVjdCIsImFyZyIsInZhbHVlIiwiZ3VpZCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsIlNpenpsZSIsIkV4cHIiLCJnZXRUZXh0IiwiaXNYTUwiLCJ0b2tlbml6ZSIsImNvbXBpbGUiLCJzZWxlY3QiLCJvdXRlcm1vc3RDb250ZXh0Iiwic29ydElucHV0IiwiaGFzRHVwbGljYXRlIiwic2V0RG9jdW1lbnQiLCJkb2NFbGVtIiwiZG9jdW1lbnRJc0hUTUwiLCJyYnVnZ3lRU0EiLCJyYnVnZ3lNYXRjaGVzIiwiY29udGFpbnMiLCJEYXRlIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsImF0dHJpYnV0ZXMiLCJwc2V1ZG9zIiwicndoaXRlc3BhY2UiLCJSZWdFeHAiLCJyY29tbWEiLCJyY29tYmluYXRvcnMiLCJyYXR0cmlidXRlUXVvdGVzIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwiSUQiLCJDTEFTUyIsIlRBRyIsIkFUVFIiLCJQU0VVRE8iLCJDSElMRCIsImJvb2wiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwiZSIsImVscyIsInNlZWQiLCJtIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0Iiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJ0b1NlbGVjdG9yIiwiam9pbiIsInRlc3RDb250ZXh0IiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwia2V5IiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbm5lckhUTUwiLCJpbnB1dCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCI+IiwiICIsIisiLCJ+IiwicHJlRmlsdGVyIiwiZXhjZXNzIiwidW5xdW90ZWQiLCJub2RlTmFtZVNlbGVjdG9yIiwicGF0dGVybiIsIm9wZXJhdG9yIiwiY2hlY2siLCJyZXN1bHQiLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm5vdCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJoYXMiLCJpbm5lclRleHQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJyb290IiwiZm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImVtcHR5IiwiaGVhZGVyIiwiYnV0dG9uIiwiZXZlbiIsIm9kZCIsImx0IiwiZ3QiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsIndpbm5vdyIsInF1YWxpZmllciIsInNlbGYiLCJyb290alF1ZXJ5IiwicGFyc2VIVE1MIiwicmVhZHkiLCJycGFyZW50c3ByZXYiLCJndWFyYW50ZWVkVW5pcXVlIiwiY2hpbGRyZW4iLCJjb250ZW50cyIsInByZXYiLCJzaWJsaW5nIiwidGFyZ2V0cyIsImwiLCJjbG9zZXN0IiwiaW5kZXgiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiQ2FsbGJhY2tzIiwib2JqZWN0IiwiZmxhZyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwic3RhdGUiLCJhbHdheXMiLCJkZWZlcnJlZCIsImNhdGNoIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiYWxsIiwibGV0dGVyIiwidG9VcHBlckNhc2UiLCJjYW1lbENhc2UiLCJzdHJpbmciLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwidWlkIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJzZXQiLCJkYXRhIiwicHJvcCIsImhhc0RhdGEiLCJkYXRhUHJpdiIsImRhdGFVc2VyIiwicmJyYWNlIiwicm11bHRpRGFzaCIsImRhdGFBdHRyIiwiSlNPTiIsInBhcnNlIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsInNob3dIaWRlIiwic2hvdyIsInZhbHVlcyIsImJvZHkiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0IiwiZ2V0QWxsIiwic2V0R2xvYmFsRXZhbCIsInJlZkVsZW1lbnRzIiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJkaXYiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsInRyaWdnZXIiLCJibHVyIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhciIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInBkYXRhT2xkIiwicGRhdGFDdXIiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiaGFzU2NyaXB0cyIsImlOb0Nsb25lIiwidmFsdWVJc0Z1bmN0aW9uIiwiaHRtbCIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsInByZXBlbmQiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmUiLCJhZnRlciIsInJlcGxhY2VXaXRoIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsInN0eWxlcyIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInAiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwib3B0IiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJzdG9wcGVkIiwicHJlZmlsdGVycyIsImN1cnJlbnRUaW1lIiwic3RhcnRUaW1lIiwidHdlZW5zIiwib3B0cyIsInNwZWNpYWxFYXNpbmciLCJvcmlnaW5hbFByb3BlcnRpZXMiLCJvcmlnaW5hbE9wdGlvbnMiLCJnb3RvRW5kIiwicHJvcEZpbHRlciIsImJpbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwiYW5pbSIsIioiLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsInBhcnNlSW50IiwiZm9yIiwiY2xhc3MiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwibm9uY2UiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJzIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCIqIHRleHQiLCJ0ZXh0IGh0bWwiLCJ0ZXh0IGpzb24iLCJ0ZXh0IHhtbCIsImFqYXhTZXR1cCIsInNldHRpbmdzIiwiYWpheFByZWZpbHRlciIsImFqYXhUcmFuc3BvcnQiLCJhamF4IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJvcGVuIiwidXNlcm5hbWUiLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmVycm9yIiwib25hYm9ydCIsIm9udGltZW91dCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlc3BvbnNlVHlwZSIsInJlc3BvbnNlVGV4dCIsImJpbmFyeSIsInRleHQgc2NyaXB0IiwiY2hhcnNldCIsInNjcmlwdENoYXJzZXQiLCJldnQiLCJvbGRDYWxsYmFja3MiLCJyanNvbnAiLCJqc29ucCIsImpzb25wQ2FsbGJhY2siLCJvcmlnaW5hbFNldHRpbmdzIiwiY2FsbGJhY2tOYW1lIiwib3ZlcndyaXR0ZW4iLCJyZXNwb25zZUNvbnRhaW5lciIsImpzb25Qcm9wIiwiY3JlYXRlSFRNTERvY3VtZW50IiwiaW1wbGVtZW50YXRpb24iLCJrZWVwU2NyaXB0cyIsInBhcnNlZCIsInBhcmFtcyIsImFuaW1hdGVkIiwib2Zmc2V0Iiwic2V0T2Zmc2V0IiwiY3VyUG9zaXRpb24iLCJjdXJMZWZ0IiwiY3VyQ1NTVG9wIiwiY3VyVG9wIiwiY3VyT2Zmc2V0IiwiY3VyQ1NTTGVmdCIsImN1ckVsZW0iLCJ1c2luZyIsInJlY3QiLCJ3aW4iLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0Iiwib2Zmc2V0UGFyZW50IiwicGFyZW50T2Zmc2V0Iiwic2Nyb2xsVG8iLCJIZWlnaHQiLCJXaWR0aCIsIiIsImRlZmF1bHRFeHRyYSIsImZ1bmNOYW1lIiwiaG92ZXIiLCJmbk92ZXIiLCJmbk91dCIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsInByb3h5IiwiaG9sZFJlYWR5IiwiaG9sZCIsInBhcnNlSlNPTiIsImlzTnVtZXJpYyIsImlzTmFOIiwiZGVmaW5lIiwiYW1kIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJyZXF1aXJlIiwiYm9vdHN0cmFwIiwiUG9wcGVyIiwiX2RlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfb2JqZWN0U3ByZWFkIiwib3duS2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCIkJCQxIiwiTkFNRSIsIkRBVEFfS0VZIiwiRVZFTlRfS0VZIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQ2xhc3NOYW1lIiwiQWxlcnQiLCJEQVRBX0FQSV9LRVkiLCJTZWxlY3RvciIsIkJ1dHRvbiIsIkRlZmF1bHQiLCJEZWZhdWx0VHlwZSIsIkRpcmVjdGlvbiIsIkNhcm91c2VsIiwiRGltZW5zaW9uIiwiQ29sbGFwc2UiLCJSRUdFWFBfS0VZRE9XTiIsIkF0dGFjaG1lbnRNYXAiLCJEcm9wZG93biIsIk1vZGFsIiwiQ0xBU1NfUFJFRklYIiwiQlNDTFNfUFJFRklYX1JFR0VYIiwiSG92ZXJTdGF0ZSIsIlRyaWdnZXIiLCJUb29sdGlwIiwiUG9wb3ZlciIsIk9mZnNldE1ldGhvZCIsIlNjcm9sbFNweSIsIlRhYiIsIlV0aWwiLCJUUkFOU0lUSU9OX0VORCIsInRyYW5zaXRpb25FbmRFbXVsYXRvciIsIl90aGlzIiwiY2FsbGVkIiwidHJpZ2dlclRyYW5zaXRpb25FbmQiLCJnZXRVSUQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiZWxlbWVudCIsImdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwicmVmbG93Iiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwiQm9vbGVhbiIsImlzRWxlbWVudCIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsInByb3BlcnR5IiwiZXhwZWN0ZWRUeXBlcyIsInZhbHVlVHlwZSIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiQ0xPU0UiLCJDTE9TRUQiLCJDTElDS19EQVRBX0FQSSIsIl9lbGVtZW50IiwiX3Byb3RvIiwiY2xvc2UiLCJyb290RWxlbWVudCIsIl9nZXRSb290RWxlbWVudCIsIl90cmlnZ2VyQ2xvc2VFdmVudCIsIl9yZW1vdmVFbGVtZW50IiwiZGlzcG9zZSIsImNsb3NlRXZlbnQiLCJfZGVzdHJveUVsZW1lbnQiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiJGVsZW1lbnQiLCJfaGFuZGxlRGlzbWlzcyIsImFsZXJ0SW5zdGFuY2UiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidHJpZ2dlckNoYW5nZUV2ZW50IiwiYWRkQXJpYVByZXNzZWQiLCJoYXNBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSEVORCIsIkxPQURfREFUQV9BUEkiLCJfaXRlbXMiLCJfaW50ZXJ2YWwiLCJfYWN0aXZlRWxlbWVudCIsIl9pc1BhdXNlZCIsIl9pc1NsaWRpbmciLCJ0b3VjaFRpbWVvdXQiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl9hZGRFdmVudExpc3RlbmVycyIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYWN0aXZlSW5kZXgiLCJfZ2V0SXRlbUluZGV4IiwiZGlyZWN0aW9uIiwiX3RoaXMyIiwiX2tleWRvd24iLCJ0YWdOYW1lIiwiX2dldEl0ZW1CeURpcmVjdGlvbiIsImlzTmV4dERpcmVjdGlvbiIsImlzUHJldkRpcmVjdGlvbiIsImxhc3RJdGVtSW5kZXgiLCJpdGVtSW5kZXgiLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJldmVudERpcmVjdGlvbk5hbWUiLCJ0YXJnZXRJbmRleCIsImZyb21JbmRleCIsInNsaWRlRXZlbnQiLCJmcm9tIiwiX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQiLCJuZXh0SW5kaWNhdG9yIiwiZGlyZWN0aW9uYWxDbGFzc05hbWUiLCJvcmRlckNsYXNzTmFtZSIsIl90aGlzMyIsImFjdGl2ZUVsZW1lbnRJbmRleCIsIm5leHRFbGVtZW50IiwibmV4dEVsZW1lbnRJbmRleCIsImlzQ3ljbGluZyIsInNsaWRFdmVudCIsImFjdGlvbiIsIl9kYXRhQXBpQ2xpY2tIYW5kbGVyIiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsIlNIT1ciLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRhYlRvZ2dsZXMiLCJfc2VsZWN0b3IiLCJfcGFyZW50IiwiX2dldFBhcmVudCIsIl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MiLCJhY3RpdmVzIiwiYWN0aXZlc0RhdGEiLCJzdGFydEV2ZW50IiwiX2dldERpbWVuc2lvbiIsInNldFRyYW5zaXRpb25pbmciLCJzY3JvbGxTaXplIiwiaXNUcmFuc2l0aW9uaW5nIiwiX2dldFRhcmdldEZyb21FbGVtZW50IiwidHJpZ2dlckFycmF5IiwiaXNPcGVuIiwiJHRoaXMiLCIkdHJpZ2dlciIsIiR0YXJnZXQiLCJBUlJPV19VUF9LRVlDT0RFIiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJmbGlwIiwiYm91bmRhcnkiLCJyZWZlcmVuY2UiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwiaXNBY3RpdmUiLCJfY2xlYXJNZW51cyIsInNob3dFdmVudCIsInJlZmVyZW5jZUVsZW1lbnQiLCJfZ2V0UG9wcGVyQ29uZmlnIiwiZGVzdHJveSIsInVwZGF0ZSIsInNjaGVkdWxlVXBkYXRlIiwiX2dldFBsYWNlbWVudCIsIiRwYXJlbnREcm9wZG93biIsInBsYWNlbWVudCIsIm9mZnNldENvbmYiLCJvZmZzZXRzIiwicG9wcGVyQ29uZmlnIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwidG9nZ2xlcyIsImRyb3Bkb3duTWVudSIsImhpZGVFdmVudCIsIl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIiLCJpdGVtcyIsImJhY2tkcm9wIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJfc2V0RXNjYXBlRXZlbnQiLCJfc2V0UmVzaXplRXZlbnQiLCJfc2hvd0JhY2tkcm9wIiwiX3Nob3dFbGVtZW50IiwidHJhbnNpdGlvbiIsIl9oaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiX2VuZm9yY2VGb2N1cyIsInNob3duRXZlbnQiLCJ0cmFuc2l0aW9uQ29tcGxldGUiLCJfdGhpczQiLCJfdGhpczUiLCJfdGhpczYiLCJfdGhpczciLCJfcmVzZXRBZGp1c3RtZW50cyIsIl9yZXNldFNjcm9sbGJhciIsIl9yZW1vdmVCYWNrZHJvcCIsIl90aGlzOCIsImJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uIiwiY2FsbGJhY2tSZW1vdmUiLCJfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJpc01vZGFsT3ZlcmZsb3dpbmciLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImlubmVyV2lkdGgiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJfdGhpczkiLCJhY3R1YWxQYWRkaW5nIiwiY2FsY3VsYXRlZFBhZGRpbmciLCJhY3R1YWxNYXJnaW4iLCJtYXJnaW5SaWdodCIsImNhbGN1bGF0ZWRNYXJnaW4iLCJzY3JvbGxEaXYiLCJzY3JvbGxiYXJXaWR0aCIsImNsaWVudFdpZHRoIiwiX3RoaXMxMCIsInRlbXBsYXRlIiwidGl0bGUiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJJTlNFUlRFRCIsIkZPQ1VTT1VUIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGF0YUtleSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsIl9pc1dpdGhBY3RpdmVUcmlnZ2VyIiwiX2VudGVyIiwiX2xlYXZlIiwiZ2V0VGlwRWxlbWVudCIsImlzV2l0aENvbnRlbnQiLCJpc0luVGhlRG9tIiwidGlwSWQiLCJzZXRDb250ZW50IiwiYXR0YWNobWVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiYmVoYXZpb3IiLCJhcnJvdyIsIm9uQ3JlYXRlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwib25VcGRhdGUiLCJfZml4VHJhbnNpdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsIiR0aXAiLCJzZXRFbGVtZW50Q29udGVudCIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsInRhYkNsYXNzIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIl9Ub29sdGlwIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiX19wcm90b19fIiwiX2dldENvbnRlbnQiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiaXRlbSIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIm1heFNjcm9sbCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsInF1ZXJpZXMiLCIkbGluayIsInNjcm9sbFNweXMiLCIkc3B5IiwicHJldmlvdXMiLCJsaXN0RWxlbWVudCIsIml0ZW1TZWxlY3RvciIsImhpZGRlbkV2ZW50IiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImRyb3Bkb3duQ2hpbGQiLCJkcm9wZG93bkVsZW1lbnQiLCJTY3JvbGxzcHkiLCJjIiwiZCIsIkRlZmF1bHRzIiwiX2hhbmRsZXJzIiwiX3BsdWdpbnMiLCJfc3VwcmVzcyIsIl9jdXJyZW50IiwiX3NwZWVkIiwiX2Nvb3JkaW5hdGVzIiwiX2JyZWFrcG9pbnQiLCJfd2lkdGgiLCJfY2xvbmVzIiwiX21lcmdlcnMiLCJfd2lkdGhzIiwiX2ludmFsaWRhdGVkIiwiX3BpcGUiLCJfZHJhZyIsInBvaW50ZXIiLCJzdGFnZSIsIl9zdGF0ZXMiLCJ0YWdzIiwiaW5pdGlhbGl6aW5nIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJQbHVnaW5zIiwiY2hhckF0IiwiV29ya2VycyIsImluaXRpYWxpemUiLCJsb29wIiwiY2VudGVyIiwicmV3aW5kIiwiY2hlY2tWaXNpYmlsaXR5IiwibW91c2VEcmFnIiwidG91Y2hEcmFnIiwicHVsbERyYWciLCJmcmVlRHJhZyIsInN0YWdlUGFkZGluZyIsIm1lcmdlRml0IiwiYXV0b1dpZHRoIiwic3RhcnRQb3NpdGlvbiIsInJ0bCIsInNtYXJ0U3BlZWQiLCJmbHVpZFNwZWVkIiwiZHJhZ0VuZFNwZWVkIiwicmVzcG9uc2l2ZSIsInJlc3BvbnNpdmVSZWZyZXNoUmF0ZSIsInJlc3BvbnNpdmVCYXNlRWxlbWVudCIsImZhbGxiYWNrRWFzaW5nIiwic2xpZGVUcmFuc2l0aW9uIiwiaW5mbyIsIm5lc3RlZEl0ZW1TZWxlY3RvciIsIml0ZW1FbGVtZW50Iiwic3RhZ2VFbGVtZW50IiwicmVmcmVzaENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJydGxDbGFzcyIsInJlc3BvbnNpdmVDbGFzcyIsImRyYWdDbGFzcyIsIml0ZW1DbGFzcyIsInN0YWdlQ2xhc3MiLCJzdGFnZU91dGVyQ2xhc3MiLCJncmFiQ2xhc3MiLCJJbm5lciIsIk91dGVyIiwiVHlwZSIsIlN0YXRlIiwiJHN0YWdlIiwibWFyZ2luLWxlZnQiLCJtYXJnaW4tcmlnaHQiLCJ0b0ZpeGVkIiwiZiIsIm1pbiIsImciLCJoIiwibm9ybWFsaXplIiwib3V0ZXJIVE1MIiwiYWJzIiwicGFkZGluZy1sZWZ0IiwicGFkZGluZy1yaWdodCIsIm1pbmltdW0iLCJtYXhpbXVtIiwiY29vcmRpbmF0ZXMiLCJvcCIsImluaXRpYWxpemVTdGFnZSIsImluaXRpYWxpemVJdGVtcyIsImlzVmlzaWJsZSIsImludmFsaWRhdGUiLCJlbnRlciIsInByZWxvYWRBdXRvV2lkdGhJbWFnZXMiLCJyZWdpc3RlckV2ZW50SGFuZGxlcnMiLCJsZWF2ZSIsInZpZXdwb3J0IiwiTnVtYmVyIiwib3B0aW9uc0xvZ2ljIiwicHJlcGFyZSIsIm9uVGhyb3R0bGVkUmVzaXplIiwicmVzaXplVGltZXIiLCJvblJlc2l6ZSIsIm9uVHJhbnNpdGlvbkVuZCIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnRW5kIiwidHJhbnNmb3JtIiwieCIsInkiLCJnZXRUaW1lIiwiZGlmZmVyZW5jZSIsIm9uRHJhZ01vdmUiLCJ0cmFuc2Zvcm0zZCIsInN1cHByZXNzIiwicmVsZWFzZSIsIm1lcmdlcnMiLCJjbG9uZXMiLCJzcmNFbGVtZW50Iiwib3JpZ2luYWxUYXJnZXQiLCJJbWFnZSIsImRldGFjaEV2ZW50Iiwib25UcmlnZ2VyIiwicmVnaXN0ZXIiLCJvd2wiLCJvd2xDYXJvdXNlbCIsIlplcHRvIiwiX2NvcmUiLCJfdmlzaWJsZSIsImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCIsImF1dG9SZWZyZXNoIiwid2F0Y2giLCJhdXRvUmVmcmVzaEludGVydmFsIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkF1dG9SZWZyZXNoIiwiX2xvYWRlZCIsImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsIiwibGF6eUxvYWQiLCJsYXp5TG9hZEVhZ2VyIiwiZGV2aWNlUGl4ZWxSYXRpbyIsImJhY2tncm91bmQtaW1hZ2UiLCJMYXp5IiwiX3ByZXZpb3VzSGVpZ2h0IiwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsIHJlZnJlc2hlZC5vd2wuY2Fyb3VzZWwiLCJhdXRvSGVpZ2h0IiwiY2hhbmdlZC5vd2wuY2Fyb3VzZWwiLCJsb2FkZWQub3dsLmxhenkiLCJfaW50ZXJ2YWxJZCIsInJlc2l6ZSIsImF1dG9IZWlnaHRDbGFzcyIsIkF1dG9IZWlnaHQiLCJfdmlkZW9zIiwiX3BsYXlpbmciLCJyZXNpemUub3dsLmNhcm91c2VsIiwidmlkZW8iLCJpc0luRnVsbFNjcmVlbiIsInJlZnJlc2hlZC5vd2wuY2Fyb3VzZWwiLCJwcmVwYXJlZC5vd2wuY2Fyb3VzZWwiLCJmZXRjaCIsInBsYXkiLCJ2aWRlb0hlaWdodCIsInZpZGVvV2lkdGgiLCJ0aHVtYm5haWwiLCJrIiwic3JjVHlwZSIsInRodW1ibmFpbF9sYXJnZSIsImZyYW1lZ3JhYl91cmwiLCJmdWxsc2NyZWVuRWxlbWVudCIsIm1vekZ1bGxTY3JlZW5FbGVtZW50Iiwid2Via2l0RnVsbHNjcmVlbkVsZW1lbnQiLCJWaWRlbyIsImNvcmUiLCJzd2FwcGluZyIsImNoYW5nZS5vd2wuY2Fyb3VzZWwiLCJkcmFnLm93bC5jYXJvdXNlbCBkcmFnZ2VkLm93bC5jYXJvdXNlbCB0cmFuc2xhdGVkLm93bC5jYXJvdXNlbCIsInRyYW5zbGF0ZS5vd2wuY2Fyb3VzZWwiLCJhbmltYXRlT3V0IiwiYW5pbWF0ZUluIiwiY2xlYXIiLCJBbmltYXRlIiwiX2NhbGwiLCJfdGltZSIsIl9wYXVzZWQiLCJhdXRvcGxheSIsInBsYXkub3dsLmF1dG9wbGF5Iiwic3RvcC5vd2wuYXV0b3BsYXkiLCJtb3VzZW92ZXIub3dsLmF1dG9wbGF5IiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwibW91c2VsZWF2ZS5vd2wuYXV0b3BsYXkiLCJ0b3VjaHN0YXJ0Lm93bC5jb3JlIiwidG91Y2hlbmQub3dsLmNvcmUiLCJhdXRvcGxheVRpbWVvdXQiLCJhdXRvcGxheVNwZWVkIiwiX25leHQiLCJyZWFkIiwiX2luaXRpYWxpemVkIiwiX3BhZ2VzIiwiX2NvbnRyb2xzIiwiX3RlbXBsYXRlcyIsIl9vdmVycmlkZXMiLCJkb3RzRGF0YSIsImRvdENsYXNzIiwiYWRkZWQub3dsLmNhcm91c2VsIiwicmVtb3ZlLm93bC5jYXJvdXNlbCIsImRyYXciLCJuYXYiLCJuYXZUZXh0IiwibmF2U3BlZWQiLCJuYXZFbGVtZW50IiwibmF2Q29udGFpbmVyIiwibmF2Q29udGFpbmVyQ2xhc3MiLCJuYXZDbGFzcyIsInNsaWRlQnkiLCJkb3RzQ2xhc3MiLCJkb3RzIiwiZG90c0VhY2giLCJkb3RzU3BlZWQiLCJkb3RzQ29udGFpbmVyIiwiJHJlbGF0aXZlIiwiJHByZXZpb3VzIiwiJG5leHQiLCIkYWJzb2x1dGUiLCJvdmVyaWRlcyIsInBhZ2UiLCJzaXplIiwiZ2V0UG9zaXRpb24iLCJOYXZpZ2F0aW9uIiwiX2hhc2hlcyIsInN1YnN0cmluZyIsIlVSTGhhc2hMaXN0ZW5lciIsIkhhc2giLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwiV2Via2l0QW5pbWF0aW9uIiwiTW96QW5pbWF0aW9uIiwiT0FuaW1hdGlvbiIsIjc2OCIsIjE0MDAiLCJ3cmFwcGVyIiwiaWZyYW1lIl0sIm1hcHBpbmdzIjoiQ0FhQSxTQUFZQSxFQUFRQyxHQUVuQixhQUV1QixpQkFBWEMsUUFBaUQsaUJBQW5CQSxPQUFPQyxRQVNoREQsT0FBT0MsUUFBVUgsRUFBT0ksU0FDdkJILEVBQVNELEdBQVEsR0FDakIsU0FBVUssR0FDVCxJQUFNQSxFQUFFRCxTQUNQLE1BQU0sSUFBSUUsTUFBTyw0Q0FFbEIsT0FBT0wsRUFBU0ksSUFHbEJKLEVBQVNELEdBdEJYLENBMEJ1QixvQkFBWE8sT0FBeUJBLE9BQVNDLEtBQU0sU0FBVUQsRUFBUUUsR0FNdEUsYUFFQSxJQUFJQyxFQUFNLEdBRU5OLEVBQVdHLEVBQU9ILFNBRWxCTyxFQUFXQyxPQUFPQyxlQUVsQkMsRUFBUUosRUFBSUksTUFFWkMsRUFBU0wsRUFBSUssT0FFYkMsRUFBT04sRUFBSU0sS0FFWEMsRUFBVVAsRUFBSU8sUUFFZEMsRUFBYSxHQUViQyxFQUFXRCxFQUFXQyxTQUV0QkMsRUFBU0YsRUFBV0csZUFFcEJDLEVBQWFGLEVBQU9ELFNBRXBCSSxFQUF1QkQsRUFBV0UsS0FBTVosUUFFeENhLEVBQVUsR0FFVkMsRUFBYSxTQUFxQkMsR0FNaEMsTUFBc0IsbUJBQVJBLEdBQThDLGlCQUFqQkEsRUFBSUMsVUFJakRDLEVBQVcsU0FBbUJGLEdBQ2hDLE9BQWMsTUFBUEEsR0FBZUEsSUFBUUEsRUFBSXBCLFFBTS9CdUIsRUFBNEIsQ0FDL0JDLE1BQU0sRUFDTkMsS0FBSyxFQUNMQyxVQUFVLEdBR1gsU0FB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QzVGLE1BQU0sRUFDTjVzQixPQUFRLEdBQ1I5eEIsT0FBTyxFQUVQc3BELEtBQUssRUFDTFMsTUFBTSxFQUNOdkIsZ0JBQWlCLElBQ2pCakosV0FBWSxJQUNaRyxXQUFXLENBQ1B0ZCxFQUFFLENBQ0V3UixNQUFPLEdBRVgwWCxJQUFJLENBQ0ExWCxNQUFPLEdBRVgyWCxLQUFLLENBQ0QzWCxNQUFPLE1BS25CL00sRUFBRSxvQkFBb0J5ZCxZQUFZLENBQzlCNUYsTUFBTSxFQUNONXNCLE9BQVEsR0FDUjl4QixPQUFPLEVBRVBzcEQsS0FBSyxFQUNMUyxNQUFNLEVBQ052QixnQkFBaUIsSUFDakJqSixXQUFZLElBQ1pHLFdBQVcsQ0FDUHRkLEVBQUUsQ0FDRXdSLE1BQU8sR0FFWDBYLElBQUksQ0FDQTFYLE1BQU8sR0FFWDJYLEtBQUssQ0FDRDNYLE1BQU8sTUFLbkIvTSxFQUFFMXFDLFVBQVUybkIsR0FBRyxRQUFRLGlCQUFpQixTQUFTMWIsR0FDN0NBLEVBQUU4ZCxpQkFDRixJQUtpQnNsQyxFQUNiQyxFQUNBMXRELEVBTkF5dEQsRUFEUzNrQixFQUFFdHFDLE1BQ00wYSxRQUFRLG1CQUt6QncwQyxHQURhRCxFQUhQQSxHQUlXci9DLEtBQUssa0JBQ3RCcE8sRUFBTTB0RCxFQUFPdHRDLEtBQUssT0FDdEJxdEMsRUFBUXYwQyxRQUFRLFNBQVM4aEIsU0FBUyxnQkFDbEMweUIsRUFBTy85QyxLQUFLLE1BQU0zUCIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4vKiFcbiAgKiBCb290c3RyYXAgdjQuMS4wIChodHRwczovL2dldGJvb3RzdHJhcC5jb20vKVxuICAqIENvcHlyaWdodCAyMDExLTIwMTggVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcbiAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdqcXVlcnknKSwgcmVxdWlyZSgncG9wcGVyLmpzJykpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cycsICdqcXVlcnknLCAncG9wcGVyLmpzJ10sIGZhY3RvcnkpIDpcbiAgKGZhY3RvcnkoKGdsb2JhbC5ib290c3RyYXAgPSB7fSksZ2xvYmFsLmpRdWVyeSxnbG9iYWwuUG9wcGVyKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoZXhwb3J0cywkLFBvcHBlcikgeyAndXNlIHN0cmljdCc7XG5cbiAgJCA9ICQgJiYgJC5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gJFsnZGVmYXVsdCddIDogJDtcbiAgUG9wcGVyID0gUG9wcGVyICYmIFBvcHBlci5oYXNPd25Qcm9wZXJ0eSgnZGVmYXVsdCcpID8gUG9wcGVyWydkZWZhdWx0J10gOiBQb3BwZXI7XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICAgIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgICB2YXIgb3duS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBzeW0pLmVudW1lcmFibGU7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogdXRpbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVXRpbCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogUHJpdmF0ZSBUcmFuc2l0aW9uRW5kIEhlbHBlcnNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgVFJBTlNJVElPTl9FTkQgPSAndHJhbnNpdGlvbmVuZCc7XG4gICAgdmFyIE1BWF9VSUQgPSAxMDAwMDAwO1xuICAgIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuICAgIGZ1bmN0aW9uIHRvVHlwZShvYmopIHtcbiAgICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xccyhbYS16XSspL2kpWzFdLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgICAgZGVsZWdhdGVUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgICAgaGFuZGxlOiBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoJCQkMShldmVudC50YXJnZXQpLmlzKHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICAgICAgJCQkMSh0aGlzKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKF90aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgICAkJCQxLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xuICAgICAgJCQkMS5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIFB1YmxpYyBVdGlsIEFwaVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgIHZhciBVdGlsID0ge1xuICAgICAgVFJBTlNJVElPTl9FTkQ6ICdic1RyYW5zaXRpb25FbmQnLFxuICAgICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICAgICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcbiAgICAgICAgfSB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSk7XG5cbiAgICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICAgIH0sXG4gICAgICBnZXRTZWxlY3RvckZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0Jyk7XG5cbiAgICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgICAgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnaHJlZicpIHx8ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgJHNlbGVjdG9yID0gJCQkMShkb2N1bWVudCkuZmluZChzZWxlY3Rvcik7XG4gICAgICAgICAgcmV0dXJuICRzZWxlY3Rvci5sZW5ndGggPiAwID8gc2VsZWN0b3IgOiBudWxsO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50OiBmdW5jdGlvbiBnZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IC8vIEdldCB0cmFuc2l0aW9uLWR1cmF0aW9uIG9mIHRoZSBlbGVtZW50XG5cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gJCQkMShlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nKTtcbiAgICAgICAgdmFyIGZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uID0gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pOyAvLyBSZXR1cm4gMCBpZiBlbGVtZW50IG9yIHRyYW5zaXRpb24gZHVyYXRpb24gaXMgbm90IGZvdW5kXG5cbiAgICAgICAgaWYgKCFmbG9hdFRyYW5zaXRpb25EdXJhdGlvbikge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IC8vIElmIG11bHRpcGxlIGR1cmF0aW9ucyBhcmUgZGVmaW5lZCwgdGFrZSB0aGUgZmlyc3RcblxuXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh0cmFuc2l0aW9uRHVyYXRpb24pICogTUlMTElTRUNPTkRTX01VTFRJUExJRVI7XG4gICAgICB9LFxuICAgICAgcmVmbG93OiBmdW5jdGlvbiByZWZsb3coZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICB9LFxuICAgICAgdHJpZ2dlclRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHRyaWdnZXJUcmFuc2l0aW9uRW5kKGVsZW1lbnQpIHtcbiAgICAgICAgJCQkMShlbGVtZW50KS50cmlnZ2VyKFRSQU5TSVRJT05fRU5EKTtcbiAgICAgIH0sXG4gICAgICAvLyBUT0RPOiBSZW1vdmUgaW4gdjVcbiAgICAgIHN1cHBvcnRzVHJhbnNpdGlvbkVuZDogZnVuY3Rpb24gc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihUUkFOU0lUSU9OX0VORCk7XG4gICAgICB9LFxuICAgICAgaXNFbGVtZW50OiBmdW5jdGlvbiBpc0VsZW1lbnQob2JqKSB7XG4gICAgICAgIHJldHVybiAob2JqWzBdIHx8IG9iaikubm9kZVR5cGU7XG4gICAgICB9LFxuICAgICAgdHlwZUNoZWNrQ29uZmlnOiBmdW5jdGlvbiB0eXBlQ2hlY2tDb25maWcoY29tcG9uZW50TmFtZSwgY29uZmlnLCBjb25maWdUeXBlcykge1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBjb25maWdUeXBlcykge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgICAgdmFyIGV4cGVjdGVkVHlwZXMgPSBjb25maWdUeXBlc1twcm9wZXJ0eV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBjb25maWdbcHJvcGVydHldO1xuICAgICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmICghbmV3IFJlZ0V4cChleHBlY3RlZFR5cGVzKS50ZXN0KHZhbHVlVHlwZSkpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGNvbXBvbmVudE5hbWUudG9VcHBlckNhc2UoKSArIFwiOiBcIiArIChcIk9wdGlvbiBcXFwiXCIgKyBwcm9wZXJ0eSArIFwiXFxcIiBwcm92aWRlZCB0eXBlIFxcXCJcIiArIHZhbHVlVHlwZSArIFwiXFxcIiBcIikgKyAoXCJidXQgZXhwZWN0ZWQgdHlwZSBcXFwiXCIgKyBleHBlY3RlZFR5cGVzICsgXCJcXFwiLlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBzZXRUcmFuc2l0aW9uRW5kU3VwcG9ydCgpO1xuICAgIHJldHVybiBVdGlsO1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjEuMCk6IGFsZXJ0LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBBbGVydCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnYWxlcnQnO1xuICAgIHZhciBWRVJTSU9OID0gJzQuMS4wJztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuYWxlcnQnO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBESVNNSVNTOiAnW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgQ0xPU0U6IFwiY2xvc2VcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMT1NFRDogXCJjbG9zZWRcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBBTEVSVDogJ2FsZXJ0JyxcbiAgICAgIEZBREU6ICdmYWRlJyxcbiAgICAgIFNIT1c6ICdzaG93J1xuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIEFsZXJ0ID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gQWxlcnQoZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBBbGVydC5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50ID0gZWxlbWVudCB8fCB0aGlzLl9lbGVtZW50O1xuXG4gICAgICAgIHZhciByb290RWxlbWVudCA9IHRoaXMuX2dldFJvb3RFbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBjdXN0b21FdmVudCA9IHRoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KHJvb3RFbGVtZW50KTtcblxuICAgICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgdmFyIHBhcmVudCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIHBhcmVudCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDbGFzc05hbWUuQUxFUlQpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fdHJpZ2dlckNsb3NlRXZlbnQgPSBmdW5jdGlvbiBfdHJpZ2dlckNsb3NlRXZlbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgY2xvc2VFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuQ0xPU0UpO1xuICAgICAgICAkJCQxKGVsZW1lbnQpLnRyaWdnZXIoY2xvc2VFdmVudCk7XG4gICAgICAgIHJldHVybiBjbG9zZUV2ZW50O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9yZW1vdmVFbGVtZW50ID0gZnVuY3Rpb24gX3JlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICQkJDEoZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIGlmICghJCQkMShlbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICAkJCQxKGVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMuX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQsIGV2ZW50KTtcbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZGVzdHJveUVsZW1lbnQgPSBmdW5jdGlvbiBfZGVzdHJveUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICAkJCQxKGVsZW1lbnQpLmRldGFjaCgpLnRyaWdnZXIoRXZlbnQuQ0xPU0VEKS5yZW1vdmUoKTtcbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgJGVsZW1lbnQgPSAkJCQxKHRoaXMpO1xuICAgICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQWxlcnQodGhpcyk7XG4gICAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29uZmlnID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzID0gZnVuY3Rpb24gX2hhbmRsZURpc21pc3MoYWxlcnRJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoQWxlcnQsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBBbGVydDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRJU01JU1MsIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzKG5ldyBBbGVydCgpKSk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgICAkJCQxLmZuW05BTUVdID0gQWxlcnQuX2pRdWVyeUludGVyZmFjZTtcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQWxlcnQ7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICAgfTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgkKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjApOiBidXR0b24uanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIEJ1dHRvbiA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnYnV0dG9uJztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMCc7XG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLmJ1dHRvbic7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgICAgQlVUVE9OOiAnYnRuJyxcbiAgICAgIEZPQ1VTOiAnZm9jdXMnXG4gICAgfTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBEQVRBX1RPR0dMRV9DQVJST1Q6ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJyxcbiAgICAgIERBVEFfVE9HR0xFOiAnW2RhdGEtdG9nZ2xlPVwiYnV0dG9uc1wiXScsXG4gICAgICBJTlBVVDogJ2lucHV0JyxcbiAgICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgICAgQlVUVE9OOiAnLmJ0bidcbiAgICB9O1xuICAgIHZhciBFdmVudCA9IHtcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgICBGT0NVU19CTFVSX0RBVEFfQVBJOiBcImZvY3VzXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVkgKyBcIiBcIiArIChcImJsdXJcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWSlcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBCdXR0b24gPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBCdXR0b24oZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gICAgICAvLyBQdWJsaWNcbiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIHZhciB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSB0cnVlO1xuICAgICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xuICAgICAgICB2YXIgcm9vdEVsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuREFUQV9UT0dHTEUpWzBdO1xuXG4gICAgICAgIGlmIChyb290RWxlbWVudCkge1xuICAgICAgICAgIHZhciBpbnB1dCA9ICQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5JTlBVVClbMF07XG5cbiAgICAgICAgICBpZiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpIHtcbiAgICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICQkJDEocm9vdEVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFKVswXTtcblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICAgIGlmIChpbnB1dC5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgfHwgcm9vdEVsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGlucHV0LmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSB8fCByb290RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpbnB1dC5jaGVja2VkID0gISQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgICAgICQkJDEoaW5wdXQpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnB1dC5mb2N1cygpO1xuICAgICAgICAgICAgYWRkQXJpYVByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgISQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyaWdnZXJDaGFuZ2VFdmVudCkge1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBCdXR0b24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKEJ1dHRvbiwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH1dKTtcblxuICAgICAgcmV0dXJuIEJ1dHRvbjtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcblxuICAgICAgaWYgKCEkJCQxKGJ1dHRvbikuaGFzQ2xhc3MoQ2xhc3NOYW1lLkJVVFRPTikpIHtcbiAgICAgICAgYnV0dG9uID0gJCQkMShidXR0b24pLmNsb3Nlc3QoU2VsZWN0b3IuQlVUVE9OKTtcbiAgICAgIH1cblxuICAgICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKGJ1dHRvbiksICd0b2dnbGUnKTtcbiAgICB9KS5vbihFdmVudC5GT0NVU19CTFVSX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGJ1dHRvbiA9ICQkJDEoZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNlbGVjdG9yLkJVVFRPTilbMF07XG4gICAgICAkJCQxKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ2xhc3NOYW1lLkZPQ1VTLCAvXmZvY3VzKGluKT8kLy50ZXN0KGV2ZW50LnR5cGUpKTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgICAkJCQxLmZuW05BTUVdLkNvbnN0cnVjdG9yID0gQnV0dG9uO1xuXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgIHJldHVybiBCdXR0b24uX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEJ1dHRvbjtcbiAgfSgkKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjApOiBjYXJvdXNlbC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENvbnN0YW50c1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIHZhciBOQU1FID0gJ2Nhcm91c2VsJztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMCc7XG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLmNhcm91c2VsJztcbiAgICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgICB2YXIgREFUQV9BUElfS0VZID0gJy5kYXRhLWFwaSc7XG4gICAgdmFyIEpRVUVSWV9OT19DT05GTElDVCA9ICQkJDEuZm5bTkFNRV07XG4gICAgdmFyIEFSUk9XX0xFRlRfS0VZQ09ERSA9IDM3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBsZWZ0IGFycm93IGtleVxuXG4gICAgdmFyIEFSUk9XX1JJR0hUX0tFWUNPREUgPSAzOTsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgcmlnaHQgYXJyb3cga2V5XG5cbiAgICB2YXIgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIGludGVydmFsOiA1MDAwLFxuICAgICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgICBzbGlkZTogZmFsc2UsXG4gICAgICBwYXVzZTogJ2hvdmVyJyxcbiAgICAgIHdyYXA6IHRydWVcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIGludGVydmFsOiAnKG51bWJlcnxib29sZWFuKScsXG4gICAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgICAgc2xpZGU6ICcoYm9vbGVhbnxzdHJpbmcpJyxcbiAgICAgIHBhdXNlOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgICB3cmFwOiAnYm9vbGVhbidcbiAgICB9O1xuICAgIHZhciBEaXJlY3Rpb24gPSB7XG4gICAgICBORVhUOiAnbmV4dCcsXG4gICAgICBQUkVWOiAncHJldicsXG4gICAgICBMRUZUOiAnbGVmdCcsXG4gICAgICBSSUdIVDogJ3JpZ2h0J1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgU0xJREU6IFwic2xpZGVcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNMSUQ6IFwic2xpZFwiICsgRVZFTlRfS0VZLFxuICAgICAgS0VZRE9XTjogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZLFxuICAgICAgVE9VQ0hFTkQ6IFwidG91Y2hlbmRcIiArIEVWRU5UX0tFWSxcbiAgICAgIExPQURfREFUQV9BUEk6IFwibG9hZFwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIENBUk9VU0VMOiAnY2Fyb3VzZWwnLFxuICAgICAgQUNUSVZFOiAnYWN0aXZlJyxcbiAgICAgIFNMSURFOiAnc2xpZGUnLFxuICAgICAgUklHSFQ6ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JyxcbiAgICAgIExFRlQ6ICdjYXJvdXNlbC1pdGVtLWxlZnQnLFxuICAgICAgTkVYVDogJ2Nhcm91c2VsLWl0ZW0tbmV4dCcsXG4gICAgICBQUkVWOiAnY2Fyb3VzZWwtaXRlbS1wcmV2JyxcbiAgICAgIElURU06ICdjYXJvdXNlbC1pdGVtJ1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgICBBQ1RJVkVfSVRFTTogJy5hY3RpdmUuY2Fyb3VzZWwtaXRlbScsXG4gICAgICBJVEVNOiAnLmNhcm91c2VsLWl0ZW0nLFxuICAgICAgTkVYVF9QUkVWOiAnLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldicsXG4gICAgICBJTkRJQ0FUT1JTOiAnLmNhcm91c2VsLWluZGljYXRvcnMnLFxuICAgICAgREFUQV9TTElERTogJ1tkYXRhLXNsaWRlXSwgW2RhdGEtc2xpZGUtdG9dJyxcbiAgICAgIERBVEFfUklERTogJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXSdcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBDYXJvdXNlbCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzUGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gJCQkMShlbGVtZW50KVswXTtcbiAgICAgICAgdGhpcy5faW5kaWNhdG9yc0VsZW1lbnQgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuSU5ESUNBVE9SUylbMF07XG5cbiAgICAgICAgdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBDYXJvdXNlbC5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLm5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5ORVhUKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLm5leHRXaGVuVmlzaWJsZSA9IGZ1bmN0aW9uIG5leHRXaGVuVmlzaWJsZSgpIHtcbiAgICAgICAgLy8gRG9uJ3QgY2FsbCBuZXh0IHdoZW4gdGhlIHBhZ2UgaXNuJ3QgdmlzaWJsZVxuICAgICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG4gICAgICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmICQkJDEodGhpcy5fZWxlbWVudCkuaXMoJzp2aXNpYmxlJykgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5jc3MoJ3Zpc2liaWxpdHknKSAhPT0gJ2hpZGRlbicpIHtcbiAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnByZXYgPSBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAgIHRoaXMuX3NsaWRlKERpcmVjdGlvbi5QUkVWKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnBhdXNlID0gZnVuY3Rpb24gcGF1c2UoZXZlbnQpIHtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgIHRoaXMuX2lzUGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmZpbmQoU2VsZWN0b3IuTkVYVF9QUkVWKVswXSkge1xuICAgICAgICAgIFV0aWwudHJpZ2dlclRyYW5zaXRpb25FbmQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5jeWNsZSh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uY3ljbGUgPSBmdW5jdGlvbiBjeWNsZShldmVudCkge1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID8gdGhpcy5uZXh0V2hlblZpc2libGUgOiB0aGlzLm5leHQpLmJpbmQodGhpcyksIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by50byA9IGZ1bmN0aW9uIHRvKGluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuZmluZChTZWxlY3Rvci5BQ1RJVkVfSVRFTSlbMF07XG5cbiAgICAgICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2FjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChpbmRleCA+IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDEgfHwgaW5kZXggPCAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2xpZGluZykge1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKEV2ZW50LlNMSUQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZUluZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBEaXJlY3Rpb24uTkVYVCA6IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICAgIHRoaXMuX3NsaWRlKGRpcmVjdGlvbiwgdGhpcy5faXRlbXNbaW5kZXhdKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2FjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LktFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5fa2V5ZG93bihldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5NT1VTRUVOVEVSLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczIucGF1c2UoZXZlbnQpO1xuICAgICAgICAgIH0pLm9uKEV2ZW50Lk1PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5jeWNsZShldmVudCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBJZiBpdCdzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2UsIG1vdXNlZW50ZXIvbGVhdmUgYXJlIGZpcmVkIGFzXG4gICAgICAgICAgICAvLyBwYXJ0IG9mIHRoZSBtb3VzZSBjb21wYXRpYmlsaXR5IGV2ZW50cyBvbiBmaXJzdCB0YXAgLSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgICAgICAvLyBoZXJlLCB3ZSBsaXN0ZW4gZm9yIHRvdWNoZW5kLCBleHBsaWNpdGx5IHBhdXNlIHRoZSBjYXJvdXNlbFxuICAgICAgICAgICAgLy8gKGFzIGlmIGl0J3MgdGhlIHNlY29uZCB0aW1lIHdlIHRhcCBvbiBpdCwgbW91c2VlbnRlciBjb21wYXQgZXZlbnRcbiAgICAgICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgIC8vIGV2ZW50cyB0byBmaXJlKSB3ZSBleHBsaWNpdGx5IHJlc3RhcnQgY3ljbGluZ1xuICAgICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5UT1VDSEVORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIucGF1c2UoKTtcblxuICAgICAgICAgICAgICBpZiAoX3RoaXMyLnRvdWNoVGltZW91dCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpczIudG91Y2hUaW1lb3V0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF90aGlzMi50b3VjaFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuY3ljbGUoZXZlbnQpO1xuICAgICAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMyLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2tleWRvd24gPSBmdW5jdGlvbiBfa2V5ZG93bihldmVudCkge1xuICAgICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgICAgY2FzZSBBUlJPV19MRUZUX0tFWUNPREU6XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgQVJST1dfUklHSFRfS0VZQ09ERTpcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiBfZ2V0SXRlbUluZGV4KGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5faXRlbXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKGVsZW1lbnQpLnBhcmVudCgpLmZpbmQoU2VsZWN0b3IuSVRFTSkpO1xuICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMuaW5kZXhPZihlbGVtZW50KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0SXRlbUJ5RGlyZWN0aW9uID0gZnVuY3Rpb24gX2dldEl0ZW1CeURpcmVjdGlvbihkaXJlY3Rpb24sIGFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGlzTmV4dERpcmVjdGlvbiA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLk5FWFQ7XG4gICAgICAgIHZhciBpc1ByZXZEaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERpcmVjdGlvbi5QUkVWO1xuXG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChhY3RpdmVFbGVtZW50KTtcblxuICAgICAgICB2YXIgbGFzdEl0ZW1JbmRleCA9IHRoaXMuX2l0ZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgICBpZiAoaXNHb2luZ1RvV3JhcCAmJiAhdGhpcy5fY29uZmlnLndyYXApIHtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWx0YSA9IGRpcmVjdGlvbiA9PT0gRGlyZWN0aW9uLlBSRVYgPyAtMSA6IDE7XG4gICAgICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLl9pdGVtcy5sZW5ndGg7XG4gICAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl90cmlnZ2VyU2xpZGVFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyU2xpZGVFdmVudChyZWxhdGVkVGFyZ2V0LCBldmVudERpcmVjdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICAgIHZhciBmcm9tSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXSk7XG5cbiAgICAgICAgdmFyIHNsaWRlRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNMSURFLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCxcbiAgICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgICBmcm9tOiBmcm9tSW5kZXgsXG4gICAgICAgICAgdG86IHRhcmdldEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZGVFdmVudCk7XG4gICAgICAgIHJldHVybiBzbGlkZUV2ZW50O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50ID0gZnVuY3Rpb24gX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG5cbiAgICAgICAgICB2YXIgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW3RoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KV07XG5cbiAgICAgICAgICBpZiAobmV4dEluZGljYXRvcikge1xuICAgICAgICAgICAgJCQkMShuZXh0SW5kaWNhdG9yKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2xpZGUgPSBmdW5jdGlvbiBfc2xpZGUoZGlyZWN0aW9uLCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gJCQkMSh0aGlzLl9lbGVtZW50KS5maW5kKFNlbGVjdG9yLkFDVElWRV9JVEVNKVswXTtcblxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KGFjdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcblxuICAgICAgICB2YXIgbmV4dEVsZW1lbnRJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleChuZXh0RWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGlzQ3ljbGluZyA9IEJvb2xlYW4odGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWU7XG4gICAgICAgIHZhciBvcmRlckNsYXNzTmFtZTtcbiAgICAgICAgdmFyIGV2ZW50RGlyZWN0aW9uTmFtZTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uID09PSBEaXJlY3Rpb24uTkVYVCkge1xuICAgICAgICAgIGRpcmVjdGlvbmFsQ2xhc3NOYW1lID0gQ2xhc3NOYW1lLkxFRlQ7XG4gICAgICAgICAgb3JkZXJDbGFzc05hbWUgPSBDbGFzc05hbWUuTkVYVDtcbiAgICAgICAgICBldmVudERpcmVjdGlvbk5hbWUgPSBEaXJlY3Rpb24uTEVGVDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENsYXNzTmFtZS5SSUdIVDtcbiAgICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENsYXNzTmFtZS5QUkVWO1xuICAgICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERpcmVjdGlvbi5SSUdIVDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0RWxlbWVudCAmJiAkJCQxKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSkge1xuICAgICAgICAgIHRoaXMuX2lzU2xpZGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzbGlkZUV2ZW50ID0gdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQobmV4dEVsZW1lbnQsIGV2ZW50RGlyZWN0aW9uTmFtZSk7XG5cbiAgICAgICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWFjdGl2ZUVsZW1lbnQgfHwgIW5leHRFbGVtZW50KSB7XG4gICAgICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudChuZXh0RWxlbWVudCk7XG5cbiAgICAgICAgdmFyIHNsaWRFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0xJRCwge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG5leHRFbGVtZW50LFxuICAgICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICAgIGZyb206IGFjdGl2ZUVsZW1lbnRJbmRleCxcbiAgICAgICAgICB0bzogbmV4dEVsZW1lbnRJbmRleFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0xJREUpKSB7XG4gICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkuYWRkQ2xhc3Mob3JkZXJDbGFzc05hbWUpO1xuICAgICAgICAgIFV0aWwucmVmbG93KG5leHRFbGVtZW50KTtcbiAgICAgICAgICAkJCQxKGFjdGl2ZUVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgICAkJCQxKG5leHRFbGVtZW50KS5hZGRDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSk7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICAgJCQkMShhY3RpdmVFbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkucmVtb3ZlQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUgKyBcIiBcIiArIG9yZGVyQ2xhc3NOYW1lKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUgKyBcIiBcIiArIGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgICAgIF90aGlzMy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuICQkJDEoX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICQkJDEoYWN0aXZlRWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgJCQkMShuZXh0RWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNsaWRFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDeWNsaW5nKSB7XG4gICAgICAgICAgdGhpcy5jeWNsZSgpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCAkJCQxKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnLCBjb25maWcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQ2Fyb3VzZWwodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZGF0YS50byhjb25maWcpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGFjdGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGFjdGlvbiArIFwiXFxcIlwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YVthY3Rpb25dKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChfY29uZmlnLmludGVydmFsKSB7XG4gICAgICAgICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICAgICAgICBkYXRhLmN5Y2xlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07XG5cbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgISQkJDEodGFyZ2V0KS5oYXNDbGFzcyhDbGFzc05hbWUuQ0FST1VTRUwpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sICQkJDEodGFyZ2V0KS5kYXRhKCksICQkJDEodGhpcykuZGF0YSgpKTtcblxuICAgICAgICB2YXIgc2xpZGVJbmRleCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLXNsaWRlLXRvJyk7XG5cbiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRhcmdldCksIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICAgICAkJCQxKHRhcmdldCkuZGF0YShEQVRBX0tFWSkudG8oc2xpZGVJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKENhcm91c2VsLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1NMSURFLCBDYXJvdXNlbC5fZGF0YUFwaUNsaWNrSGFuZGxlcik7XG4gICAgJCQkMSh3aW5kb3cpLm9uKEV2ZW50LkxPQURfREFUQV9BUEksIGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEoU2VsZWN0b3IuREFUQV9SSURFKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRjYXJvdXNlbCA9ICQkJDEodGhpcyk7XG5cbiAgICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENhcm91c2VsO1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjEuMCk6IGNvbGxhcHNlLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAnY29sbGFwc2UnO1xuICAgIHZhciBWRVJTSU9OID0gJzQuMS4wJztcbiAgICB2YXIgREFUQV9LRVkgPSAnYnMuY29sbGFwc2UnO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgIHBhcmVudDogJydcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIHRvZ2dsZTogJ2Jvb2xlYW4nLFxuICAgICAgcGFyZW50OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgICB9O1xuICAgIHZhciBFdmVudCA9IHtcbiAgICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0tfREFUQV9BUEk6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIFNIT1c6ICdzaG93JyxcbiAgICAgIENPTExBUFNFOiAnY29sbGFwc2UnLFxuICAgICAgQ09MTEFQU0lORzogJ2NvbGxhcHNpbmcnLFxuICAgICAgQ09MTEFQU0VEOiAnY29sbGFwc2VkJ1xuICAgIH07XG4gICAgdmFyIERpbWVuc2lvbiA9IHtcbiAgICAgIFdJRFRIOiAnd2lkdGgnLFxuICAgICAgSEVJR0hUOiAnaGVpZ2h0J1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgQUNUSVZFUzogJy5zaG93LCAuY29sbGFwc2luZycsXG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ1xuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIENvbGxhcHNlID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX3RyaWdnZXJBcnJheSA9ICQkJDEubWFrZUFycmF5KCQkJDEoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1baHJlZj1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl0sXCIgKyAoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS10YXJnZXQ9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdXCIpKSk7XG4gICAgICAgIHZhciB0YWJUb2dnbGVzID0gJCQkMShTZWxlY3Rvci5EQVRBX1RPR0dMRSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJUb2dnbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSB0YWJUb2dnbGVzW2ldO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCAmJiAkJCQxKHNlbGVjdG9yKS5maWx0ZXIoZWxlbWVudCkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcblxuICAgICAgICAgICAgdGhpcy5fdHJpZ2dlckFycmF5LnB1c2goZWxlbSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudCA/IHRoaXMuX2dldFBhcmVudCgpIDogbnVsbDtcblxuICAgICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fdHJpZ2dlckFycmF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgICAgdGhpcy50b2dnbGUoKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgICAgdmFyIF9wcm90byA9IENvbGxhcHNlLnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aXZlcztcbiAgICAgICAgdmFyIGFjdGl2ZXNEYXRhO1xuXG4gICAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgICBhY3RpdmVzID0gJCQkMS5tYWtlQXJyYXkoJCQkMSh0aGlzLl9wYXJlbnQpLmZpbmQoU2VsZWN0b3IuQUNUSVZFUykuZmlsdGVyKFwiW2RhdGEtcGFyZW50PVxcXCJcIiArIHRoaXMuX2NvbmZpZy5wYXJlbnQgKyBcIlxcXCJdXCIpKTtcblxuICAgICAgICAgIGlmIChhY3RpdmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgICBhY3RpdmVzRGF0YSA9ICQkJDEoYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1cpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlcykge1xuICAgICAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKGFjdGl2ZXMpLm5vdCh0aGlzLl9zZWxlY3RvciksICdoaWRlJyk7XG5cbiAgICAgICAgICBpZiAoIWFjdGl2ZXNEYXRhKSB7XG4gICAgICAgICAgICAkJCQxKGFjdGl2ZXMpLmRhdGEoREFUQV9LRVksIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICQkJDEodGhpcy5fdHJpZ2dlckFycmF5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNJTkcpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgICAgIF90aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcblxuICAgICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICAgJCQkMShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFdmVudC5TSE9XTik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGNhcGl0YWxpemVkRGltZW5zaW9uID0gZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoMSk7XG4gICAgICAgIHZhciBzY3JvbGxTaXplID0gXCJzY3JvbGxcIiArIGNhcGl0YWxpemVkRGltZW5zaW9uO1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9IHRoaXMuX2VsZW1lbnRbc2Nyb2xsU2l6ZV0gKyBcInB4XCI7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LkhJREUpO1xuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgICAgaWYgKHN0YXJ0RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0lORykucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkNPTExBUFNFKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRyaWdnZXIpO1xuXG4gICAgICAgICAgICBpZiAoc2VsZWN0b3IgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyICRlbGVtID0gJCQkMShzZWxlY3Rvcik7XG5cbiAgICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgICAgICAkJCQxKHRyaWdnZXIpLmFkZENsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICAgJCQkMShfdGhpczIuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTSU5HKS5hZGRDbGFzcyhDbGFzc05hbWUuQ09MTEFQU0UpLnRyaWdnZXIoRXZlbnQuSElEREVOKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBpc1RyYW5zaXRpb25pbmc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBudWxsO1xuICAgICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgRGVmYXVsdCwgY29uZmlnKTtcbiAgICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG5cbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldERpbWVuc2lvbiA9IGZ1bmN0aW9uIF9nZXREaW1lbnNpb24oKSB7XG4gICAgICAgIHZhciBoYXNXaWR0aCA9ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoRGltZW5zaW9uLldJRFRIKTtcbiAgICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRGltZW5zaW9uLldJRFRIIDogRGltZW5zaW9uLkhFSUdIVDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0UGFyZW50ID0gZnVuY3Rpb24gX2dldFBhcmVudCgpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHBhcmVudCA9IG51bGw7XG5cbiAgICAgICAgaWYgKFV0aWwuaXNFbGVtZW50KHRoaXMuX2NvbmZpZy5wYXJlbnQpKSB7XG4gICAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudDsgLy8gSXQncyBhIGpRdWVyeSBvYmplY3RcblxuICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50WzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJlbnQgPSAkJCQxKHRoaXMuX2NvbmZpZy5wYXJlbnQpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlbGVjdG9yID0gXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS1wYXJlbnQ9XFxcIlwiICsgdGhpcy5fY29uZmlnLnBhcmVudCArIFwiXFxcIl1cIjtcbiAgICAgICAgJCQkMShwYXJlbnQpLmZpbmQoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiBfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGVsZW1lbnQsIHRyaWdnZXJBcnJheSkge1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgIHZhciBpc09wZW4gPSAkJCQxKGVsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICAgIGlmICh0cmlnZ2VyQXJyYXkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgJCQkMSh0cmlnZ2VyQXJyYXkpLnRvZ2dsZUNsYXNzKENsYXNzTmFtZS5DT0xMQVBTRUQsICFpc09wZW4pLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBpc09wZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgQ29sbGFwc2UuX2dldFRhcmdldEZyb21FbGVtZW50ID0gZnVuY3Rpb24gX2dldFRhcmdldEZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IgPyAkJCQxKHNlbGVjdG9yKVswXSA6IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyICR0aGlzID0gJCQkMSh0aGlzKTtcbiAgICAgICAgICB2YXIgZGF0YSA9ICR0aGlzLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCAkdGhpcy5kYXRhKCksIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyk7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgX2NvbmZpZy50b2dnbGUgJiYgL3Nob3d8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKENvbGxhcHNlLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gQ29sbGFwc2U7XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5EQVRBX1RPR0dMRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgICBpZiAoZXZlbnQuY3VycmVudFRhcmdldC50YWdOYW1lID09PSAnQScpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgdmFyICR0cmlnZ2VyID0gJCQkMSh0aGlzKTtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcbiAgICAgICQkJDEoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJHRhcmdldCA9ICQkJDEodGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJHRhcmdldC5kYXRhKERBVEFfS0VZKTtcbiAgICAgICAgdmFyIGNvbmZpZyA9IGRhdGEgPyAndG9nZ2xlJyA6ICR0cmlnZ2VyLmRhdGEoKTtcblxuICAgICAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJHRhcmdldCwgY29uZmlnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gICAgJCQkMS5mbltOQU1FXSA9IENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IENvbGxhcHNlO1xuXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgIHJldHVybiBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29sbGFwc2U7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogZHJvcGRvd24uanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdkcm9wZG93bic7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjAnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5kcm9wZG93bic7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcblxuICAgIHZhciBUQUJfS0VZQ09ERSA9IDk7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRhYiBrZXlcblxuICAgIHZhciBBUlJPV19VUF9LRVlDT0RFID0gMzg7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIHVwIGFycm93IGtleVxuXG4gICAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuXG4gICAgdmFyIFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCA9IDM7IC8vIE1vdXNlRXZlbnQud2hpY2ggdmFsdWUgZm9yIHRoZSByaWdodCBidXR0b24gKGFzc3VtaW5nIGEgcmlnaHQtaGFuZGVkIG1vdXNlKVxuXG4gICAgdmFyIFJFR0VYUF9LRVlET1dOID0gbmV3IFJlZ0V4cChBUlJPV19VUF9LRVlDT0RFICsgXCJ8XCIgKyBBUlJPV19ET1dOX0tFWUNPREUgKyBcInxcIiArIEVTQ0FQRV9LRVlDT0RFKTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXG4gICAgICBDTElDS19EQVRBX0FQSTogXCJjbGlja1wiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZLFxuICAgICAgS0VZRE9XTl9EQVRBX0FQSTogXCJrZXlkb3duXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVksXG4gICAgICBLRVlVUF9EQVRBX0FQSTogXCJrZXl1cFwiICsgRVZFTlRfS0VZICsgREFUQV9BUElfS0VZXG4gICAgfTtcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgICBTSE9XOiAnc2hvdycsXG4gICAgICBEUk9QVVA6ICdkcm9wdXAnLFxuICAgICAgRFJPUFJJR0hUOiAnZHJvcHJpZ2h0JyxcbiAgICAgIERST1BMRUZUOiAnZHJvcGxlZnQnLFxuICAgICAgTUVOVVJJR0hUOiAnZHJvcGRvd24tbWVudS1yaWdodCcsXG4gICAgICBNRU5VTEVGVDogJ2Ryb3Bkb3duLW1lbnUtbGVmdCcsXG4gICAgICBQT1NJVElPTl9TVEFUSUM6ICdwb3NpdGlvbi1zdGF0aWMnXG4gICAgfTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxcbiAgICAgIEZPUk1fQ0hJTEQ6ICcuZHJvcGRvd24gZm9ybScsXG4gICAgICBNRU5VOiAnLmRyb3Bkb3duLW1lbnUnLFxuICAgICAgTkFWQkFSX05BVjogJy5uYXZiYXItbmF2JyxcbiAgICAgIFZJU0lCTEVfSVRFTVM6ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSdcbiAgICB9O1xuICAgIHZhciBBdHRhY2htZW50TWFwID0ge1xuICAgICAgVE9QOiAndG9wLXN0YXJ0JyxcbiAgICAgIFRPUEVORDogJ3RvcC1lbmQnLFxuICAgICAgQk9UVE9NOiAnYm90dG9tLXN0YXJ0JyxcbiAgICAgIEJPVFRPTUVORDogJ2JvdHRvbS1lbmQnLFxuICAgICAgUklHSFQ6ICdyaWdodC1zdGFydCcsXG4gICAgICBSSUdIVEVORDogJ3JpZ2h0LWVuZCcsXG4gICAgICBMRUZUOiAnbGVmdC1zdGFydCcsXG4gICAgICBMRUZURU5EOiAnbGVmdC1lbmQnXG4gICAgfTtcbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIGZsaXA6IHRydWUsXG4gICAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgICByZWZlcmVuY2U6ICd0b2dnbGUnLFxuICAgICAgZGlzcGxheTogJ2R5bmFtaWMnXG4gICAgfTtcbiAgICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgICBvZmZzZXQ6ICcobnVtYmVyfHN0cmluZ3xmdW5jdGlvbiknLFxuICAgICAgZmxpcDogJ2Jvb2xlYW4nLFxuICAgICAgYm91bmRhcnk6ICcoc3RyaW5nfGVsZW1lbnQpJyxcbiAgICAgIHJlZmVyZW5jZTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgICAgZGlzcGxheTogJ3N0cmluZydcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBEcm9wZG93biA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMuX21lbnUgPSB0aGlzLl9nZXRNZW51RWxlbWVudCgpO1xuICAgICAgICB0aGlzLl9pbk5hdmJhciA9IHRoaXMuX2RldGVjdE5hdmJhcigpO1xuXG4gICAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgICB2YXIgX3Byb3RvID0gRHJvcGRvd24ucHJvdG90eXBlO1xuXG4gICAgICAvLyBQdWJsaWNcbiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTtcblxuICAgICAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzaG93RXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1csIHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gRGlzYWJsZSB0b3RhbGx5IFBvcHBlci5qcyBmb3IgRHJvcGRvd24gaW4gTmF2YmFyXG5cblxuICAgICAgICBpZiAoIXRoaXMuX2luTmF2YmFyKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQ2hlY2sgZm9yIFBvcHBlciBkZXBlbmRlbmN5XG4gICAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAgICovXG4gICAgICAgICAgaWYgKHR5cGVvZiBQb3BwZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXAgZHJvcGRvd24gcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQ7XG5cbiAgICAgICAgICBpZiAodGhpcy5fY29uZmlnLnJlZmVyZW5jZSA9PT0gJ3BhcmVudCcpIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2U7IC8vIENoZWNrIGlmIGl0J3MgalF1ZXJ5IGVsZW1lbnRcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgcmVmZXJlbmNlRWxlbWVudCA9IHRoaXMuX2NvbmZpZy5yZWZlcmVuY2VbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBJZiBib3VuZGFyeSBpcyBub3QgYHNjcm9sbFBhcmVudGAsIHRoZW4gc2V0IHBvc2l0aW9uIHRvIGBzdGF0aWNgXG4gICAgICAgICAgLy8gdG8gYWxsb3cgdGhlIG1lbnUgdG8gXCJlc2NhcGVcIiB0aGUgc2Nyb2xsIHBhcmVudCdzIGJvdW5kYXJpZXNcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvaXNzdWVzLzI0MjUxXG5cblxuICAgICAgICAgIGlmICh0aGlzLl9jb25maWcuYm91bmRhcnkgIT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICAgICAgICAkJCQxKHBhcmVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlBPU0lUSU9OX1NUQVRJQyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcihyZWZlcmVuY2VFbGVtZW50LCB0aGlzLl9tZW51LCB0aGlzLl9nZXRQb3BwZXJDb25maWcoKSk7XG4gICAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAvLyBvbmx5IG5lZWRlZCBiZWNhdXNlIG9mIGJyb2tlbiBldmVudCBkZWxlZ2F0aW9uIG9uIGlPU1xuICAgICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgJCQkMShwYXJlbnQpLmNsb3Nlc3QoU2VsZWN0b3IuTkFWQkFSX05BVikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkJCQxLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5mb2N1cygpO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG5cbiAgICAgICAgJCQkMSh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICQkJDEocGFyZW50KS50b2dnbGVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9tZW51ID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fcG9wcGVyICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3BvcHBlci5zY2hlZHVsZVVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLm9uKEV2ZW50LkNMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgX3RoaXMudG9nZ2xlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsICQkJDEodGhpcy5fZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuICAgICAgICByZXR1cm4gY29uZmlnO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRNZW51RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRNZW51RWxlbWVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tZW51KSB7XG4gICAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICAgIHRoaXMuX21lbnUgPSAkJCQxKHBhcmVudCkuZmluZChTZWxlY3Rvci5NRU5VKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZW51O1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGxhY2VtZW50KCkge1xuICAgICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJCQkMSh0aGlzLl9lbGVtZW50KS5wYXJlbnQoKTtcbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuQk9UVE9NOyAvLyBIYW5kbGUgZHJvcHVwXG5cbiAgICAgICAgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUFVQKSkge1xuICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QO1xuXG4gICAgICAgICAgaWYgKCQkJDEodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICAgIHBsYWNlbWVudCA9IEF0dGFjaG1lbnRNYXAuVE9QRU5EO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ2xhc3NOYW1lLkRST1BSSUdIVCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLlJJR0hUO1xuICAgICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUExFRlQpKSB7XG4gICAgICAgICAgcGxhY2VtZW50ID0gQXR0YWNobWVudE1hcC5MRUZUO1xuICAgICAgICB9IGVsc2UgaWYgKCQkJDEodGhpcy5fbWVudSkuaGFzQ2xhc3MoQ2xhc3NOYW1lLk1FTlVSSUdIVCkpIHtcbiAgICAgICAgICBwbGFjZW1lbnQgPSBBdHRhY2htZW50TWFwLkJPVFRPTUVORDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2RldGVjdE5hdmJhciA9IGZ1bmN0aW9uIF9kZXRlY3ROYXZiYXIoKSB7XG4gICAgICAgIHJldHVybiAkJCQxKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoJy5uYXZiYXInKS5sZW5ndGggPiAwO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9nZXRQb3BwZXJDb25maWcgPSBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgb2Zmc2V0Q29uZiA9IHt9O1xuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLm9mZnNldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIG9mZnNldENvbmYuZm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgZGF0YS5vZmZzZXRzID0gX29iamVjdFNwcmVhZCh7fSwgZGF0YS5vZmZzZXRzLCBfdGhpczIuX2NvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzKSB8fCB7fSk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZnNldENvbmYub2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwb3BwZXJDb25maWcgPSB7XG4gICAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0Q29uZixcbiAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5fY29uZmlnLmZsaXBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgICAgYm91bmRhcmllc0VsZW1lbnQ6IHRoaXMuX2NvbmZpZy5ib3VuZGFyeVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gRGlzYWJsZSBQb3BwZXIuanMgaWYgd2UgaGF2ZSBhIHN0YXRpYyBkaXNwbGF5XG5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmRpc3BsYXkgPT09ICdzdGF0aWMnKSB7XG4gICAgICAgICAgcG9wcGVyQ29uZmlnLm1vZGlmaWVycy5hcHBseVN0eWxlID0ge1xuICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvcHBlckNvbmZpZztcbiAgICAgIH07IC8vIFN0YXRpY1xuXG5cbiAgICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9ICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBEcm9wZG93bih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBEcm9wZG93bi5fY2xlYXJNZW51cyA9IGZ1bmN0aW9uIF9jbGVhck1lbnVzKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoICE9PSBUQUJfS0VZQ09ERSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9nZ2xlcyA9ICQkJDEubWFrZUFycmF5KCQkJDEoU2VsZWN0b3IuREFUQV9UT0dHTEUpKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvZ2dsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRvZ2dsZXNbaV0pO1xuXG4gICAgICAgICAgdmFyIGNvbnRleHQgPSAkJCQxKHRvZ2dsZXNbaV0pLmRhdGEoREFUQV9LRVkpO1xuICAgICAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgICAgaWYgKCEkJCQxKHBhcmVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICQkJDEuY29udGFpbnMocGFyZW50LCBldmVudC50YXJnZXQpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICAkJCQxKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cblxuICAgICAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAkJCQxKGRyb3Bkb3duTWVudSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuICAgICAgICAgICQkJDEocGFyZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVykudHJpZ2dlcigkJCQxLkV2ZW50KEV2ZW50LkhJRERFTiwgcmVsYXRlZFRhcmdldCkpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50O1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgcGFyZW50ID0gJCQkMShzZWxlY3RvcilbMF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFyZW50IHx8IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5cblxuICAgICAgRHJvcGRvd24uX2RhdGFBcGlLZXlkb3duSGFuZGxlciA9IGZ1bmN0aW9uIF9kYXRhQXBpS2V5ZG93bkhhbmRsZXIoZXZlbnQpIHtcbiAgICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgICAvLyAgLSBBbmQgbm90IGEga2V5IGluIFJFR0VYUF9LRVlET1dOID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgICAgLy8gSWYgaW5wdXQvdGV4dGFyZWE6XG4gICAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAgIC8vICAtIElmIGtleSBpcyBvdGhlciB0aGFuIGVzY2FwZVxuICAgICAgICAvLyAgICAtIElmIGtleSBpcyBub3QgdXAgb3IgZG93biA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgPyBldmVudC53aGljaCA9PT0gU1BBQ0VfS0VZQ09ERSB8fCBldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgJiYgKGV2ZW50LndoaWNoICE9PSBBUlJPV19ET1dOX0tFWUNPREUgJiYgZXZlbnQud2hpY2ggIT09IEFSUk9XX1VQX0tFWUNPREUgfHwgJCQkMShldmVudC50YXJnZXQpLmNsb3Nlc3QoU2VsZWN0b3IuTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICQkJDEodGhpcykuaGFzQ2xhc3MoQ2xhc3NOYW1lLkRJU0FCTEVEKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgICAgdmFyIGlzQWN0aXZlID0gJCQkMShwYXJlbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlICYmIChldmVudC53aGljaCAhPT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IFNQQUNFX0tFWUNPREUpIHx8IGlzQWN0aXZlICYmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUpKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSBFU0NBUEVfS0VZQ09ERSkge1xuICAgICAgICAgICAgdmFyIHRvZ2dsZSA9ICQkJDEocGFyZW50KS5maW5kKFNlbGVjdG9yLkRBVEFfVE9HR0xFKVswXTtcbiAgICAgICAgICAgICQkJDEodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICQkJDEodGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXRlbXMgPSAkJCQxKHBhcmVudCkuZmluZChTZWxlY3Rvci5WSVNJQkxFX0lURU1TKS5nZXQoKTtcblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpO1xuXG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfVVBfS0VZQ09ERSAmJiBpbmRleCA+IDApIHtcbiAgICAgICAgICAvLyBVcFxuICAgICAgICAgIGluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX0RPV05fS0VZQ09ERSAmJiBpbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAvLyBEb3duXG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcbiAgICAgIH07XG5cbiAgICAgIF9jcmVhdGVDbGFzcyhEcm9wZG93biwgbnVsbCwgW3tcbiAgICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gRHJvcGRvd247XG4gICAgfSgpO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEoZG9jdW1lbnQpLm9uKEV2ZW50LktFWURPV05fREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5LRVlET1dOX0RBVEFfQVBJLCBTZWxlY3Rvci5NRU5VLCBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSArIFwiIFwiICsgRXZlbnQuS0VZVVBfREFUQV9BUEksIERyb3Bkb3duLl9jbGVhck1lbnVzKS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0aGlzKSwgJ3RvZ2dsZScpO1xuICAgIH0pLm9uKEV2ZW50LkNMSUNLX0RBVEFfQVBJLCBTZWxlY3Rvci5GT1JNX0NISUxELCBmdW5jdGlvbiAoZSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBqUXVlcnlcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuICAgICQkJDEuZm5bTkFNRV0gPSBEcm9wZG93bi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIERyb3Bkb3duO1xuICB9KCQsIFBvcHBlcik7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogbW9kYWwuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdtb2RhbCc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjAnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5tb2RhbCc7XG4gICAgdmFyIEVWRU5UX0tFWSA9IFwiLlwiICsgREFUQV9LRVk7XG4gICAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBFU0NBUEVfS0VZQ09ERSA9IDI3OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBFc2NhcGUgKEVzYykga2V5XG5cbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgICBmb2N1czogdHJ1ZSxcbiAgICAgIHNob3c6IHRydWVcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIGJhY2tkcm9wOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICAgIHNob3c6ICdib29sZWFuJ1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIFJFU0laRTogXCJyZXNpemVcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RJU01JU1M6IFwiY2xpY2suZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgS0VZRE9XTl9ESVNNSVNTOiBcImtleWRvd24uZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VVUF9ESVNNSVNTOiBcIm1vdXNldXAuZGlzbWlzc1wiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VET1dOX0RJU01JU1M6IFwibW91c2Vkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBTQ1JPTExCQVJfTUVBU1VSRVI6ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZScsXG4gICAgICBCQUNLRFJPUDogJ21vZGFsLWJhY2tkcm9wJyxcbiAgICAgIE9QRU46ICdtb2RhbC1vcGVuJyxcbiAgICAgIEZBREU6ICdmYWRlJyxcbiAgICAgIFNIT1c6ICdzaG93J1xuICAgIH07XG4gICAgdmFyIFNlbGVjdG9yID0ge1xuICAgICAgRElBTE9HOiAnLm1vZGFsLWRpYWxvZycsXG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJyxcbiAgICAgIERBVEFfRElTTUlTUzogJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsXG4gICAgICBGSVhFRF9DT05URU5UOiAnLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcCcsXG4gICAgICBTVElDS1lfQ09OVEVOVDogJy5zdGlja3ktdG9wJyxcbiAgICAgIE5BVkJBUl9UT0dHTEVSOiAnLm5hdmJhci10b2dnbGVyJ1xuICAgICAgLyoqXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqIENsYXNzIERlZmluaXRpb25cbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICovXG5cbiAgICB9O1xuXG4gICAgdmFyIE1vZGFsID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fZGlhbG9nID0gJCQkMShlbGVtZW50KS5maW5kKFNlbGVjdG9yLkRJQUxPRylbMF07XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNTaG93biA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gMDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAgIC8vIFB1YmxpY1xuICAgICAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZShyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3cocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgdGhpcy5faXNTaG93bikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudChFdmVudC5TSE9XLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldFxuICAgICAgICB9KTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24gfHwgc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNTaG93biA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fY2hlY2tTY3JvbGxiYXIoKTtcblxuICAgICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICB0aGlzLl9hZGp1c3REaWFsb2coKTtcblxuICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKENsYXNzTmFtZS5PUEVOKTtcblxuICAgICAgICB0aGlzLl9zZXRFc2NhcGVFdmVudCgpO1xuXG4gICAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBTZWxlY3Rvci5EQVRBX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5oaWRlKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICQkJDEodGhpcy5fZGlhbG9nKS5vbihFdmVudC5NT1VTRURPV05fRElTTUlTUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLm9uZShFdmVudC5NT1VTRVVQX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCQkJDEoZXZlbnQudGFyZ2V0KS5pcyhfdGhpcy5fZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGV2ZW50KSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNUcmFuc2l0aW9uaW5nIHx8ICF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuSElERSk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uID0gJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0RXNjYXBlRXZlbnQoKTtcblxuICAgICAgICB0aGlzLl9zZXRSZXNpemVFdmVudCgpO1xuXG4gICAgICAgICQkJDEoZG9jdW1lbnQpLm9mZihFdmVudC5GT0NVU0lOKTtcbiAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub2ZmKEV2ZW50LkNMSUNLX0RJU01JU1MpO1xuICAgICAgICAkJCQxKHRoaXMuX2RpYWxvZykub2ZmKEV2ZW50Lk1PVVNFRE9XTl9ESVNNSVNTKTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5faGlkZU1vZGFsKGV2ZW50KTtcbiAgICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2hpZGVNb2RhbCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgICQkJDEod2luZG93LCBkb2N1bWVudCwgdGhpcy5fZWxlbWVudCwgdGhpcy5fYmFja2Ryb3ApLm9mZihFVkVOVF9LRVkpO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGlhbG9nID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgICB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAgICAgdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgPSBudWxsO1xuICAgICAgICB0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSBudWxsO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgICBjb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBEZWZhdWx0LCBjb25maWcpO1xuICAgICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FLCBjb25maWcsIERlZmF1bHRUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2hvd0VsZW1lbnQgPSBmdW5jdGlvbiBfc2hvd0VsZW1lbnQocmVsYXRlZFRhcmdldCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9ICQkJDEodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuXG4gICAgICAgIGlmICghdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlIHx8IHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAvLyBEb24ndCBtb3ZlIG1vZGFsJ3MgRE9NIHBvc2l0aW9uXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zY3JvbGxUb3AgPSAwO1xuXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKENsYXNzTmFtZS5TSE9XKTtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgdGhpcy5fZW5mb3JjZUZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPV04sIHtcbiAgICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB0cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiB0cmFuc2l0aW9uQ29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKF90aGlzMy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgICAgICBfdGhpczMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuICAgICAgICAgICQkJDEoX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKHNob3duRXZlbnQpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICAgJCQkMSh0aGlzLl9kaWFsb2cpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCB0cmFuc2l0aW9uQ29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgICAgJCQkMShkb2N1bWVudCkub2ZmKEV2ZW50LkZPQ1VTSU4pIC8vIEd1YXJkIGFnYWluc3QgaW5maW5pdGUgZm9jdXMgbG9vcFxuICAgICAgICAub24oRXZlbnQuRk9DVVNJTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM0Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJCQkMShfdGhpczQuX2VsZW1lbnQpLmhhcyhldmVudC50YXJnZXQpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgX3RoaXM0Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2V0RXNjYXBlRXZlbnQgPSBmdW5jdGlvbiBfc2V0RXNjYXBlRXZlbnQoKSB7XG4gICAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc1Nob3duICYmIHRoaXMuX2NvbmZpZy5rZXlib2FyZCkge1xuICAgICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkub24oRXZlbnQuS0VZRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgICBfdGhpczUuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vZmYoRXZlbnQuS0VZRE9XTl9ESVNNSVNTKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9zZXRSZXNpemVFdmVudCA9IGZ1bmN0aW9uIF9zZXRSZXNpemVFdmVudCgpIHtcbiAgICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuUkVTSVpFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczYuaGFuZGxlVXBkYXRlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJCQxKHdpbmRvdykub2ZmKEV2ZW50LlJFU0laRSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5faGlkZU1vZGFsID0gZnVuY3Rpb24gX2hpZGVNb2RhbCgpIHtcbiAgICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsIHRydWUpO1xuXG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuT1BFTik7XG5cbiAgICAgICAgICBfdGhpczcuX3Jlc2V0QWRqdXN0bWVudHMoKTtcblxuICAgICAgICAgIF90aGlzNy5fcmVzZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICAgICQkJDEoX3RoaXM3Ll9lbGVtZW50KS50cmlnZ2VyKEV2ZW50LkhJRERFTik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9yZW1vdmVCYWNrZHJvcCA9IGZ1bmN0aW9uIF9yZW1vdmVCYWNrZHJvcCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3Nob3dCYWNrZHJvcCA9IGZ1bmN0aW9uIF9zaG93QmFja2Ryb3AoY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIF90aGlzOCA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGFuaW1hdGUgPSAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSA/IENsYXNzTmFtZS5GQURFIDogJyc7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgICAgdGhpcy5fYmFja2Ryb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc05hbWUgPSBDbGFzc05hbWUuQkFDS0RST1A7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0ZSkge1xuICAgICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoYW5pbWF0ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgJCQkMSh0aGlzLl9lbGVtZW50KS5vbihFdmVudC5DTElDS19ESVNNSVNTLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChfdGhpczguX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgICAgX3RoaXM4Ll9pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGV2ZW50LnRhcmdldCAhPT0gZXZlbnQuY3VycmVudFRhcmdldCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChfdGhpczguX2NvbmZpZy5iYWNrZHJvcCA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgICAgICAgX3RoaXM4Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBfdGhpczguaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2JhY2tkcm9wKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkJCQxKHRoaXMuX2JhY2tkcm9wKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7XG5cbiAgICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBiYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fYmFja2Ryb3ApO1xuICAgICAgICAgICQkJDEodGhpcy5fYmFja2Ryb3ApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjYWxsYmFjaykuZW11bGF0ZVRyYW5zaXRpb25FbmQoYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9pc1Nob3duICYmIHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgICBfdGhpczguX3JlbW92ZUJhY2tkcm9wKCk7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAoJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICAgIHZhciBfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTtcblxuICAgICAgICAgICAgJCQkMSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFja1JlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgIC8vIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG4gICAgICAvLyB0b2RvIChmYXQpOiB0aGVzZSBzaG91bGQgcHJvYmFibHkgYmUgcmVmYWN0b3JlZCBvdXQgb2YgbW9kYWwuanNcbiAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4gICAgICBfcHJvdG8uX2FkanVzdERpYWxvZyA9IGZ1bmN0aW9uIF9hZGp1c3REaWFsb2coKSB7XG4gICAgICAgIHZhciBpc01vZGFsT3ZlcmZsb3dpbmcgPSB0aGlzLl9lbGVtZW50LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiBpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcgJiYgIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fcmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJyc7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJyc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2NoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gX2NoZWNrU2Nyb2xsYmFyKCkge1xuICAgICAgICB2YXIgcmVjdCA9IGRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gcmVjdC5sZWZ0ICsgcmVjdC5yaWdodCA8IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IHRoaXMuX2dldFNjcm9sbGJhcldpZHRoKCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX3NldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxiYXIoKSB7XG4gICAgICAgIHZhciBfdGhpczkgPSB0aGlzO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAgIC8vIE5vdGU6IERPTU5vZGUuc3R5bGUucGFkZGluZ1JpZ2h0IHJldHVybnMgdGhlIGFjdHVhbCB2YWx1ZSBvciAnJyBpZiBub3Qgc2V0XG4gICAgICAgICAgLy8gICB3aGlsZSAkKERPTU5vZGUpLmNzcygncGFkZGluZy1yaWdodCcpIHJldHVybnMgdGhlIGNhbGN1bGF0ZWQgdmFsdWUgb3IgMCBpZiBub3Qgc2V0XG4gICAgICAgICAgLy8gQWRqdXN0IGZpeGVkIGNvbnRlbnQgcGFkZGluZ1xuICAgICAgICAgICQkJDEoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gJCQkMShlbGVtZW50KVswXS5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgICB2YXIgY2FsY3VsYXRlZFBhZGRpbmcgPSAkJCQxKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczkuX3Njcm9sbGJhcldpZHRoICsgXCJweFwiKTtcbiAgICAgICAgICB9KTsgLy8gQWRqdXN0IHN0aWNreSBjb250ZW50IG1hcmdpblxuXG4gICAgICAgICAgJCQkMShTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciBhY3R1YWxNYXJnaW4gPSAkJCQxKGVsZW1lbnQpWzBdLnN0eWxlLm1hcmdpblJpZ2h0O1xuICAgICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgICAgICAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcsIGFjdHVhbE1hcmdpbikuY3NzKCdtYXJnaW4tcmlnaHQnLCBwYXJzZUZsb2F0KGNhbGN1bGF0ZWRNYXJnaW4pIC0gX3RoaXM5Ll9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgICAgfSk7IC8vIEFkanVzdCBuYXZiYXItdG9nZ2xlciBtYXJnaW5cblxuICAgICAgICAgICQkJDEoU2VsZWN0b3IuTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgYWN0dWFsTWFyZ2luID0gJCQkMShlbGVtZW50KVswXS5zdHlsZS5tYXJnaW5SaWdodDtcbiAgICAgICAgICAgIHZhciBjYWxjdWxhdGVkTWFyZ2luID0gJCQkMShlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcpO1xuICAgICAgICAgICAgJCQkMShlbGVtZW50KS5kYXRhKCdtYXJnaW4tcmlnaHQnLCBhY3R1YWxNYXJnaW4pLmNzcygnbWFyZ2luLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkTWFyZ2luKSArIF90aGlzOS5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgICB2YXIgYWN0dWFsUGFkZGluZyA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0O1xuICAgICAgICAgIHZhciBjYWxjdWxhdGVkUGFkZGluZyA9ICQkJDEoZG9jdW1lbnQuYm9keSkuY3NzKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICAgJCQkMShkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyB0aGlzLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fcmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiBfcmVzZXRTY3JvbGxiYXIoKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICAgICQkJDEoU2VsZWN0b3IuRklYRURfQ09OVEVOVCkuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgcGFkZGluZyA9ICQkJDEoZWxlbWVudCkuZGF0YSgncGFkZGluZy1yaWdodCcpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgJCQkMShlbGVtZW50KS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBwYWRkaW5nKS5yZW1vdmVEYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTsgLy8gUmVzdG9yZSBzdGlja3kgY29udGVudCBhbmQgbmF2YmFyLXRvZ2dsZXIgbWFyZ2luXG5cbiAgICAgICAgJCQkMShTZWxlY3Rvci5TVElDS1lfQ09OVEVOVCArIFwiLCBcIiArIFNlbGVjdG9yLk5BVkJBUl9UT0dHTEVSKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBtYXJnaW4gPSAkJCQxKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBtYXJnaW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAkJCQxKGVsZW1lbnQpLmNzcygnbWFyZ2luLXJpZ2h0JywgbWFyZ2luKS5yZW1vdmVEYXRhKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pOyAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuXG4gICAgICAgIHZhciBwYWRkaW5nID0gJCQkMShkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYWRkaW5nICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFkZGluZykucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgICAvLyB0aHggZC53YWxzaFxuICAgICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDbGFzc05hbWUuU0NST0xMQkFSX01FQVNVUkVSO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcm9sbERpdik7XG4gICAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpO1xuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGg7XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcsIHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSBfb2JqZWN0U3ByZWFkKHt9LCBNb2RhbC5EZWZhdWx0LCAkJCQxKHRoaXMpLmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnKTtcblxuICAgICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGFbY29uZmlnXShyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgICAgZGF0YS5zaG93KHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoTW9kYWwsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBNb2RhbDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cblxuXG4gICAgJCQkMShkb2N1bWVudCkub24oRXZlbnQuQ0xJQ0tfREFUQV9BUEksIFNlbGVjdG9yLkRBVEFfVE9HR0xFLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczEwID0gdGhpcztcblxuICAgICAgdmFyIHRhcmdldDtcbiAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIHRhcmdldCA9ICQkJDEoc2VsZWN0b3IpWzBdO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29uZmlnID0gJCQkMSh0YXJnZXQpLmRhdGEoREFUQV9LRVkpID8gJ3RvZ2dsZScgOiBfb2JqZWN0U3ByZWFkKHt9LCAkJCQxKHRhcmdldCkuZGF0YSgpLCAkJCQxKHRoaXMpLmRhdGEoKSk7XG5cbiAgICAgIGlmICh0aGlzLnRhZ05hbWUgPT09ICdBJyB8fCB0aGlzLnRhZ05hbWUgPT09ICdBUkVBJykge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgJHRhcmdldCA9ICQkJDEodGFyZ2V0KS5vbmUoRXZlbnQuU0hPVywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgLy8gT25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICR0YXJnZXQub25lKEV2ZW50LkhJRERFTiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICgkJCQxKF90aGlzMTApLmlzKCc6dmlzaWJsZScpKSB7XG4gICAgICAgICAgICBfdGhpczEwLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJCQkMSh0YXJnZXQpLCBjb25maWcsIHRoaXMpO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gICAgJCQkMS5mbltOQU1FXSA9IE1vZGFsLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG4gICAgJCQkMS5mbltOQU1FXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgJCQkMS5mbltOQU1FXSA9IEpRVUVSWV9OT19DT05GTElDVDtcbiAgICAgIHJldHVybiBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gTW9kYWw7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogdG9vbHRpcC5qc1xuICAgKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uICgkJCQxKSB7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogQ29uc3RhbnRzXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG4gICAgdmFyIE5BTUUgPSAndG9vbHRpcCc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjAnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy50b29sdGlwJztcbiAgICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgQ0xBU1NfUFJFRklYID0gJ2JzLXRvb2x0aXAnO1xuICAgIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICAgICAgdGVtcGxhdGU6ICdzdHJpbmcnLFxuICAgICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICAgIHRyaWdnZXI6ICdzdHJpbmcnLFxuICAgICAgZGVsYXk6ICcobnVtYmVyfG9iamVjdCknLFxuICAgICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgICAgc2VsZWN0b3I6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICAgIHBsYWNlbWVudDogJyhzdHJpbmd8ZnVuY3Rpb24pJyxcbiAgICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nKScsXG4gICAgICBjb250YWluZXI6ICcoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbiknLFxuICAgICAgZmFsbGJhY2tQbGFjZW1lbnQ6ICcoc3RyaW5nfGFycmF5KScsXG4gICAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknXG4gICAgfTtcbiAgICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICAgIEFVVE86ICdhdXRvJyxcbiAgICAgIFRPUDogJ3RvcCcsXG4gICAgICBSSUdIVDogJ3JpZ2h0JyxcbiAgICAgIEJPVFRPTTogJ2JvdHRvbScsXG4gICAgICBMRUZUOiAnbGVmdCdcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0ID0ge1xuICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG4gICAgICB0aXRsZTogJycsXG4gICAgICBkZWxheTogMCxcbiAgICAgIGh0bWw6IGZhbHNlLFxuICAgICAgc2VsZWN0b3I6IGZhbHNlLFxuICAgICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICAgIG9mZnNldDogMCxcbiAgICAgIGNvbnRhaW5lcjogZmFsc2UsXG4gICAgICBmYWxsYmFja1BsYWNlbWVudDogJ2ZsaXAnLFxuICAgICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnXG4gICAgfTtcbiAgICB2YXIgSG92ZXJTdGF0ZSA9IHtcbiAgICAgIFNIT1c6ICdzaG93JyxcbiAgICAgIE9VVDogJ291dCdcbiAgICB9O1xuICAgIHZhciBFdmVudCA9IHtcbiAgICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZLFxuICAgICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZLFxuICAgICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZLFxuICAgICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWRcIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVksXG4gICAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0XCIgKyBFVkVOVF9LRVksXG4gICAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZXG4gICAgfTtcbiAgICB2YXIgQ2xhc3NOYW1lID0ge1xuICAgICAgRkFERTogJ2ZhZGUnLFxuICAgICAgU0hPVzogJ3Nob3cnXG4gICAgfTtcbiAgICB2YXIgU2VsZWN0b3IgPSB7XG4gICAgICBUT09MVElQOiAnLnRvb2x0aXAnLFxuICAgICAgVE9PTFRJUF9JTk5FUjogJy50b29sdGlwLWlubmVyJyxcbiAgICAgIEFSUk9XOiAnLmFycm93J1xuICAgIH07XG4gICAgdmFyIFRyaWdnZXIgPSB7XG4gICAgICBIT1ZFUjogJ2hvdmVyJyxcbiAgICAgIEZPQ1VTOiAnZm9jdXMnLFxuICAgICAgQ0xJQ0s6ICdjbGljaycsXG4gICAgICBNQU5VQUw6ICdtYW51YWwnXG4gICAgICAvKipcbiAgICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKi9cblxuICAgIH07XG5cbiAgICB2YXIgVG9vbHRpcCA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFRvb2x0aXAoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIFBvcHBlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXAgdG9vbHRpcHMgcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZyknKTtcbiAgICAgICAgfSAvLyBwcml2YXRlXG5cblxuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl90aW1lb3V0ID0gMDtcbiAgICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyID0ge307XG4gICAgICAgIHRoaXMuX3BvcHBlciA9IG51bGw7IC8vIFByb3RlY3RlZFxuXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICAgIHRoaXMudGlwID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBUb29sdGlwLnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8uZW5hYmxlID0gZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSB0cnVlO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmRpc2FibGUgPSBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgICAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by50b2dnbGVFbmFibGVkID0gZnVuY3Rpb24gdG9nZ2xlRW5hYmxlZCgpIHtcbiAgICAgICAgdGhpcy5faXNFbmFibGVkID0gIXRoaXMuX2lzRW5hYmxlZDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by50b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUoZXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgICAgdmFyIGNvbnRleHQgPSAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrID0gIWNvbnRleHQuX2FjdGl2ZVRyaWdnZXIuY2xpY2s7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGV4dC5fbGVhdmUobnVsbCwgY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykpIHtcbiAgICAgICAgICAgIHRoaXMuX2xlYXZlKG51bGwsIHRoaXMpO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fZW50ZXIobnVsbCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgICAkJCQxLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKTtcbiAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAgICQkJDEodGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vZmYoJ2hpZGUuYnMubW9kYWwnKTtcblxuICAgICAgICBpZiAodGhpcy50aXApIHtcbiAgICAgICAgICAkJCQxKHRoaXMudGlwKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gICAgICAgIHRoaXMudGlwID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoJCQkMSh0aGlzLmVsZW1lbnQpLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvd0V2ZW50ID0gJCQkMS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpO1xuXG4gICAgICAgIGlmICh0aGlzLmlzV2l0aENvbnRlbnQoKSAmJiB0aGlzLl9pc0VuYWJsZWQpIHtcbiAgICAgICAgICAkJCQxKHRoaXMuZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuICAgICAgICAgIHZhciBpc0luVGhlRG9tID0gJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuZWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpIHx8ICFpc0luVGhlRG9tKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgICAgdGlwLnNldEF0dHJpYnV0ZSgnaWQnLCB0aXBJZCk7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1kZXNjcmliZWRieScsIHRpcElkKTtcbiAgICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICAgIGlmICh0aGlzLmNvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgICQkJDEodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUuRkFERSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgICB2YXIgYXR0YWNobWVudCA9IHRoaXMuX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KTtcblxuICAgICAgICAgIHRoaXMuYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpO1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSB0aGlzLmNvbmZpZy5jb250YWluZXIgPT09IGZhbHNlID8gZG9jdW1lbnQuYm9keSA6ICQkJDEodGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgICAgICAkJCQxKHRpcCkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLCB0aGlzKTtcblxuICAgICAgICAgIGlmICghJCQkMS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMudGlwKSkge1xuICAgICAgICAgICAgJCQkMSh0aXApLmFwcGVuZFRvKGNvbnRhaW5lcik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJCQkMSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5JTlNFUlRFRCk7XG4gICAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcih0aGlzLmVsZW1lbnQsIHRpcCwge1xuICAgICAgICAgICAgcGxhY2VtZW50OiBhdHRhY2htZW50LFxuICAgICAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgICAgIG9mZnNldDoge1xuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5jb25maWcub2Zmc2V0XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZsaXA6IHtcbiAgICAgICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgYXJyb3c6IHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBTZWxlY3Rvci5BUlJPV1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHtcbiAgICAgICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZShkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhLm9yaWdpbmFsUGxhY2VtZW50ICE9PSBkYXRhLnBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSkge1xuICAgICAgICAgICAgICBfdGhpcy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgICQkJDEodGlwKS5hZGRDbGFzcyhDbGFzc05hbWUuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHRvIHRoZSBib2R5J3MgaW1tZWRpYXRlIGNoaWxkcmVuO1xuICAgICAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cbiAgICAgICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAkJCQxKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub24oJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICBpZiAoX3RoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICBfdGhpcy5fZml4VHJhbnNpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcHJldkhvdmVyU3RhdGUgPSBfdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgICAgICAgIF90aGlzLl9ob3ZlclN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgICQkJDEoX3RoaXMuZWxlbWVudCkudHJpZ2dlcihfdGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTik7XG5cbiAgICAgICAgICAgIGlmIChwcmV2SG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2xlYXZlKG51bGwsIF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCQkJDEodGhpcy50aXApLmhhc0NsYXNzKENsYXNzTmFtZS5GQURFKSkge1xuICAgICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy50aXApO1xuICAgICAgICAgICAgJCQkMSh0aGlzLnRpcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdmFyIGhpZGVFdmVudCA9ICQkJDEuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMyLl9ob3ZlclN0YXRlICE9PSBIb3ZlclN0YXRlLlNIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHRpcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRpcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMyLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgICBfdGhpczIuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtZGVzY3JpYmVkYnknKTtcblxuICAgICAgICAgICQkJDEoX3RoaXMyLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMyLmNvbnN0cnVjdG9yLkV2ZW50LkhJRERFTik7XG5cbiAgICAgICAgICBpZiAoX3RoaXMyLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzMi5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgICQkJDEodGhpcy5lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEodGlwKS5yZW1vdmVDbGFzcyhDbGFzc05hbWUuU0hPVyk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSByZW1vdmUgdGhlIGV4dHJhXG4gICAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICQkJDEoZG9jdW1lbnQuYm9keSkuY2hpbGRyZW4oKS5vZmYoJ21vdXNlb3ZlcicsIG51bGwsICQkJDEubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3RpdmVUcmlnZ2VyW1RyaWdnZXIuQ0xJQ0tdID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVHJpZ2dlci5GT0NVU10gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlcltUcmlnZ2VyLkhPVkVSXSA9IGZhbHNlO1xuXG4gICAgICAgIGlmICgkJCQxKHRoaXMudGlwKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSkpIHtcbiAgICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aXApO1xuICAgICAgICAgICQkJDEodGlwKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gUHJvdGVjdGVkXG5cblxuICAgICAgX3Byb3RvLmlzV2l0aENvbnRlbnQgPSBmdW5jdGlvbiBpc1dpdGhDb250ZW50KCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAgICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU2VsZWN0b3IuVE9PTFRJUF9JTk5FUiksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRFbGVtZW50Q29udGVudCA9IGZ1bmN0aW9uIHNldEVsZW1lbnRDb250ZW50KCRlbGVtZW50LCBjb250ZW50KSB7XG4gICAgICAgIHZhciBodG1sID0gdGhpcy5jb25maWcuaHRtbDtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdvYmplY3QnICYmIChjb250ZW50Lm5vZGVUeXBlIHx8IGNvbnRlbnQuanF1ZXJ5KSkge1xuICAgICAgICAgIC8vIENvbnRlbnQgaXMgYSBET00gbm9kZSBvciBhIGpRdWVyeVxuICAgICAgICAgIGlmIChodG1sKSB7XG4gICAgICAgICAgICBpZiAoISQkJDEoY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICRlbGVtZW50LmVtcHR5KCkuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkZWxlbWVudC50ZXh0KCQkJDEoY29udGVudCkudGV4dCgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnRbaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10oY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5nZXRUaXRsZSA9IGZ1bmN0aW9uIGdldFRpdGxlKCkge1xuICAgICAgICB2YXIgdGl0bGUgPSB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJyk7XG5cbiAgICAgICAgaWYgKCF0aXRsZSkge1xuICAgICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgICB9OyAvLyBQcml2YXRlXG5cblxuICAgICAgX3Byb3RvLl9nZXRBdHRhY2htZW50ID0gZnVuY3Rpb24gX2dldEF0dGFjaG1lbnQocGxhY2VtZW50KSB7XG4gICAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fc2V0TGlzdGVuZXJzID0gZnVuY3Rpb24gX3NldExpc3RlbmVycygpIHtcbiAgICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRyaWdnZXJzID0gdGhpcy5jb25maWcudHJpZ2dlci5zcGxpdCgnICcpO1xuICAgICAgICB0cmlnZ2Vycy5mb3JFYWNoKGZ1bmN0aW9uICh0cmlnZ2VyKSB7XG4gICAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAgICQkJDEoX3RoaXMzLmVsZW1lbnQpLm9uKF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgX3RoaXMzLmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMudG9nZ2xlKGV2ZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVHJpZ2dlci5NQU5VQUwpIHtcbiAgICAgICAgICAgIHZhciBldmVudEluID0gdHJpZ2dlciA9PT0gVHJpZ2dlci5IT1ZFUiA/IF90aGlzMy5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSIDogX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU47XG4gICAgICAgICAgICB2YXIgZXZlbnRPdXQgPSB0cmlnZ2VyID09PSBUcmlnZ2VyLkhPVkVSID8gX3RoaXMzLmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkUgOiBfdGhpczMuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNPVVQ7XG4gICAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5vbihldmVudEluLCBfdGhpczMuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5fZW50ZXIoZXZlbnQpO1xuICAgICAgICAgICAgfSkub24oZXZlbnRPdXQsIF90aGlzMy5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMzLl9sZWF2ZShldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkJCQxKF90aGlzMy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vbignaGlkZS5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczMuaGlkZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuc2VsZWN0b3IpIHtcbiAgICAgICAgICB0aGlzLmNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuY29uZmlnLCB7XG4gICAgICAgICAgICB0cmlnZ2VyOiAnbWFudWFsJyxcbiAgICAgICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XG4gICAgICAgIHZhciB0aXRsZVR5cGUgPSB0eXBlb2YgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0aXRsZScpIHx8IHRpdGxlVHlwZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgndGl0bGUnLCAnJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZW50ZXIgPSBmdW5jdGlvbiBfZW50ZXIoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGRhdGFLZXkgPSB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZO1xuICAgICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkJCQxKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAgICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3VzaW4nID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgkJCQxKGNvbnRleHQuZ2V0VGlwRWxlbWVudCgpKS5oYXNDbGFzcyhDbGFzc05hbWUuU0hPVykgfHwgY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhvdmVyU3RhdGUuU0hPVztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjbGVhclRpbWVvdXQoY29udGV4dC5fdGltZW91dCk7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIb3ZlclN0YXRlLlNIT1c7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuc2hvdykge1xuICAgICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5TSE9XKSB7XG4gICAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGNvbnRleHQuY29uZmlnLmRlbGF5LnNob3cpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9sZWF2ZSA9IGZ1bmN0aW9uIF9sZWF2ZShldmVudCwgY29udGV4dCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICQkJDEoZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250ZXh0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IoZXZlbnQuY3VycmVudFRhcmdldCwgdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSk7XG4gICAgICAgICAgJCQkMShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlcltldmVudC50eXBlID09PSAnZm9jdXNvdXQnID8gVHJpZ2dlci5GT0NVUyA6IFRyaWdnZXIuSE9WRVJdID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgICBjb250ZXh0Ll9ob3ZlclN0YXRlID0gSG92ZXJTdGF0ZS5PVVQ7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoY29udGV4dC5faG92ZXJTdGF0ZSA9PT0gSG92ZXJTdGF0ZS5PVVQpIHtcbiAgICAgICAgICAgIGNvbnRleHQuaGlkZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2lzV2l0aEFjdGl2ZVRyaWdnZXIgPSBmdW5jdGlvbiBfaXNXaXRoQWN0aXZlVHJpZ2dlcigpIHtcbiAgICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRyaWdnZXJbdHJpZ2dlcl0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgICAgY29uZmlnID0gX29iamVjdFNwcmVhZCh7fSwgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LCAkJCQxKHRoaXMuZWxlbWVudCkuZGF0YSgpLCBjb25maWcpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGNvbmZpZy5kZWxheSA9IHtcbiAgICAgICAgICAgIHNob3c6IGNvbmZpZy5kZWxheSxcbiAgICAgICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb25maWcudGl0bGUgPSBjb25maWcudGl0bGUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uZmlnLmNvbnRlbnQgPSBjb25maWcuY29udGVudC50b1N0cmluZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fZ2V0RGVsZWdhdGVDb25maWcgPSBmdW5jdGlvbiBfZ2V0RGVsZWdhdGVDb25maWcoKSB7XG4gICAgICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcpIHtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jb25maWcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgICAgICBjb25maWdba2V5XSA9IHRoaXMuY29uZmlnW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgICB2YXIgJHRpcCA9ICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgICB2YXIgdGFiQ2xhc3MgPSAkdGlwLmF0dHIoJ2NsYXNzJykubWF0Y2goQlNDTFNfUFJFRklYX1JFR0VYKTtcblxuICAgICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZGF0YSkge1xuICAgICAgICB0aGlzLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3ModGhpcy5fZ2V0QXR0YWNobWVudChkYXRhLnBsYWNlbWVudCkpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9maXhUcmFuc2l0aW9uID0gZnVuY3Rpb24gX2ZpeFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgICAgaWYgKHRpcC5nZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JykgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAkJCQxKHRpcCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgICB0aGlzLmNvbmZpZy5hbmltYXRpb24gPSBpbml0Q29uZmlnQW5pbWF0aW9uO1xuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgVG9vbHRpcC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rpc3Bvc2V8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFRvb2x0aXAodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFRvb2x0aXAsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJOQU1FXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBOQU1FO1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gREFUQV9LRVk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBFdmVudDtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRVZFTlRfS0VZXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBFVkVOVF9LRVk7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEZWZhdWx0VHlwZTtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gVG9vbHRpcDtcbiAgICB9KCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEuZm5bTkFNRV0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFRvb2x0aXA7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oJCwgUG9wcGVyKTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC4xLjApOiBwb3BvdmVyLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKCQkJDEpIHtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBDb25zdGFudHNcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKi9cbiAgICB2YXIgTkFNRSA9ICdwb3BvdmVyJztcbiAgICB2YXIgVkVSU0lPTiA9ICc0LjEuMCc7XG4gICAgdmFyIERBVEFfS0VZID0gJ2JzLnBvcG92ZXInO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QgPSAkJCQxLmZuW05BTUVdO1xuICAgIHZhciBDTEFTU19QUkVGSVggPSAnYnMtcG9wb3Zlcic7XG4gICAgdmFyIEJTQ0xTX1BSRUZJWF9SRUdFWCA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCArIFwiXFxcXFMrXCIsICdnJyk7XG5cbiAgICB2YXIgRGVmYXVsdCA9IF9vYmplY3RTcHJlYWQoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgICAgdHJpZ2dlcjogJ2NsaWNrJyxcbiAgICAgIGNvbnRlbnQ6ICcnLFxuICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+JyArICc8ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj4nICsgJzxoMyBjbGFzcz1cInBvcG92ZXItaGVhZGVyXCI+PC9oMz4nICsgJzxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nXG4gICAgfSk7XG5cbiAgICB2YXIgRGVmYXVsdFR5cGUgPSBfb2JqZWN0U3ByZWFkKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgICBjb250ZW50OiAnKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKSdcbiAgICB9KTtcblxuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBGQURFOiAnZmFkZScsXG4gICAgICBTSE9XOiAnc2hvdydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIFRJVExFOiAnLnBvcG92ZXItaGVhZGVyJyxcbiAgICAgIENPTlRFTlQ6ICcucG9wb3Zlci1ib2R5J1xuICAgIH07XG4gICAgdmFyIEV2ZW50ID0ge1xuICAgICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVksXG4gICAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVksXG4gICAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZLFxuICAgICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSxcbiAgICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZLFxuICAgICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSxcbiAgICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZLFxuICAgICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVlcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBQb3BvdmVyID1cbiAgICAvKiNfX1BVUkVfXyovXG4gICAgZnVuY3Rpb24gKF9Ub29sdGlwKSB7XG4gICAgICBfaW5oZXJpdHNMb29zZShQb3BvdmVyLCBfVG9vbHRpcCk7XG5cbiAgICAgIGZ1bmN0aW9uIFBvcG92ZXIoKSB7XG4gICAgICAgIHJldHVybiBfVG9vbHRpcC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvdG8gPSBQb3BvdmVyLnByb3RvdHlwZTtcblxuICAgICAgLy8gT3ZlcnJpZGVzXG4gICAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5fZ2V0Q29udGVudCgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAgICQkJDEodGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCArIFwiLVwiICsgYXR0YWNobWVudCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZ2V0VGlwRWxlbWVudCA9IGZ1bmN0aW9uIGdldFRpcEVsZW1lbnQoKSB7XG4gICAgICAgIHRoaXMudGlwID0gdGhpcy50aXAgfHwgJCQkMSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF07XG4gICAgICAgIHJldHVybiB0aGlzLnRpcDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5zZXRDb250ZW50ID0gZnVuY3Rpb24gc2V0Q29udGVudCgpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTsgLy8gV2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuXG4gICAgICAgIHRoaXMuc2V0RWxlbWVudENvbnRlbnQoJHRpcC5maW5kKFNlbGVjdG9yLlRJVExFKSwgdGhpcy5nZXRUaXRsZSgpKTtcblxuICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb250ZW50ID0gY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCR0aXAuZmluZChTZWxlY3Rvci5DT05URU5UKSwgY29udGVudCk7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkZBREUgKyBcIiBcIiArIENsYXNzTmFtZS5TSE9XKTtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldENvbnRlbnQgPSBmdW5jdGlvbiBfZ2V0Q29udGVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgICAgdmFyICR0aXAgPSAkJCQxKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCk7XG5cbiAgICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkdGlwLnJlbW92ZUNsYXNzKHRhYkNsYXNzLmpvaW4oJycpKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVkpO1xuXG4gICAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChjb25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgICAkJCQxKHRoaXMpLmRhdGEoREFUQV9LRVksIGRhdGEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX2NyZWF0ZUNsYXNzKFBvcG92ZXIsIG51bGwsIFt7XG4gICAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAgIC8vIEdldHRlcnNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIFZFUlNJT047XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHQ7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIE5BTUU7XG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBEQVRBX0tFWTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRXZlbnRcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIEVWRU5UX0tFWTtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlO1xuICAgICAgICB9XG4gICAgICB9XSk7XG5cbiAgICAgIHJldHVybiBQb3BvdmVyO1xuICAgIH0oVG9vbHRpcCk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cblxuICAgICQkJDEuZm5bTkFNRV0gPSBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIFBvcG92ZXIuX2pRdWVyeUludGVyZmFjZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogc2Nyb2xsc3B5LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBTY3JvbGxTcHkgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENvbnN0YW50c1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIHZhciBOQU1FID0gJ3Njcm9sbHNweSc7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjAnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy5zY3JvbGxzcHknO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRGVmYXVsdCA9IHtcbiAgICAgIG9mZnNldDogMTAsXG4gICAgICBtZXRob2Q6ICdhdXRvJyxcbiAgICAgIHRhcmdldDogJydcbiAgICB9O1xuICAgIHZhciBEZWZhdWx0VHlwZSA9IHtcbiAgICAgIG9mZnNldDogJ251bWJlcicsXG4gICAgICBtZXRob2Q6ICdzdHJpbmcnLFxuICAgICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgICB9O1xuICAgIHZhciBFdmVudCA9IHtcbiAgICAgIEFDVElWQVRFOiBcImFjdGl2YXRlXCIgKyBFVkVOVF9LRVksXG4gICAgICBTQ1JPTEw6IFwic2Nyb2xsXCIgKyBFVkVOVF9LRVksXG4gICAgICBMT0FEX0RBVEFfQVBJOiBcImxvYWRcIiArIEVWRU5UX0tFWSArIERBVEFfQVBJX0tFWVxuICAgIH07XG4gICAgdmFyIENsYXNzTmFtZSA9IHtcbiAgICAgIERST1BET1dOX0lURU06ICdkcm9wZG93bi1pdGVtJyxcbiAgICAgIERST1BET1dOX01FTlU6ICdkcm9wZG93bi1tZW51JyxcbiAgICAgIEFDVElWRTogJ2FjdGl2ZSdcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERBVEFfU1BZOiAnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxcbiAgICAgIEFDVElWRTogJy5hY3RpdmUnLFxuICAgICAgTkFWX0xJU1RfR1JPVVA6ICcubmF2LCAubGlzdC1ncm91cCcsXG4gICAgICBOQVZfTElOS1M6ICcubmF2LWxpbmsnLFxuICAgICAgTkFWX0lURU1TOiAnLm5hdi1pdGVtJyxcbiAgICAgIExJU1RfSVRFTVM6ICcubGlzdC1ncm91cC1pdGVtJyxcbiAgICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcbiAgICAgIERST1BET1dOX0lURU1TOiAnLmRyb3Bkb3duLWl0ZW0nLFxuICAgICAgRFJPUERPV05fVE9HR0xFOiAnLmRyb3Bkb3duLXRvZ2dsZSdcbiAgICB9O1xuICAgIHZhciBPZmZzZXRNZXRob2QgPSB7XG4gICAgICBPRkZTRVQ6ICdvZmZzZXQnLFxuICAgICAgUE9TSVRJT046ICdwb3NpdGlvbidcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBTY3JvbGxTcHkgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX2NvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLk5BVl9MSU5LUyArIFwiLFwiICsgKHRoaXMuX2NvbmZpZy50YXJnZXQgKyBcIiBcIiArIFNlbGVjdG9yLkxJU1RfSVRFTVMgKyBcIixcIikgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU2VsZWN0b3IuRFJPUERPV05fSVRFTVMpO1xuICAgICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICAgIHRoaXMuX3RhcmdldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFdmVudC5TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy5fcHJvY2VzcyhldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgICB0aGlzLl9wcm9jZXNzKCk7XG4gICAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgICAgLy8gUHVibGljXG4gICAgICBfcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uIHJlZnJlc2goKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIHZhciBhdXRvTWV0aG9kID0gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gdGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3cgPyBPZmZzZXRNZXRob2QuT0ZGU0VUIDogT2Zmc2V0TWV0aG9kLlBPU0lUSU9OO1xuICAgICAgICB2YXIgb2Zmc2V0TWV0aG9kID0gdGhpcy5fY29uZmlnLm1ldGhvZCA9PT0gJ2F1dG8nID8gYXV0b01ldGhvZCA6IHRoaXMuX2NvbmZpZy5tZXRob2Q7XG4gICAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBPZmZzZXRNZXRob2QuUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSBbXTtcbiAgICAgICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgICAgdmFyIHRhcmdldHMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKHRoaXMuX3NlbGVjdG9yKSk7XG4gICAgICAgIHRhcmdldHMubWFwKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIHRhcmdldDtcbiAgICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAodGFyZ2V0U2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHRhcmdldCA9ICQkJDEodGFyZ2V0U2VsZWN0b3IpWzBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRCQ1IgPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgICAvLyBUT0RPIChmYXQpOiByZW1vdmUgc2tldGNoIHJlbGlhbmNlIG9uIGpRdWVyeSBwb3NpdGlvbi9vZmZzZXRcbiAgICAgICAgICAgICAgcmV0dXJuIFskJCQxKHRhcmdldClbb2Zmc2V0TWV0aG9kXSgpLnRvcCArIG9mZnNldEJhc2UsIHRhcmdldFNlbGVjdG9yXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICAgIH0pLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICBfdGhpczIuX29mZnNldHMucHVzaChpdGVtWzBdKTtcblxuICAgICAgICAgIF90aGlzMi5fdGFyZ2V0cy5wdXNoKGl0ZW1bMV0pO1xuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICAgJCQkMS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsIERBVEFfS0VZKTtcbiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vZmYoRVZFTlRfS0VZKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgICB0aGlzLl9zZWxlY3RvciA9IG51bGw7XG4gICAgICAgIHRoaXMuX29mZnNldHMgPSBudWxsO1xuICAgICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fYWN0aXZlVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gbnVsbDtcbiAgICAgIH07IC8vIFByaXZhdGVcblxuXG4gICAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZyA9IF9vYmplY3RTcHJlYWQoe30sIERlZmF1bHQsIGNvbmZpZyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIHZhciBpZCA9ICQkJDEoY29uZmlnLnRhcmdldCkuYXR0cignaWQnKTtcblxuICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIGlkID0gVXRpbC5nZXRVSUQoTkFNRSk7XG4gICAgICAgICAgICAkJCQxKGNvbmZpZy50YXJnZXQpLmF0dHIoJ2lkJywgaWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbmZpZy50YXJnZXQgPSBcIiNcIiArIGlkO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSwgY29uZmlnLCBEZWZhdWx0VHlwZSk7XG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB0aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3A7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbEhlaWdodCB8fCBNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCk7XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50ID09PSB3aW5kb3cgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiB0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkge1xuICAgICAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy5fZ2V0U2Nyb2xsVG9wKCkgKyB0aGlzLl9jb25maWcub2Zmc2V0O1xuXG4gICAgICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcblxuICAgICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zY3JvbGxIZWlnaHQgIT09IHNjcm9sbEhlaWdodCkge1xuICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNjcm9sbFRvcCA+PSBtYXhTY3JvbGwpIHtcbiAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0YXJnZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1swXSAmJiB0aGlzLl9vZmZzZXRzWzBdID4gMCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgICB0aGlzLl9jbGVhcigpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX29mZnNldHMubGVuZ3RoOyBpLS07KSB7XG4gICAgICAgICAgdmFyIGlzQWN0aXZlVGFyZ2V0ID0gdGhpcy5fYWN0aXZlVGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzW2ldICYmIHNjcm9sbFRvcCA+PSB0aGlzLl9vZmZzZXRzW2ldICYmICh0eXBlb2YgdGhpcy5fb2Zmc2V0c1tpICsgMV0gPT09ICd1bmRlZmluZWQnIHx8IHNjcm9sbFRvcCA8IHRoaXMuX29mZnNldHNbaSArIDFdKTtcblxuICAgICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKHRhcmdldCkge1xuICAgICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICB2YXIgcXVlcmllcyA9IHRoaXMuX3NlbGVjdG9yLnNwbGl0KCcsJyk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG5cblxuICAgICAgICBxdWVyaWVzID0gcXVlcmllcy5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGVjdG9yICsgXCJbZGF0YS10YXJnZXQ9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXSxcIiArIChzZWxlY3RvciArIFwiW2hyZWY9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXVwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciAkbGluayA9ICQkJDEocXVlcmllcy5qb2luKCcsJykpO1xuXG4gICAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDbGFzc05hbWUuRFJPUERPV05fSVRFTSkpIHtcbiAgICAgICAgICAkbGluay5jbG9zZXN0KFNlbGVjdG9yLkRST1BET1dOKS5maW5kKFNlbGVjdG9yLkRST1BET1dOX1RPR0dMRSkuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gU2V0IHRyaWdnZXJlZCBsaW5rIGFzIGFjdGl2ZVxuICAgICAgICAgICRsaW5rLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgICAgLy8gV2l0aCBib3RoIDx1bD4gYW5kIDxuYXY+IG1hcmt1cCBhIHBhcmVudCBpcyB0aGUgcHJldmlvdXMgc2libGluZyBvZiBhbnkgbmF2IGFuY2VzdG9yXG5cbiAgICAgICAgICAkbGluay5wYXJlbnRzKFNlbGVjdG9yLk5BVl9MSVNUX0dST1VQKS5wcmV2KFNlbGVjdG9yLk5BVl9MSU5LUyArIFwiLCBcIiArIFNlbGVjdG9yLkxJU1RfSVRFTVMpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpOyAvLyBIYW5kbGUgc3BlY2lhbCBjYXNlIHdoZW4gLm5hdi1saW5rIGlzIGluc2lkZSAubmF2LWl0ZW1cblxuICAgICAgICAgICRsaW5rLnBhcmVudHMoU2VsZWN0b3IuTkFWX0xJU1RfR1JPVVApLnByZXYoU2VsZWN0b3IuTkFWX0lURU1TKS5jaGlsZHJlbihTZWxlY3Rvci5OQVZfTElOS1MpLmFkZENsYXNzKENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJCQkMSh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKEV2ZW50LkFDVElWQVRFLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGFyZ2V0XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLl9jbGVhciA9IGZ1bmN0aW9uIF9jbGVhcigpIHtcbiAgICAgICAgJCQkMSh0aGlzLl9zZWxlY3RvcikuZmlsdGVyKFNlbGVjdG9yLkFDVElWRSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICB9OyAvLyBTdGF0aWNcblxuXG4gICAgICBTY3JvbGxTcHkuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBkYXRhID0gJCQkMSh0aGlzKS5kYXRhKERBVEFfS0VZKTtcblxuICAgICAgICAgIHZhciBfY29uZmlnID0gdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnO1xuXG4gICAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgICBkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAgICQkJDEodGhpcykuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoU2Nyb2xsU3B5LCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gU2Nyb2xsU3B5O1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG5cbiAgICAkJCQxKHdpbmRvdykub24oRXZlbnQuTE9BRF9EQVRBX0FQSSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHNjcm9sbFNweXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKFNlbGVjdG9yLkRBVEFfU1BZKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSBzY3JvbGxTcHlzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgJHNweSA9ICQkJDEoc2Nyb2xsU3B5c1tpXSk7XG5cbiAgICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICogalF1ZXJ5XG4gICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICovXG5cbiAgICAkJCQxLmZuW05BTUVdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICAgJCQkMS5mbltOQU1FXS5Db25zdHJ1Y3RvciA9IFNjcm9sbFNweTtcblxuICAgICQkJDEuZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICQkJDEuZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICAgfTtcblxuICAgIHJldHVybiBTY3JvbGxTcHk7XG4gIH0oJCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIEJvb3RzdHJhcCAodjQuMS4wKTogdGFiLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBUYWIgPSBmdW5jdGlvbiAoJCQkMSkge1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIENvbnN0YW50c1xuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuICAgIHZhciBOQU1FID0gJ3RhYic7XG4gICAgdmFyIFZFUlNJT04gPSAnNC4xLjAnO1xuICAgIHZhciBEQVRBX0tFWSA9ICdicy50YWInO1xuICAgIHZhciBFVkVOVF9LRVkgPSBcIi5cIiArIERBVEFfS0VZO1xuICAgIHZhciBEQVRBX0FQSV9LRVkgPSAnLmRhdGEtYXBpJztcbiAgICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJCQkMS5mbltOQU1FXTtcbiAgICB2YXIgRXZlbnQgPSB7XG4gICAgICBISURFOiBcImhpZGVcIiArIEVWRU5UX0tFWSxcbiAgICAgIEhJRERFTjogXCJoaWRkZW5cIiArIEVWRU5UX0tFWSxcbiAgICAgIFNIT1c6IFwic2hvd1wiICsgRVZFTlRfS0VZLFxuICAgICAgU0hPV046IFwic2hvd25cIiArIEVWRU5UX0tFWSxcbiAgICAgIENMSUNLX0RBVEFfQVBJOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVlcbiAgICB9O1xuICAgIHZhciBDbGFzc05hbWUgPSB7XG4gICAgICBEUk9QRE9XTl9NRU5VOiAnZHJvcGRvd24tbWVudScsXG4gICAgICBBQ1RJVkU6ICdhY3RpdmUnLFxuICAgICAgRElTQUJMRUQ6ICdkaXNhYmxlZCcsXG4gICAgICBGQURFOiAnZmFkZScsXG4gICAgICBTSE9XOiAnc2hvdydcbiAgICB9O1xuICAgIHZhciBTZWxlY3RvciA9IHtcbiAgICAgIERST1BET1dOOiAnLmRyb3Bkb3duJyxcbiAgICAgIE5BVl9MSVNUX0dST1VQOiAnLm5hdiwgLmxpc3QtZ3JvdXAnLFxuICAgICAgQUNUSVZFOiAnLmFjdGl2ZScsXG4gICAgICBBQ1RJVkVfVUw6ICc+IGxpID4gLmFjdGl2ZScsXG4gICAgICBEQVRBX1RPR0dMRTogJ1tkYXRhLXRvZ2dsZT1cInRhYlwiXSwgW2RhdGEtdG9nZ2xlPVwicGlsbFwiXSwgW2RhdGEtdG9nZ2xlPVwibGlzdFwiXScsXG4gICAgICBEUk9QRE9XTl9UT0dHTEU6ICcuZHJvcGRvd24tdG9nZ2xlJyxcbiAgICAgIERST1BET1dOX0FDVElWRV9DSElMRDogJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSdcbiAgICAgIC8qKlxuICAgICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAqL1xuXG4gICAgfTtcblxuICAgIHZhciBUYWIgPVxuICAgIC8qI19fUFVSRV9fKi9cbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBUYWIoZWxlbWVudCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICAgIHZhciBfcHJvdG8gPSBUYWIucHJvdG90eXBlO1xuXG4gICAgICAvLyBQdWJsaWNcbiAgICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlICYmIHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgJiYgJCQkMSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDbGFzc05hbWUuQUNUSVZFKSB8fCAkJCQxKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENsYXNzTmFtZS5ESVNBQkxFRCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICB2YXIgcHJldmlvdXM7XG4gICAgICAgIHZhciBsaXN0RWxlbWVudCA9ICQkJDEodGhpcy5fZWxlbWVudCkuY2xvc2VzdChTZWxlY3Rvci5OQVZfTElTVF9HUk9VUClbMF07XG4gICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICBpZiAobGlzdEVsZW1lbnQpIHtcbiAgICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgPyBTZWxlY3Rvci5BQ1RJVkVfVUwgOiBTZWxlY3Rvci5BQ1RJVkU7XG4gICAgICAgICAgcHJldmlvdXMgPSAkJCQxLm1ha2VBcnJheSgkJCQxKGxpc3RFbGVtZW50KS5maW5kKGl0ZW1TZWxlY3RvcikpO1xuICAgICAgICAgIHByZXZpb3VzID0gcHJldmlvdXNbcHJldmlvdXMubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGlkZUV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURFLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHNob3dFdmVudCA9ICQkJDEuRXZlbnQoRXZlbnQuU0hPVywge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICQkJDEocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgICQkJDEodGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgaGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gJCQkMShzZWxlY3RvcilbMF07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9hY3RpdmF0ZSh0aGlzLl9lbGVtZW50LCBsaXN0RWxlbWVudCk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgdmFyIGhpZGRlbkV2ZW50ID0gJCQkMS5FdmVudChFdmVudC5ISURERU4sIHtcbiAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFyIHNob3duRXZlbnQgPSAkJCQxLkV2ZW50KEV2ZW50LlNIT1dOLCB7XG4gICAgICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgICAgIH0pO1xuICAgICAgICAgICQkJDEocHJldmlvdXMpLnRyaWdnZXIoaGlkZGVuRXZlbnQpO1xuICAgICAgICAgICQkJDEoX3RoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRhcmdldCwgdGFyZ2V0LnBhcmVudE5vZGUsIGNvbXBsZXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAgICQkJDEucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSk7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgfTsgLy8gUHJpdmF0ZVxuXG5cbiAgICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgYWN0aXZlRWxlbWVudHM7XG5cbiAgICAgICAgaWYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJykge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRzID0gJCQkMShjb250YWluZXIpLmZpbmQoU2VsZWN0b3IuQUNUSVZFX1VMKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50cyA9ICQkJDEoY29udGFpbmVyKS5jaGlsZHJlbihTZWxlY3Rvci5BQ1RJVkUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdO1xuICAgICAgICB2YXIgaXNUcmFuc2l0aW9uaW5nID0gY2FsbGJhY2sgJiYgYWN0aXZlICYmICQkJDEoYWN0aXZlKS5oYXNDbGFzcyhDbGFzc05hbWUuRkFERSk7XG5cbiAgICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5fdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChhY3RpdmUgJiYgaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQoYWN0aXZlKTtcbiAgICAgICAgICAkJCQxKGFjdGl2ZSkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5fdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gX3RyYW5zaXRpb25Db21wbGV0ZShlbGVtZW50LCBhY3RpdmUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgICAkJCQxKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLlNIT1cgKyBcIiBcIiArIENsYXNzTmFtZS5BQ1RJVkUpO1xuICAgICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJCQkMShhY3RpdmUucGFyZW50Tm9kZSkuZmluZChTZWxlY3Rvci5EUk9QRE9XTl9BQ1RJVkVfQ0hJTEQpWzBdO1xuXG4gICAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgICAgICQkJDEoZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ2xhc3NOYW1lLkFDVElWRSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFjdGl2ZS5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJCQkMShlbGVtZW50KS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcblxuICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgVXRpbC5yZWZsb3coZWxlbWVudCk7XG4gICAgICAgICQkJDEoZWxlbWVudCkuYWRkQ2xhc3MoQ2xhc3NOYW1lLlNIT1cpO1xuXG4gICAgICAgIGlmIChlbGVtZW50LnBhcmVudE5vZGUgJiYgJCQkMShlbGVtZW50LnBhcmVudE5vZGUpLmhhc0NsYXNzKENsYXNzTmFtZS5EUk9QRE9XTl9NRU5VKSkge1xuICAgICAgICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSAkJCQxKGVsZW1lbnQpLmNsb3Nlc3QoU2VsZWN0b3IuRFJPUERPV04pWzBdO1xuXG4gICAgICAgICAgaWYgKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICAgJCQkMShkcm9wZG93bkVsZW1lbnQpLmZpbmQoU2VsZWN0b3IuRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDbGFzc05hbWUuQUNUSVZFKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1leHBhbmRlZCcsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfTsgLy8gU3RhdGljXG5cblxuICAgICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgJHRoaXMgPSAkJCQxKHRoaXMpO1xuICAgICAgICAgIHZhciBkYXRhID0gJHRoaXMuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpO1xuICAgICAgICAgICAgJHRoaXMuZGF0YShEQVRBX0tFWSwgZGF0YSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBfY3JlYXRlQ2xhc3MoVGFiLCBudWxsLCBbe1xuICAgICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gVkVSU0lPTjtcbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG4gICAgICByZXR1cm4gVGFiO1xuICAgIH0oKTtcbiAgICAvKipcbiAgICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG5cbiAgICAkJCQxKGRvY3VtZW50KS5vbihFdmVudC5DTElDS19EQVRBX0FQSSwgU2VsZWN0b3IuREFUQV9UT0dHTEUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkJCQxKHRoaXMpLCAnc2hvdycpO1xuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqIGpRdWVyeVxuICAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAqL1xuXG4gICAgJCQkMS5mbltOQU1FXSA9IFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgICQkJDEuZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBUYWI7XG5cbiAgICAkJCQxLmZuW05BTUVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAkJCQxLmZuW05BTUVdID0gSlFVRVJZX05PX0NPTkZMSUNUO1xuICAgICAgcmV0dXJuIFRhYi5falF1ZXJ5SW50ZXJmYWNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gVGFiO1xuICB9KCQpO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBCb290c3RyYXAgKHY0LjAuMCk6IGluZGV4LmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIChmdW5jdGlvbiAoJCQkMSkge1xuICAgIGlmICh0eXBlb2YgJCQkMSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJyk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnNpb24gPSAkJCQxLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJyk7XG4gICAgdmFyIG1pbk1ham9yID0gMTtcbiAgICB2YXIgbHRNYWpvciA9IDI7XG4gICAgdmFyIG1pbk1pbm9yID0gOTtcbiAgICB2YXIgbWluUGF0Y2ggPSAxO1xuICAgIHZhciBtYXhNYWpvciA9IDQ7XG5cbiAgICBpZiAodmVyc2lvblswXSA8IGx0TWFqb3IgJiYgdmVyc2lvblsxXSA8IG1pbk1pbm9yIHx8IHZlcnNpb25bMF0gPT09IG1pbk1ham9yICYmIHZlcnNpb25bMV0gPT09IG1pbk1pbm9yICYmIHZlcnNpb25bMl0gPCBtaW5QYXRjaCB8fCB2ZXJzaW9uWzBdID49IG1heE1ham9yKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wJyk7XG4gICAgfVxuICB9KSgkKTtcblxuICBleHBvcnRzLlV0aWwgPSBVdGlsO1xuICBleHBvcnRzLkFsZXJ0ID0gQWxlcnQ7XG4gIGV4cG9ydHMuQnV0dG9uID0gQnV0dG9uO1xuICBleHBvcnRzLkNhcm91c2VsID0gQ2Fyb3VzZWw7XG4gIGV4cG9ydHMuQ29sbGFwc2UgPSBDb2xsYXBzZTtcbiAgZXhwb3J0cy5Ecm9wZG93biA9IERyb3Bkb3duO1xuICBleHBvcnRzLk1vZGFsID0gTW9kYWw7XG4gIGV4cG9ydHMuUG9wb3ZlciA9IFBvcG92ZXI7XG4gIGV4cG9ydHMuU2Nyb2xsc3B5ID0gU2Nyb2xsU3B5O1xuICBleHBvcnRzLlRhYiA9IFRhYjtcbiAgZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLmpzLm1hcFxuLyoqXG4gKiBPd2wgQ2Fyb3VzZWwgdjIuMy40XG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE4IERhdmlkIERldXRzY2hcbiAqIExpY2Vuc2VkIHVuZGVyOiBTRUUgTElDRU5TRSBJTiBodHRwczovL2dpdGh1Yi5jb20vT3dsQ2Fyb3VzZWwyL093bENhcm91c2VsMi9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKi9cbiFmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGIsYyl7dGhpcy5zZXR0aW5ncz1udWxsLHRoaXMub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLGMpLHRoaXMuJGVsZW1lbnQ9YShiKSx0aGlzLl9oYW5kbGVycz17fSx0aGlzLl9wbHVnaW5zPXt9LHRoaXMuX3N1cHJlc3M9e30sdGhpcy5fY3VycmVudD1udWxsLHRoaXMuX3NwZWVkPW51bGwsdGhpcy5fY29vcmRpbmF0ZXM9W10sdGhpcy5fYnJlYWtwb2ludD1udWxsLHRoaXMuX3dpZHRoPW51bGwsdGhpcy5faXRlbXM9W10sdGhpcy5fY2xvbmVzPVtdLHRoaXMuX21lcmdlcnM9W10sdGhpcy5fd2lkdGhzPVtdLHRoaXMuX2ludmFsaWRhdGVkPXt9LHRoaXMuX3BpcGU9W10sdGhpcy5fZHJhZz17dGltZTpudWxsLHRhcmdldDpudWxsLHBvaW50ZXI6bnVsbCxzdGFnZTp7c3RhcnQ6bnVsbCxjdXJyZW50Om51bGx9LGRpcmVjdGlvbjpudWxsfSx0aGlzLl9zdGF0ZXM9e2N1cnJlbnQ6e30sdGFnczp7aW5pdGlhbGl6aW5nOltcImJ1c3lcIl0sYW5pbWF0aW5nOltcImJ1c3lcIl0sZHJhZ2dpbmc6W1wiaW50ZXJhY3RpbmdcIl19fSxhLmVhY2goW1wib25SZXNpemVcIixcIm9uVGhyb3R0bGVkUmVzaXplXCJdLGEucHJveHkoZnVuY3Rpb24oYixjKXt0aGlzLl9oYW5kbGVyc1tjXT1hLnByb3h5KHRoaXNbY10sdGhpcyl9LHRoaXMpKSxhLmVhY2goZS5QbHVnaW5zLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9wbHVnaW5zW2EuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkrYS5zbGljZSgxKV09bmV3IGIodGhpcyl9LHRoaXMpKSxhLmVhY2goZS5Xb3JrZXJzLGEucHJveHkoZnVuY3Rpb24oYixjKXt0aGlzLl9waXBlLnB1c2goe2ZpbHRlcjpjLmZpbHRlcixydW46YS5wcm94eShjLnJ1bix0aGlzKX0pfSx0aGlzKSksdGhpcy5zZXR1cCgpLHRoaXMuaW5pdGlhbGl6ZSgpfWUuRGVmYXVsdHM9e2l0ZW1zOjMsbG9vcDohMSxjZW50ZXI6ITEscmV3aW5kOiExLGNoZWNrVmlzaWJpbGl0eTohMCxtb3VzZURyYWc6ITAsdG91Y2hEcmFnOiEwLHB1bGxEcmFnOiEwLGZyZWVEcmFnOiExLG1hcmdpbjowLHN0YWdlUGFkZGluZzowLG1lcmdlOiExLG1lcmdlRml0OiEwLGF1dG9XaWR0aDohMSxzdGFydFBvc2l0aW9uOjAscnRsOiExLHNtYXJ0U3BlZWQ6MjUwLGZsdWlkU3BlZWQ6ITEsZHJhZ0VuZFNwZWVkOiExLHJlc3BvbnNpdmU6e30scmVzcG9uc2l2ZVJlZnJlc2hSYXRlOjIwMCxyZXNwb25zaXZlQmFzZUVsZW1lbnQ6YixmYWxsYmFja0Vhc2luZzpcInN3aW5nXCIsc2xpZGVUcmFuc2l0aW9uOlwiXCIsaW5mbzohMSxuZXN0ZWRJdGVtU2VsZWN0b3I6ITEsaXRlbUVsZW1lbnQ6XCJkaXZcIixzdGFnZUVsZW1lbnQ6XCJkaXZcIixyZWZyZXNoQ2xhc3M6XCJvd2wtcmVmcmVzaFwiLGxvYWRlZENsYXNzOlwib3dsLWxvYWRlZFwiLGxvYWRpbmdDbGFzczpcIm93bC1sb2FkaW5nXCIscnRsQ2xhc3M6XCJvd2wtcnRsXCIscmVzcG9uc2l2ZUNsYXNzOlwib3dsLXJlc3BvbnNpdmVcIixkcmFnQ2xhc3M6XCJvd2wtZHJhZ1wiLGl0ZW1DbGFzczpcIm93bC1pdGVtXCIsc3RhZ2VDbGFzczpcIm93bC1zdGFnZVwiLHN0YWdlT3V0ZXJDbGFzczpcIm93bC1zdGFnZS1vdXRlclwiLGdyYWJDbGFzczpcIm93bC1ncmFiXCJ9LGUuV2lkdGg9e0RlZmF1bHQ6XCJkZWZhdWx0XCIsSW5uZXI6XCJpbm5lclwiLE91dGVyOlwib3V0ZXJcIn0sZS5UeXBlPXtFdmVudDpcImV2ZW50XCIsU3RhdGU6XCJzdGF0ZVwifSxlLlBsdWdpbnM9e30sZS5Xb3JrZXJzPVt7ZmlsdGVyOltcIndpZHRoXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLl93aWR0aD10aGlzLiRlbGVtZW50LndpZHRoKCl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe2EuY3VycmVudD10aGlzLl9pdGVtcyYmdGhpcy5faXRlbXNbdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KV19fSx7ZmlsdGVyOltcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLiRzdGFnZS5jaGlsZHJlbihcIi5jbG9uZWRcIikucmVtb3ZlKCl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc2V0dGluZ3MubWFyZ2lufHxcIlwiLGM9IXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLGQ9dGhpcy5zZXR0aW5ncy5ydGwsZT17d2lkdGg6XCJhdXRvXCIsXCJtYXJnaW4tbGVmdFwiOmQ/YjpcIlwiLFwibWFyZ2luLXJpZ2h0XCI6ZD9cIlwiOmJ9OyFjJiZ0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNzcyhlKSxhLmNzcz1lfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXt2YXIgYj0odGhpcy53aWR0aCgpL3RoaXMuc2V0dGluZ3MuaXRlbXMpLnRvRml4ZWQoMyktdGhpcy5zZXR0aW5ncy5tYXJnaW4sYz1udWxsLGQ9dGhpcy5faXRlbXMubGVuZ3RoLGU9IXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLGY9W107Zm9yKGEuaXRlbXM9e21lcmdlOiExLHdpZHRoOmJ9O2QtLTspYz10aGlzLl9tZXJnZXJzW2RdLGM9dGhpcy5zZXR0aW5ncy5tZXJnZUZpdCYmTWF0aC5taW4oYyx0aGlzLnNldHRpbmdzLml0ZW1zKXx8YyxhLml0ZW1zLm1lcmdlPWM+MXx8YS5pdGVtcy5tZXJnZSxmW2RdPWU/YipjOnRoaXMuX2l0ZW1zW2RdLndpZHRoKCk7dGhpcy5fd2lkdGhzPWZ9fSx7ZmlsdGVyOltcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt2YXIgYj1bXSxjPXRoaXMuX2l0ZW1zLGQ9dGhpcy5zZXR0aW5ncyxlPU1hdGgubWF4KDIqZC5pdGVtcyw0KSxmPTIqTWF0aC5jZWlsKGMubGVuZ3RoLzIpLGc9ZC5sb29wJiZjLmxlbmd0aD9kLnJld2luZD9lOk1hdGgubWF4KGUsZik6MCxoPVwiXCIsaT1cIlwiO2ZvcihnLz0yO2c+MDspYi5wdXNoKHRoaXMubm9ybWFsaXplKGIubGVuZ3RoLzIsITApKSxoKz1jW2JbYi5sZW5ndGgtMV1dWzBdLm91dGVySFRNTCxiLnB1c2godGhpcy5ub3JtYWxpemUoYy5sZW5ndGgtMS0oYi5sZW5ndGgtMSkvMiwhMCkpLGk9Y1tiW2IubGVuZ3RoLTFdXVswXS5vdXRlckhUTUwraSxnLT0xO3RoaXMuX2Nsb25lcz1iLGEoaCkuYWRkQ2xhc3MoXCJjbG9uZWRcIikuYXBwZW5kVG8odGhpcy4kc3RhZ2UpLGEoaSkuYWRkQ2xhc3MoXCJjbG9uZWRcIikucHJlcGVuZFRvKHRoaXMuJHN0YWdlKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXtmb3IodmFyIGE9dGhpcy5zZXR0aW5ncy5ydGw/MTotMSxiPXRoaXMuX2Nsb25lcy5sZW5ndGgrdGhpcy5faXRlbXMubGVuZ3RoLGM9LTEsZD0wLGU9MCxmPVtdOysrYzxiOylkPWZbYy0xXXx8MCxlPXRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGMpXSt0aGlzLnNldHRpbmdzLm1hcmdpbixmLnB1c2goZCtlKmEpO3RoaXMuX2Nvb3JkaW5hdGVzPWZ9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsYj10aGlzLl9jb29yZGluYXRlcyxjPXt3aWR0aDpNYXRoLmNlaWwoTWF0aC5hYnMoYltiLmxlbmd0aC0xXSkpKzIqYSxcInBhZGRpbmctbGVmdFwiOmF8fFwiXCIsXCJwYWRkaW5nLXJpZ2h0XCI6YXx8XCJcIn07dGhpcy4kc3RhZ2UuY3NzKGMpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXt2YXIgYj10aGlzLl9jb29yZGluYXRlcy5sZW5ndGgsYz0hdGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgsZD10aGlzLiRzdGFnZS5jaGlsZHJlbigpO2lmKGMmJmEuaXRlbXMubWVyZ2UpZm9yKDtiLS07KWEuY3NzLndpZHRoPXRoaXMuX3dpZHRoc1t0aGlzLnJlbGF0aXZlKGIpXSxkLmVxKGIpLmNzcyhhLmNzcyk7ZWxzZSBjJiYoYS5jc3Mud2lkdGg9YS5pdGVtcy53aWR0aCxkLmNzcyhhLmNzcykpfX0se2ZpbHRlcjpbXCJpdGVtc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLl9jb29yZGluYXRlcy5sZW5ndGg8MSYmdGhpcy4kc3RhZ2UucmVtb3ZlQXR0cihcInN0eWxlXCIpfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXthLmN1cnJlbnQ9YS5jdXJyZW50P3RoaXMuJHN0YWdlLmNoaWxkcmVuKCkuaW5kZXgoYS5jdXJyZW50KTowLGEuY3VycmVudD1NYXRoLm1heCh0aGlzLm1pbmltdW0oKSxNYXRoLm1pbih0aGlzLm1heGltdW0oKSxhLmN1cnJlbnQpKSx0aGlzLnJlc2V0KGEuY3VycmVudCl9fSx7ZmlsdGVyOltcInBvc2l0aW9uXCJdLHJ1bjpmdW5jdGlvbigpe3RoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKHRoaXMuX2N1cnJlbnQpKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcInBvc2l0aW9uXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZT10aGlzLnNldHRpbmdzLnJ0bD8xOi0xLGY9Mip0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyxnPXRoaXMuY29vcmRpbmF0ZXModGhpcy5jdXJyZW50KCkpK2YsaD1nK3RoaXMud2lkdGgoKSplLGk9W107Zm9yKGM9MCxkPXRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDtjPGQ7YysrKWE9dGhpcy5fY29vcmRpbmF0ZXNbYy0xXXx8MCxiPU1hdGguYWJzKHRoaXMuX2Nvb3JkaW5hdGVzW2NdKStmKmUsKHRoaXMub3AoYSxcIjw9XCIsZykmJnRoaXMub3AoYSxcIj5cIixoKXx8dGhpcy5vcChiLFwiPFwiLGcpJiZ0aGlzLm9wKGIsXCI+XCIsaCkpJiZpLnB1c2goYyk7dGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKFwiOmVxKFwiK2kuam9pbihcIiksIDplcShcIikrXCIpXCIpLmFkZENsYXNzKFwiYWN0aXZlXCIpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmNlbnRlclwiKS5yZW1vdmVDbGFzcyhcImNlbnRlclwiKSx0aGlzLnNldHRpbmdzLmNlbnRlciYmdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS5lcSh0aGlzLmN1cnJlbnQoKSkuYWRkQ2xhc3MoXCJjZW50ZXJcIil9fV0sZS5wcm90b3R5cGUuaW5pdGlhbGl6ZVN0YWdlPWZ1bmN0aW9uKCl7dGhpcy4kc3RhZ2U9dGhpcy4kZWxlbWVudC5maW5kKFwiLlwiK3RoaXMuc2V0dGluZ3Muc3RhZ2VDbGFzcyksdGhpcy4kc3RhZ2UubGVuZ3RofHwodGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKSx0aGlzLiRzdGFnZT1hKFwiPFwiK3RoaXMuc2V0dGluZ3Muc3RhZ2VFbGVtZW50K1wiPlwiLHtjbGFzczp0aGlzLnNldHRpbmdzLnN0YWdlQ2xhc3N9KS53cmFwKGEoXCI8ZGl2Lz5cIix7Y2xhc3M6dGhpcy5zZXR0aW5ncy5zdGFnZU91dGVyQ2xhc3N9KSksdGhpcy4kZWxlbWVudC5hcHBlbmQodGhpcy4kc3RhZ2UucGFyZW50KCkpKX0sZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUl0ZW1zPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy4kZWxlbWVudC5maW5kKFwiLm93bC1pdGVtXCIpO2lmKGIubGVuZ3RoKXJldHVybiB0aGlzLl9pdGVtcz1iLmdldCgpLm1hcChmdW5jdGlvbihiKXtyZXR1cm4gYShiKX0pLHRoaXMuX21lcmdlcnM9dGhpcy5faXRlbXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIDF9KSx2b2lkIHRoaXMucmVmcmVzaCgpO3RoaXMucmVwbGFjZSh0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMuJHN0YWdlLnBhcmVudCgpKSksdGhpcy5pc1Zpc2libGUoKT90aGlzLnJlZnJlc2goKTp0aGlzLmludmFsaWRhdGUoXCJ3aWR0aFwiKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcyl9LGUucHJvdG90eXBlLmluaXRpYWxpemU9ZnVuY3Rpb24oKXtpZih0aGlzLmVudGVyKFwiaW5pdGlhbGl6aW5nXCIpLHRoaXMudHJpZ2dlcihcImluaXRpYWxpemVcIiksdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLnNldHRpbmdzLnJ0bENsYXNzLHRoaXMuc2V0dGluZ3MucnRsKSx0aGlzLnNldHRpbmdzLmF1dG9XaWR0aCYmIXRoaXMuaXMoXCJwcmUtbG9hZGluZ1wiKSl7dmFyIGEsYixjO2E9dGhpcy4kZWxlbWVudC5maW5kKFwiaW1nXCIpLGI9dGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3I/XCIuXCIrdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3I6ZCxjPXRoaXMuJGVsZW1lbnQuY2hpbGRyZW4oYikud2lkdGgoKSxhLmxlbmd0aCYmYzw9MCYmdGhpcy5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzKGEpfXRoaXMuaW5pdGlhbGl6ZVN0YWdlKCksdGhpcy5pbml0aWFsaXplSXRlbXMoKSx0aGlzLnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpLHRoaXMubGVhdmUoXCJpbml0aWFsaXppbmdcIiksdGhpcy50cmlnZ2VyKFwiaW5pdGlhbGl6ZWRcIil9LGUucHJvdG90eXBlLmlzVmlzaWJsZT1mdW5jdGlvbigpe3JldHVybiF0aGlzLnNldHRpbmdzLmNoZWNrVmlzaWJpbGl0eXx8dGhpcy4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpfSxlLnByb3RvdHlwZS5zZXR1cD1mdW5jdGlvbigpe3ZhciBiPXRoaXMudmlld3BvcnQoKSxjPXRoaXMub3B0aW9ucy5yZXNwb25zaXZlLGQ9LTEsZT1udWxsO2M/KGEuZWFjaChjLGZ1bmN0aW9uKGEpe2E8PWImJmE+ZCYmKGQ9TnVtYmVyKGEpKX0pLGU9YS5leHRlbmQoe30sdGhpcy5vcHRpb25zLGNbZF0pLFwiZnVuY3Rpb25cIj09dHlwZW9mIGUuc3RhZ2VQYWRkaW5nJiYoZS5zdGFnZVBhZGRpbmc9ZS5zdGFnZVBhZGRpbmcoKSksZGVsZXRlIGUucmVzcG9uc2l2ZSxlLnJlc3BvbnNpdmVDbGFzcyYmdGhpcy4kZWxlbWVudC5hdHRyKFwiY2xhc3NcIix0aGlzLiRlbGVtZW50LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIrdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcytcIi0pXFxcXFMrXFxcXHNcIixcImdcIiksXCIkMVwiK2QpKSk6ZT1hLmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMpLHRoaXMudHJpZ2dlcihcImNoYW5nZVwiLHtwcm9wZXJ0eTp7bmFtZTpcInNldHRpbmdzXCIsdmFsdWU6ZX19KSx0aGlzLl9icmVha3BvaW50PWQsdGhpcy5zZXR0aW5ncz1lLHRoaXMuaW52YWxpZGF0ZShcInNldHRpbmdzXCIpLHRoaXMudHJpZ2dlcihcImNoYW5nZWRcIix7cHJvcGVydHk6e25hbWU6XCJzZXR0aW5nc1wiLHZhbHVlOnRoaXMuc2V0dGluZ3N9fSl9LGUucHJvdG90eXBlLm9wdGlvbnNMb2dpYz1mdW5jdGlvbigpe3RoaXMuc2V0dGluZ3MuYXV0b1dpZHRoJiYodGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmc9ITEsdGhpcy5zZXR0aW5ncy5tZXJnZT0hMSl9LGUucHJvdG90eXBlLnByZXBhcmU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy50cmlnZ2VyKFwicHJlcGFyZVwiLHtjb250ZW50OmJ9KTtyZXR1cm4gYy5kYXRhfHwoYy5kYXRhPWEoXCI8XCIrdGhpcy5zZXR0aW5ncy5pdGVtRWxlbWVudCtcIi8+XCIpLmFkZENsYXNzKHRoaXMub3B0aW9ucy5pdGVtQ2xhc3MpLmFwcGVuZChiKSksdGhpcy50cmlnZ2VyKFwicHJlcGFyZWRcIix7Y29udGVudDpjLmRhdGF9KSxjLmRhdGF9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe2Zvcih2YXIgYj0wLGM9dGhpcy5fcGlwZS5sZW5ndGgsZD1hLnByb3h5KGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzW2FdfSx0aGlzLl9pbnZhbGlkYXRlZCksZT17fTtiPGM7KSh0aGlzLl9pbnZhbGlkYXRlZC5hbGx8fGEuZ3JlcCh0aGlzLl9waXBlW2JdLmZpbHRlcixkKS5sZW5ndGg+MCkmJnRoaXMuX3BpcGVbYl0ucnVuKGUpLGIrKzt0aGlzLl9pbnZhbGlkYXRlZD17fSwhdGhpcy5pcyhcInZhbGlkXCIpJiZ0aGlzLmVudGVyKFwidmFsaWRcIil9LGUucHJvdG90eXBlLndpZHRoPWZ1bmN0aW9uKGEpe3N3aXRjaChhPWF8fGUuV2lkdGguRGVmYXVsdCl7Y2FzZSBlLldpZHRoLklubmVyOmNhc2UgZS5XaWR0aC5PdXRlcjpyZXR1cm4gdGhpcy5fd2lkdGg7ZGVmYXVsdDpyZXR1cm4gdGhpcy5fd2lkdGgtMip0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZyt0aGlzLnNldHRpbmdzLm1hcmdpbn19LGUucHJvdG90eXBlLnJlZnJlc2g9ZnVuY3Rpb24oKXt0aGlzLmVudGVyKFwicmVmcmVzaGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJyZWZyZXNoXCIpLHRoaXMuc2V0dXAoKSx0aGlzLm9wdGlvbnNMb2dpYygpLHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyksdGhpcy51cGRhdGUoKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpLHRoaXMubGVhdmUoXCJyZWZyZXNoaW5nXCIpLHRoaXMudHJpZ2dlcihcInJlZnJlc2hlZFwiKX0sZS5wcm90b3R5cGUub25UaHJvdHRsZWRSZXNpemU9ZnVuY3Rpb24oKXtiLmNsZWFyVGltZW91dCh0aGlzLnJlc2l6ZVRpbWVyKSx0aGlzLnJlc2l6ZVRpbWVyPWIuc2V0VGltZW91dCh0aGlzLl9oYW5kbGVycy5vblJlc2l6ZSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmVSZWZyZXNoUmF0ZSl9LGUucHJvdG90eXBlLm9uUmVzaXplPWZ1bmN0aW9uKCl7cmV0dXJuISF0aGlzLl9pdGVtcy5sZW5ndGgmJih0aGlzLl93aWR0aCE9PXRoaXMuJGVsZW1lbnQud2lkdGgoKSYmKCEhdGhpcy5pc1Zpc2libGUoKSYmKHRoaXMuZW50ZXIoXCJyZXNpemluZ1wiKSx0aGlzLnRyaWdnZXIoXCJyZXNpemVcIikuaXNEZWZhdWx0UHJldmVudGVkKCk/KHRoaXMubGVhdmUoXCJyZXNpemluZ1wiKSwhMSk6KHRoaXMuaW52YWxpZGF0ZShcIndpZHRoXCIpLHRoaXMucmVmcmVzaCgpLHRoaXMubGVhdmUoXCJyZXNpemluZ1wiKSx2b2lkIHRoaXMudHJpZ2dlcihcInJlc2l6ZWRcIikpKSkpfSxlLnByb3RvdHlwZS5yZWdpc3RlckV2ZW50SGFuZGxlcnM9ZnVuY3Rpb24oKXthLnN1cHBvcnQudHJhbnNpdGlvbiYmdGhpcy4kc3RhZ2Uub24oYS5zdXBwb3J0LnRyYW5zaXRpb24uZW5kK1wiLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uVHJhbnNpdGlvbkVuZCx0aGlzKSksITEhPT10aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUmJnRoaXMub24oYixcInJlc2l6ZVwiLHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKSx0aGlzLnNldHRpbmdzLm1vdXNlRHJhZyYmKHRoaXMuJGVsZW1lbnQuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmRyYWdDbGFzcyksdGhpcy4kc3RhZ2Uub24oXCJtb3VzZWRvd24ub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnU3RhcnQsdGhpcykpLHRoaXMuJHN0YWdlLm9uKFwiZHJhZ3N0YXJ0Lm93bC5jb3JlIHNlbGVjdHN0YXJ0Lm93bC5jb3JlXCIsZnVuY3Rpb24oKXtyZXR1cm4hMX0pKSx0aGlzLnNldHRpbmdzLnRvdWNoRHJhZyYmKHRoaXMuJHN0YWdlLm9uKFwidG91Y2hzdGFydC5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdTdGFydCx0aGlzKSksdGhpcy4kc3RhZ2Uub24oXCJ0b3VjaGNhbmNlbC5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdFbmQsdGhpcykpKX0sZS5wcm90b3R5cGUub25EcmFnU3RhcnQ9ZnVuY3Rpb24oYil7dmFyIGQ9bnVsbDszIT09Yi53aGljaCYmKGEuc3VwcG9ydC50cmFuc2Zvcm0/KGQ9dGhpcy4kc3RhZ2UuY3NzKFwidHJhbnNmb3JtXCIpLnJlcGxhY2UoLy4qXFwofFxcKXwgL2csXCJcIikuc3BsaXQoXCIsXCIpLGQ9e3g6ZFsxNj09PWQubGVuZ3RoPzEyOjRdLHk6ZFsxNj09PWQubGVuZ3RoPzEzOjVdfSk6KGQ9dGhpcy4kc3RhZ2UucG9zaXRpb24oKSxkPXt4OnRoaXMuc2V0dGluZ3MucnRsP2QubGVmdCt0aGlzLiRzdGFnZS53aWR0aCgpLXRoaXMud2lkdGgoKSt0aGlzLnNldHRpbmdzLm1hcmdpbjpkLmxlZnQseTpkLnRvcH0pLHRoaXMuaXMoXCJhbmltYXRpbmdcIikmJihhLnN1cHBvcnQudHJhbnNmb3JtP3RoaXMuYW5pbWF0ZShkLngpOnRoaXMuJHN0YWdlLnN0b3AoKSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSksdGhpcy4kZWxlbWVudC50b2dnbGVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzLFwibW91c2Vkb3duXCI9PT1iLnR5cGUpLHRoaXMuc3BlZWQoMCksdGhpcy5fZHJhZy50aW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLHRoaXMuX2RyYWcudGFyZ2V0PWEoYi50YXJnZXQpLHRoaXMuX2RyYWcuc3RhZ2Uuc3RhcnQ9ZCx0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQ9ZCx0aGlzLl9kcmFnLnBvaW50ZXI9dGhpcy5wb2ludGVyKGIpLGEoYykub24oXCJtb3VzZXVwLm93bC5jb3JlIHRvdWNoZW5kLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ0VuZCx0aGlzKSksYShjKS5vbmUoXCJtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlXCIsYS5wcm94eShmdW5jdGlvbihiKXt2YXIgZD10aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLHRoaXMucG9pbnRlcihiKSk7YShjKS5vbihcIm1vdXNlbW92ZS5vd2wuY29yZSB0b3VjaG1vdmUub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnTW92ZSx0aGlzKSksTWF0aC5hYnMoZC54KTxNYXRoLmFicyhkLnkpJiZ0aGlzLmlzKFwidmFsaWRcIil8fChiLnByZXZlbnREZWZhdWx0KCksdGhpcy5lbnRlcihcImRyYWdnaW5nXCIpLHRoaXMudHJpZ2dlcihcImRyYWdcIikpfSx0aGlzKSkpfSxlLnByb3RvdHlwZS5vbkRyYWdNb3ZlPWZ1bmN0aW9uKGEpe3ZhciBiPW51bGwsYz1udWxsLGQ9bnVsbCxlPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnBvaW50ZXIsdGhpcy5wb2ludGVyKGEpKSxmPXRoaXMuZGlmZmVyZW5jZSh0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0LGUpO3RoaXMuaXMoXCJkcmFnZ2luZ1wiKSYmKGEucHJldmVudERlZmF1bHQoKSx0aGlzLnNldHRpbmdzLmxvb3A/KGI9dGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSksYz10aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKzEpLWIsZi54PSgoZi54LWIpJWMrYyklYytiKTooYj10aGlzLnNldHRpbmdzLnJ0bD90aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKTp0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKSxjPXRoaXMuc2V0dGluZ3MucnRsP3RoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpOnRoaXMuY29vcmRpbmF0ZXModGhpcy5tYXhpbXVtKCkpLGQ9dGhpcy5zZXR0aW5ncy5wdWxsRHJhZz8tMSplLngvNTowLGYueD1NYXRoLm1heChNYXRoLm1pbihmLngsYitkKSxjK2QpKSx0aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQ9Zix0aGlzLmFuaW1hdGUoZi54KSl9LGUucHJvdG90eXBlLm9uRHJhZ0VuZD1mdW5jdGlvbihiKXt2YXIgZD10aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLHRoaXMucG9pbnRlcihiKSksZT10aGlzLl9kcmFnLnN0YWdlLmN1cnJlbnQsZj1kLng+MF50aGlzLnNldHRpbmdzLnJ0bD9cImxlZnRcIjpcInJpZ2h0XCI7YShjKS5vZmYoXCIub3dsLmNvcmVcIiksdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKSwoMCE9PWQueCYmdGhpcy5pcyhcImRyYWdnaW5nXCIpfHwhdGhpcy5pcyhcInZhbGlkXCIpKSYmKHRoaXMuc3BlZWQodGhpcy5zZXR0aW5ncy5kcmFnRW5kU3BlZWR8fHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCksdGhpcy5jdXJyZW50KHRoaXMuY2xvc2VzdChlLngsMCE9PWQueD9mOnRoaXMuX2RyYWcuZGlyZWN0aW9uKSksdGhpcy5pbnZhbGlkYXRlKFwicG9zaXRpb25cIiksdGhpcy51cGRhdGUoKSx0aGlzLl9kcmFnLmRpcmVjdGlvbj1mLChNYXRoLmFicyhkLngpPjN8fChuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMuX2RyYWcudGltZT4zMDApJiZ0aGlzLl9kcmFnLnRhcmdldC5vbmUoXCJjbGljay5vd2wuY29yZVwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSksdGhpcy5pcyhcImRyYWdnaW5nXCIpJiYodGhpcy5sZWF2ZShcImRyYWdnaW5nXCIpLHRoaXMudHJpZ2dlcihcImRyYWdnZWRcIikpfSxlLnByb3RvdHlwZS5jbG9zZXN0PWZ1bmN0aW9uKGIsYyl7dmFyIGU9LTEsZj0zMCxnPXRoaXMud2lkdGgoKSxoPXRoaXMuY29vcmRpbmF0ZXMoKTtyZXR1cm4gdGhpcy5zZXR0aW5ncy5mcmVlRHJhZ3x8YS5lYWNoKGgsYS5wcm94eShmdW5jdGlvbihhLGkpe3JldHVyblwibGVmdFwiPT09YyYmYj5pLWYmJmI8aStmP2U9YTpcInJpZ2h0XCI9PT1jJiZiPmktZy1mJiZiPGktZytmP2U9YSsxOnRoaXMub3AoYixcIjxcIixpKSYmdGhpcy5vcChiLFwiPlwiLGhbYSsxXSE9PWQ/aFthKzFdOmktZykmJihlPVwibGVmdFwiPT09Yz9hKzE6YSksLTE9PT1lfSx0aGlzKSksdGhpcy5zZXR0aW5ncy5sb29wfHwodGhpcy5vcChiLFwiPlwiLGhbdGhpcy5taW5pbXVtKCldKT9lPWI9dGhpcy5taW5pbXVtKCk6dGhpcy5vcChiLFwiPFwiLGhbdGhpcy5tYXhpbXVtKCldKSYmKGU9Yj10aGlzLm1heGltdW0oKSkpLGV9LGUucHJvdG90eXBlLmFuaW1hdGU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5zcGVlZCgpPjA7dGhpcy5pcyhcImFuaW1hdGluZ1wiKSYmdGhpcy5vblRyYW5zaXRpb25FbmQoKSxjJiYodGhpcy5lbnRlcihcImFuaW1hdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJ0cmFuc2xhdGVcIikpLGEuc3VwcG9ydC50cmFuc2Zvcm0zZCYmYS5zdXBwb3J0LnRyYW5zaXRpb24/dGhpcy4kc3RhZ2UuY3NzKHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGUzZChcIitiK1wicHgsMHB4LDBweClcIix0cmFuc2l0aW9uOnRoaXMuc3BlZWQoKS8xZTMrXCJzXCIrKHRoaXMuc2V0dGluZ3Muc2xpZGVUcmFuc2l0aW9uP1wiIFwiK3RoaXMuc2V0dGluZ3Muc2xpZGVUcmFuc2l0aW9uOlwiXCIpfSk6Yz90aGlzLiRzdGFnZS5hbmltYXRlKHtsZWZ0OmIrXCJweFwifSx0aGlzLnNwZWVkKCksdGhpcy5zZXR0aW5ncy5mYWxsYmFja0Vhc2luZyxhLnByb3h5KHRoaXMub25UcmFuc2l0aW9uRW5kLHRoaXMpKTp0aGlzLiRzdGFnZS5jc3Moe2xlZnQ6YitcInB4XCJ9KX0sZS5wcm90b3R5cGUuaXM9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX3N0YXRlcy5jdXJyZW50W2FdJiZ0aGlzLl9zdGF0ZXMuY3VycmVudFthXT4wfSxlLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKGEpe2lmKGE9PT1kKXJldHVybiB0aGlzLl9jdXJyZW50O2lmKDA9PT10aGlzLl9pdGVtcy5sZW5ndGgpcmV0dXJuIGQ7aWYoYT10aGlzLm5vcm1hbGl6ZShhKSx0aGlzLl9jdXJyZW50IT09YSl7dmFyIGI9dGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTphfX0pO2IuZGF0YSE9PWQmJihhPXRoaXMubm9ybWFsaXplKGIuZGF0YSkpLHRoaXMuX2N1cnJlbnQ9YSx0aGlzLmludmFsaWRhdGUoXCJwb3NpdGlvblwiKSx0aGlzLnRyaWdnZXIoXCJjaGFuZ2VkXCIse3Byb3BlcnR5OntuYW1lOlwicG9zaXRpb25cIix2YWx1ZTp0aGlzLl9jdXJyZW50fX0pfXJldHVybiB0aGlzLl9jdXJyZW50fSxlLnByb3RvdHlwZS5pbnZhbGlkYXRlPWZ1bmN0aW9uKGIpe3JldHVyblwic3RyaW5nXCI9PT1hLnR5cGUoYikmJih0aGlzLl9pbnZhbGlkYXRlZFtiXT0hMCx0aGlzLmlzKFwidmFsaWRcIikmJnRoaXMubGVhdmUoXCJ2YWxpZFwiKSksYS5tYXAodGhpcy5faW52YWxpZGF0ZWQsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYn0pfSxlLnByb3RvdHlwZS5yZXNldD1mdW5jdGlvbihhKXsoYT10aGlzLm5vcm1hbGl6ZShhKSkhPT1kJiYodGhpcy5fc3BlZWQ9MCx0aGlzLl9jdXJyZW50PWEsdGhpcy5zdXBwcmVzcyhbXCJ0cmFuc2xhdGVcIixcInRyYW5zbGF0ZWRcIl0pLHRoaXMuYW5pbWF0ZSh0aGlzLmNvb3JkaW5hdGVzKGEpKSx0aGlzLnJlbGVhc2UoW1widHJhbnNsYXRlXCIsXCJ0cmFuc2xhdGVkXCJdKSl9LGUucHJvdG90eXBlLm5vcm1hbGl6ZT1mdW5jdGlvbihhLGIpe3ZhciBjPXRoaXMuX2l0ZW1zLmxlbmd0aCxlPWI/MDp0aGlzLl9jbG9uZXMubGVuZ3RoO3JldHVybiF0aGlzLmlzTnVtZXJpYyhhKXx8YzwxP2E9ZDooYTwwfHxhPj1jK2UpJiYoYT0oKGEtZS8yKSVjK2MpJWMrZS8yKSxhfSxlLnByb3RvdHlwZS5yZWxhdGl2ZT1mdW5jdGlvbihhKXtyZXR1cm4gYS09dGhpcy5fY2xvbmVzLmxlbmd0aC8yLHRoaXMubm9ybWFsaXplKGEsITApfSxlLnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKGEpe3ZhciBiLGMsZCxlPXRoaXMuc2V0dGluZ3MsZj10aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7aWYoZS5sb29wKWY9dGhpcy5fY2xvbmVzLmxlbmd0aC8yK3RoaXMuX2l0ZW1zLmxlbmd0aC0xO2Vsc2UgaWYoZS5hdXRvV2lkdGh8fGUubWVyZ2Upe2lmKGI9dGhpcy5faXRlbXMubGVuZ3RoKWZvcihjPXRoaXMuX2l0ZW1zWy0tYl0ud2lkdGgoKSxkPXRoaXMuJGVsZW1lbnQud2lkdGgoKTtiLS0mJiEoKGMrPXRoaXMuX2l0ZW1zW2JdLndpZHRoKCkrdGhpcy5zZXR0aW5ncy5tYXJnaW4pPmQpOyk7Zj1iKzF9ZWxzZSBmPWUuY2VudGVyP3RoaXMuX2l0ZW1zLmxlbmd0aC0xOnRoaXMuX2l0ZW1zLmxlbmd0aC1lLml0ZW1zO3JldHVybiBhJiYoZi09dGhpcy5fY2xvbmVzLmxlbmd0aC8yKSxNYXRoLm1heChmLDApfSxlLnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKGEpe3JldHVybiBhPzA6dGhpcy5fY2xvbmVzLmxlbmd0aC8yfSxlLnByb3RvdHlwZS5pdGVtcz1mdW5jdGlvbihhKXtyZXR1cm4gYT09PWQ/dGhpcy5faXRlbXMuc2xpY2UoKTooYT10aGlzLm5vcm1hbGl6ZShhLCEwKSx0aGlzLl9pdGVtc1thXSl9LGUucHJvdG90eXBlLm1lcmdlcnM9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1kP3RoaXMuX21lcmdlcnMuc2xpY2UoKTooYT10aGlzLm5vcm1hbGl6ZShhLCEwKSx0aGlzLl9tZXJnZXJzW2FdKX0sZS5wcm90b3R5cGUuY2xvbmVzPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuX2Nsb25lcy5sZW5ndGgvMixlPWMrdGhpcy5faXRlbXMubGVuZ3RoLGY9ZnVuY3Rpb24oYSl7cmV0dXJuIGElMj09MD9lK2EvMjpjLShhKzEpLzJ9O3JldHVybiBiPT09ZD9hLm1hcCh0aGlzLl9jbG9uZXMsZnVuY3Rpb24oYSxiKXtyZXR1cm4gZihiKX0pOmEubWFwKHRoaXMuX2Nsb25lcyxmdW5jdGlvbihhLGMpe3JldHVybiBhPT09Yj9mKGMpOm51bGx9KX0sZS5wcm90b3R5cGUuc3BlZWQ9ZnVuY3Rpb24oYSl7cmV0dXJuIGEhPT1kJiYodGhpcy5fc3BlZWQ9YSksdGhpcy5fc3BlZWR9LGUucHJvdG90eXBlLmNvb3JkaW5hdGVzPWZ1bmN0aW9uKGIpe3ZhciBjLGU9MSxmPWItMTtyZXR1cm4gYj09PWQ/YS5tYXAodGhpcy5fY29vcmRpbmF0ZXMsYS5wcm94eShmdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmNvb3JkaW5hdGVzKGIpfSx0aGlzKSk6KHRoaXMuc2V0dGluZ3MuY2VudGVyPyh0aGlzLnNldHRpbmdzLnJ0bCYmKGU9LTEsZj1iKzEpLGM9dGhpcy5fY29vcmRpbmF0ZXNbYl0sYys9KHRoaXMud2lkdGgoKS1jKyh0aGlzLl9jb29yZGluYXRlc1tmXXx8MCkpLzIqZSk6Yz10aGlzLl9jb29yZGluYXRlc1tmXXx8MCxjPU1hdGguY2VpbChjKSl9LGUucHJvdG90eXBlLmR1cmF0aW9uPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gMD09PWM/MDpNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhiLWEpLDEpLDYpKk1hdGguYWJzKGN8fHRoaXMuc2V0dGluZ3Muc21hcnRTcGVlZCl9LGUucHJvdG90eXBlLnRvPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5jdXJyZW50KCksZD1udWxsLGU9YS10aGlzLnJlbGF0aXZlKGMpLGY9KGU+MCktKGU8MCksZz10aGlzLl9pdGVtcy5sZW5ndGgsaD10aGlzLm1pbmltdW0oKSxpPXRoaXMubWF4aW11bSgpO3RoaXMuc2V0dGluZ3MubG9vcD8oIXRoaXMuc2V0dGluZ3MucmV3aW5kJiZNYXRoLmFicyhlKT5nLzImJihlKz0tMSpmKmcpLGE9YytlLChkPSgoYS1oKSVnK2cpJWcraCkhPT1hJiZkLWU8PWkmJmQtZT4wJiYoYz1kLWUsYT1kLHRoaXMucmVzZXQoYykpKTp0aGlzLnNldHRpbmdzLnJld2luZD8oaSs9MSxhPShhJWkraSklaSk6YT1NYXRoLm1heChoLE1hdGgubWluKGksYSkpLHRoaXMuc3BlZWQodGhpcy5kdXJhdGlvbihjLGEsYikpLHRoaXMuY3VycmVudChhKSx0aGlzLmlzVmlzaWJsZSgpJiZ0aGlzLnVwZGF0ZSgpfSxlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGEpe2E9YXx8ITEsdGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKSsxLGEpfSxlLnByb3RvdHlwZS5wcmV2PWZ1bmN0aW9uKGEpe2E9YXx8ITEsdGhpcy50byh0aGlzLnJlbGF0aXZlKHRoaXMuY3VycmVudCgpKS0xLGEpfSxlLnByb3RvdHlwZS5vblRyYW5zaXRpb25FbmQ9ZnVuY3Rpb24oYSl7aWYoYSE9PWQmJihhLnN0b3BQcm9wYWdhdGlvbigpLChhLnRhcmdldHx8YS5zcmNFbGVtZW50fHxhLm9yaWdpbmFsVGFyZ2V0KSE9PXRoaXMuJHN0YWdlLmdldCgwKSkpcmV0dXJuITE7dGhpcy5sZWF2ZShcImFuaW1hdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJ0cmFuc2xhdGVkXCIpfSxlLnByb3RvdHlwZS52aWV3cG9ydD1mdW5jdGlvbigpe3ZhciBkO3JldHVybiB0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUJhc2VFbGVtZW50IT09Yj9kPWEodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCkud2lkdGgoKTpiLmlubmVyV2lkdGg/ZD1iLmlubmVyV2lkdGg6Yy5kb2N1bWVudEVsZW1lbnQmJmMuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoP2Q9Yy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg6Y29uc29sZS53YXJuKFwiQ2FuIG5vdCBkZXRlY3Qgdmlld3BvcnQgd2lkdGguXCIpLGR9LGUucHJvdG90eXBlLnJlcGxhY2U9ZnVuY3Rpb24oYil7dGhpcy4kc3RhZ2UuZW1wdHkoKSx0aGlzLl9pdGVtcz1bXSxiJiYoYj1iIGluc3RhbmNlb2YgalF1ZXJ5P2I6YShiKSksdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3ImJihiPWIuZmluZChcIi5cIit0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvcikpLGIuZmlsdGVyKGZ1bmN0aW9uKCl7cmV0dXJuIDE9PT10aGlzLm5vZGVUeXBlfSkuZWFjaChhLnByb3h5KGZ1bmN0aW9uKGEsYil7Yj10aGlzLnByZXBhcmUoYiksdGhpcy4kc3RhZ2UuYXBwZW5kKGIpLHRoaXMuX2l0ZW1zLnB1c2goYiksdGhpcy5fbWVyZ2Vycy5wdXNoKDEqYi5maW5kKFwiW2RhdGEtbWVyZ2VdXCIpLmFkZEJhY2soXCJbZGF0YS1tZXJnZV1cIikuYXR0cihcImRhdGEtbWVyZ2VcIil8fDEpfSx0aGlzKSksdGhpcy5yZXNldCh0aGlzLmlzTnVtZXJpYyh0aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24pP3RoaXMuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbjowKSx0aGlzLmludmFsaWRhdGUoXCJpdGVtc1wiKX0sZS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKGIsYyl7dmFyIGU9dGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KTtjPWM9PT1kP3RoaXMuX2l0ZW1zLmxlbmd0aDp0aGlzLm5vcm1hbGl6ZShjLCEwKSxiPWIgaW5zdGFuY2VvZiBqUXVlcnk/YjphKGIpLHRoaXMudHJpZ2dlcihcImFkZFwiLHtjb250ZW50OmIscG9zaXRpb246Y30pLGI9dGhpcy5wcmVwYXJlKGIpLDA9PT10aGlzLl9pdGVtcy5sZW5ndGh8fGM9PT10aGlzLl9pdGVtcy5sZW5ndGg/KDA9PT10aGlzLl9pdGVtcy5sZW5ndGgmJnRoaXMuJHN0YWdlLmFwcGVuZChiKSwwIT09dGhpcy5faXRlbXMubGVuZ3RoJiZ0aGlzLl9pdGVtc1tjLTFdLmFmdGVyKGIpLHRoaXMuX2l0ZW1zLnB1c2goYiksdGhpcy5fbWVyZ2Vycy5wdXNoKDEqYi5maW5kKFwiW2RhdGEtbWVyZ2VdXCIpLmFkZEJhY2soXCJbZGF0YS1tZXJnZV1cIikuYXR0cihcImRhdGEtbWVyZ2VcIil8fDEpKToodGhpcy5faXRlbXNbY10uYmVmb3JlKGIpLHRoaXMuX2l0ZW1zLnNwbGljZShjLDAsYiksdGhpcy5fbWVyZ2Vycy5zcGxpY2UoYywwLDEqYi5maW5kKFwiW2RhdGEtbWVyZ2VdXCIpLmFkZEJhY2soXCJbZGF0YS1tZXJnZV1cIikuYXR0cihcImRhdGEtbWVyZ2VcIil8fDEpKSx0aGlzLl9pdGVtc1tlXSYmdGhpcy5yZXNldCh0aGlzLl9pdGVtc1tlXS5pbmRleCgpKSx0aGlzLmludmFsaWRhdGUoXCJpdGVtc1wiKSx0aGlzLnRyaWdnZXIoXCJhZGRlZFwiLHtjb250ZW50OmIscG9zaXRpb246Y30pfSxlLnByb3RvdHlwZS5yZW1vdmU9ZnVuY3Rpb24oYSl7KGE9dGhpcy5ub3JtYWxpemUoYSwhMCkpIT09ZCYmKHRoaXMudHJpZ2dlcihcInJlbW92ZVwiLHtjb250ZW50OnRoaXMuX2l0ZW1zW2FdLHBvc2l0aW9uOmF9KSx0aGlzLl9pdGVtc1thXS5yZW1vdmUoKSx0aGlzLl9pdGVtcy5zcGxpY2UoYSwxKSx0aGlzLl9tZXJnZXJzLnNwbGljZShhLDEpLHRoaXMuaW52YWxpZGF0ZShcIml0ZW1zXCIpLHRoaXMudHJpZ2dlcihcInJlbW92ZWRcIix7Y29udGVudDpudWxsLHBvc2l0aW9uOmF9KSl9LGUucHJvdG90eXBlLnByZWxvYWRBdXRvV2lkdGhJbWFnZXM9ZnVuY3Rpb24oYil7Yi5lYWNoKGEucHJveHkoZnVuY3Rpb24oYixjKXt0aGlzLmVudGVyKFwicHJlLWxvYWRpbmdcIiksYz1hKGMpLGEobmV3IEltYWdlKS5vbmUoXCJsb2FkXCIsYS5wcm94eShmdW5jdGlvbihhKXtjLmF0dHIoXCJzcmNcIixhLnRhcmdldC5zcmMpLGMuY3NzKFwib3BhY2l0eVwiLDEpLHRoaXMubGVhdmUoXCJwcmUtbG9hZGluZ1wiKSwhdGhpcy5pcyhcInByZS1sb2FkaW5nXCIpJiYhdGhpcy5pcyhcImluaXRpYWxpemluZ1wiKSYmdGhpcy5yZWZyZXNoKCl9LHRoaXMpKS5hdHRyKFwic3JjXCIsYy5hdHRyKFwic3JjXCIpfHxjLmF0dHIoXCJkYXRhLXNyY1wiKXx8Yy5hdHRyKFwiZGF0YS1zcmMtcmV0aW5hXCIpKX0sdGhpcykpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dGhpcy4kZWxlbWVudC5vZmYoXCIub3dsLmNvcmVcIiksdGhpcy4kc3RhZ2Uub2ZmKFwiLm93bC5jb3JlXCIpLGEoYykub2ZmKFwiLm93bC5jb3JlXCIpLCExIT09dGhpcy5zZXR0aW5ncy5yZXNwb25zaXZlJiYoYi5jbGVhclRpbWVvdXQodGhpcy5yZXNpemVUaW1lciksdGhpcy5vZmYoYixcInJlc2l6ZVwiLHRoaXMuX2hhbmRsZXJzLm9uVGhyb3R0bGVkUmVzaXplKSk7Zm9yKHZhciBkIGluIHRoaXMuX3BsdWdpbnMpdGhpcy5fcGx1Z2luc1tkXS5kZXN0cm95KCk7dGhpcy4kc3RhZ2UuY2hpbGRyZW4oXCIuY2xvbmVkXCIpLnJlbW92ZSgpLHRoaXMuJHN0YWdlLnVud3JhcCgpLHRoaXMuJHN0YWdlLmNoaWxkcmVuKCkuY29udGVudHMoKS51bndyYXAoKSx0aGlzLiRzdGFnZS5jaGlsZHJlbigpLnVud3JhcCgpLHRoaXMuJHN0YWdlLnJlbW92ZSgpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMucnRsQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5ncmFiQ2xhc3MpLmF0dHIoXCJjbGFzc1wiLHRoaXMuJGVsZW1lbnQuYXR0cihcImNsYXNzXCIpLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzK1wiLVxcXFxTK1xcXFxzXCIsXCJnXCIpLFwiXCIpKS5yZW1vdmVEYXRhKFwib3dsLmNhcm91c2VsXCIpfSxlLnByb3RvdHlwZS5vcD1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5zZXR0aW5ncy5ydGw7c3dpdGNoKGIpe2Nhc2VcIjxcIjpyZXR1cm4gZD9hPmM6YTxjO2Nhc2VcIj5cIjpyZXR1cm4gZD9hPGM6YT5jO2Nhc2VcIj49XCI6cmV0dXJuIGQ/YTw9YzphPj1jO2Nhc2VcIjw9XCI6cmV0dXJuIGQ/YT49YzphPD1jfX0sZS5wcm90b3R5cGUub249ZnVuY3Rpb24oYSxiLGMsZCl7YS5hZGRFdmVudExpc3RlbmVyP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMsZCk6YS5hdHRhY2hFdmVudCYmYS5hdHRhY2hFdmVudChcIm9uXCIrYixjKX0sZS5wcm90b3R5cGUub2ZmPWZ1bmN0aW9uKGEsYixjLGQpe2EucmVtb3ZlRXZlbnRMaXN0ZW5lcj9hLnJlbW92ZUV2ZW50TGlzdGVuZXIoYixjLGQpOmEuZGV0YWNoRXZlbnQmJmEuZGV0YWNoRXZlbnQoXCJvblwiK2IsYyl9LGUucHJvdG90eXBlLnRyaWdnZXI9ZnVuY3Rpb24oYixjLGQsZixnKXt2YXIgaD17aXRlbTp7Y291bnQ6dGhpcy5faXRlbXMubGVuZ3RoLGluZGV4OnRoaXMuY3VycmVudCgpfX0saT1hLmNhbWVsQ2FzZShhLmdyZXAoW1wib25cIixiLGRdLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkuam9pbihcIi1cIikudG9Mb3dlckNhc2UoKSksaj1hLkV2ZW50KFtiLFwib3dsXCIsZHx8XCJjYXJvdXNlbFwiXS5qb2luKFwiLlwiKS50b0xvd2VyQ2FzZSgpLGEuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0OnRoaXN9LGgsYykpO3JldHVybiB0aGlzLl9zdXByZXNzW2JdfHwoYS5lYWNoKHRoaXMuX3BsdWdpbnMsZnVuY3Rpb24oYSxiKXtiLm9uVHJpZ2dlciYmYi5vblRyaWdnZXIoail9KSx0aGlzLnJlZ2lzdGVyKHt0eXBlOmUuVHlwZS5FdmVudCxuYW1lOmJ9KSx0aGlzLiRlbGVtZW50LnRyaWdnZXIoaiksdGhpcy5zZXR0aW5ncyYmXCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5zZXR0aW5nc1tpXSYmdGhpcy5zZXR0aW5nc1tpXS5jYWxsKHRoaXMsaikpLGp9LGUucHJvdG90eXBlLmVudGVyPWZ1bmN0aW9uKGIpe2EuZWFjaChbYl0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW2JdfHxbXSksYS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMuX3N0YXRlcy5jdXJyZW50W2JdPT09ZCYmKHRoaXMuX3N0YXRlcy5jdXJyZW50W2JdPTApLHRoaXMuX3N0YXRlcy5jdXJyZW50W2JdKyt9LHRoaXMpKX0sZS5wcm90b3R5cGUubGVhdmU9ZnVuY3Rpb24oYil7YS5lYWNoKFtiXS5jb25jYXQodGhpcy5fc3RhdGVzLnRhZ3NbYl18fFtdKSxhLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5fc3RhdGVzLmN1cnJlbnRbYl0tLX0sdGhpcykpfSxlLnByb3RvdHlwZS5yZWdpc3Rlcj1mdW5jdGlvbihiKXtpZihiLnR5cGU9PT1lLlR5cGUuRXZlbnQpe2lmKGEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdfHwoYS5ldmVudC5zcGVjaWFsW2IubmFtZV09e30pLCFhLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5vd2wpe3ZhciBjPWEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdLl9kZWZhdWx0O2EuZXZlbnQuc3BlY2lhbFtiLm5hbWVdLl9kZWZhdWx0PWZ1bmN0aW9uKGEpe3JldHVybiFjfHwhYy5hcHBseXx8YS5uYW1lc3BhY2UmJi0xIT09YS5uYW1lc3BhY2UuaW5kZXhPZihcIm93bFwiKT9hLm5hbWVzcGFjZSYmYS5uYW1lc3BhY2UuaW5kZXhPZihcIm93bFwiKT4tMTpjLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYS5ldmVudC5zcGVjaWFsW2IubmFtZV0ub3dsPSEwfX1lbHNlIGIudHlwZT09PWUuVHlwZS5TdGF0ZSYmKHRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV0/dGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXT10aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdLmNvbmNhdChiLnRhZ3MpOnRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV09Yi50YWdzLHRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV09YS5ncmVwKHRoaXMuX3N0YXRlcy50YWdzW2IubmFtZV0sYS5wcm94eShmdW5jdGlvbihjLGQpe3JldHVybiBhLmluQXJyYXkoYyx0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdKT09PWR9LHRoaXMpKSl9LGUucHJvdG90eXBlLnN1cHByZXNzPWZ1bmN0aW9uKGIpe2EuZWFjaChiLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9zdXByZXNzW2JdPSEwfSx0aGlzKSl9LGUucHJvdG90eXBlLnJlbGVhc2U9ZnVuY3Rpb24oYil7YS5lYWNoKGIsYS5wcm94eShmdW5jdGlvbihhLGIpe2RlbGV0ZSB0aGlzLl9zdXByZXNzW2JdfSx0aGlzKSl9LGUucHJvdG90eXBlLnBvaW50ZXI9ZnVuY3Rpb24oYSl7dmFyIGM9e3g6bnVsbCx5Om51bGx9O3JldHVybiBhPWEub3JpZ2luYWxFdmVudHx8YXx8Yi5ldmVudCxhPWEudG91Y2hlcyYmYS50b3VjaGVzLmxlbmd0aD9hLnRvdWNoZXNbMF06YS5jaGFuZ2VkVG91Y2hlcyYmYS5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg/YS5jaGFuZ2VkVG91Y2hlc1swXTphLGEucGFnZVg/KGMueD1hLnBhZ2VYLGMueT1hLnBhZ2VZKTooYy54PWEuY2xpZW50WCxjLnk9YS5jbGllbnRZKSxjfSxlLnByb3RvdHlwZS5pc051bWVyaWM9ZnVuY3Rpb24oYSl7cmV0dXJuIWlzTmFOKHBhcnNlRmxvYXQoYSkpfSxlLnByb3RvdHlwZS5kaWZmZXJlbmNlPWZ1bmN0aW9uKGEsYil7cmV0dXJue3g6YS54LWIueCx5OmEueS1iLnl9fSxhLmZuLm93bENhcm91c2VsPWZ1bmN0aW9uKGIpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGQ9YSh0aGlzKSxmPWQuZGF0YShcIm93bC5jYXJvdXNlbFwiKTtmfHwoZj1uZXcgZSh0aGlzLFwib2JqZWN0XCI9PXR5cGVvZiBiJiZiKSxkLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIixmKSxhLmVhY2goW1wibmV4dFwiLFwicHJldlwiLFwidG9cIixcImRlc3Ryb3lcIixcInJlZnJlc2hcIixcInJlcGxhY2VcIixcImFkZFwiLFwicmVtb3ZlXCJdLGZ1bmN0aW9uKGIsYyl7Zi5yZWdpc3Rlcih7dHlwZTplLlR5cGUuRXZlbnQsbmFtZTpjfSksZi4kZWxlbWVudC5vbihjK1wiLm93bC5jYXJvdXNlbC5jb3JlXCIsYS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmYS5yZWxhdGVkVGFyZ2V0IT09dGhpcyYmKHRoaXMuc3VwcHJlc3MoW2NdKSxmW2NdLmFwcGx5KHRoaXMsW10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSkpLHRoaXMucmVsZWFzZShbY10pKX0sZikpfSkpLFwic3RyaW5nXCI9PXR5cGVvZiBiJiZcIl9cIiE9PWIuY2hhckF0KDApJiZmW2JdLmFwcGx5KGYsYyl9KX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvcj1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl92aXNpYmxlPW51bGwsdGhpcy5faGFuZGxlcnM9e1wiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvUmVmcmVzaCYmdGhpcy53YXRjaCgpfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17YXV0b1JlZnJlc2g6ITAsYXV0b1JlZnJlc2hJbnRlcnZhbDo1MDB9LGUucHJvdG90eXBlLndhdGNoPWZ1bmN0aW9uKCl7dGhpcy5faW50ZXJ2YWx8fCh0aGlzLl92aXNpYmxlPXRoaXMuX2NvcmUuaXNWaXNpYmxlKCksdGhpcy5faW50ZXJ2YWw9Yi5zZXRJbnRlcnZhbChhLnByb3h5KHRoaXMucmVmcmVzaCx0aGlzKSx0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpKX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3RoaXMuX2NvcmUuaXNWaXNpYmxlKCkhPT10aGlzLl92aXNpYmxlJiYodGhpcy5fdmlzaWJsZT0hdGhpcy5fdmlzaWJsZSx0aGlzLl9jb3JlLiRlbGVtZW50LnRvZ2dsZUNsYXNzKFwib3dsLWhpZGRlblwiLCF0aGlzLl92aXNpYmxlKSx0aGlzLl92aXNpYmxlJiZ0aGlzLl9jb3JlLmludmFsaWRhdGUoXCJ3aWR0aFwiKSYmdGhpcy5fY29yZS5yZWZyZXNoKCkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYztiLmNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihjIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbY10mJih0aGlzW2NdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b1JlZnJlc2g9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2xvYWRlZD1bXSx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgY2hhbmdlLm93bC5jYXJvdXNlbCByZXNpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7aWYoYi5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MmJnRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQmJihiLnByb3BlcnR5JiZcInBvc2l0aW9uXCI9PWIucHJvcGVydHkubmFtZXx8XCJpbml0aWFsaXplZFwiPT1iLnR5cGUpKXt2YXIgYz10aGlzLl9jb3JlLnNldHRpbmdzLGU9Yy5jZW50ZXImJk1hdGguY2VpbChjLml0ZW1zLzIpfHxjLml0ZW1zLGY9Yy5jZW50ZXImJi0xKmV8fDAsZz0oYi5wcm9wZXJ0eSYmYi5wcm9wZXJ0eS52YWx1ZSE9PWQ/Yi5wcm9wZXJ0eS52YWx1ZTp0aGlzLl9jb3JlLmN1cnJlbnQoKSkrZixoPXRoaXMuX2NvcmUuY2xvbmVzKCkubGVuZ3RoLGk9YS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMubG9hZChiKX0sdGhpcyk7Zm9yKGMubGF6eUxvYWRFYWdlcj4wJiYoZSs9Yy5sYXp5TG9hZEVhZ2VyLGMubG9vcCYmKGctPWMubGF6eUxvYWRFYWdlcixlKyspKTtmKys8ZTspdGhpcy5sb2FkKGgvMit0aGlzLl9jb3JlLnJlbGF0aXZlKGcpKSxoJiZhLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShnKSksaSksZysrfX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2xhenlMb2FkOiExLGxhenlMb2FkRWFnZXI6MH0sZS5wcm90b3R5cGUubG9hZD1mdW5jdGlvbihjKXt2YXIgZD10aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKGMpLGU9ZCYmZC5maW5kKFwiLm93bC1sYXp5XCIpOyFlfHxhLmluQXJyYXkoZC5nZXQoMCksdGhpcy5fbG9hZGVkKT4tMXx8KGUuZWFjaChhLnByb3h5KGZ1bmN0aW9uKGMsZCl7dmFyIGUsZj1hKGQpLGc9Yi5kZXZpY2VQaXhlbFJhdGlvPjEmJmYuYXR0cihcImRhdGEtc3JjLXJldGluYVwiKXx8Zi5hdHRyKFwiZGF0YS1zcmNcIil8fGYuYXR0cihcImRhdGEtc3Jjc2V0XCIpO3RoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRcIix7ZWxlbWVudDpmLHVybDpnfSxcImxhenlcIiksZi5pcyhcImltZ1wiKT9mLm9uZShcImxvYWQub3dsLmxhenlcIixhLnByb3h5KGZ1bmN0aW9uKCl7Zi5jc3MoXCJvcGFjaXR5XCIsMSksdGhpcy5fY29yZS50cmlnZ2VyKFwibG9hZGVkXCIse2VsZW1lbnQ6Zix1cmw6Z30sXCJsYXp5XCIpfSx0aGlzKSkuYXR0cihcInNyY1wiLGcpOmYuaXMoXCJzb3VyY2VcIik/Zi5vbmUoXCJsb2FkLm93bC5sYXp5XCIsYS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRlZFwiLHtlbGVtZW50OmYsdXJsOmd9LFwibGF6eVwiKX0sdGhpcykpLmF0dHIoXCJzcmNzZXRcIixnKTooZT1uZXcgSW1hZ2UsZS5vbmxvYWQ9YS5wcm94eShmdW5jdGlvbigpe2YuY3NzKHtcImJhY2tncm91bmQtaW1hZ2VcIjondXJsKFwiJytnKydcIiknLG9wYWNpdHk6XCIxXCJ9KSx0aGlzLl9jb3JlLnRyaWdnZXIoXCJsb2FkZWRcIix7ZWxlbWVudDpmLHVybDpnfSxcImxhenlcIil9LHRoaXMpLGUuc3JjPWcpfSx0aGlzKSksdGhpcy5fbG9hZGVkLnB1c2goZC5nZXQoMCkpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7Zm9yKGEgaW4gdGhpcy5oYW5kbGVycyl0aGlzLl9jb3JlLiRlbGVtZW50Lm9mZihhLHRoaXMuaGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTGF6eT1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihjKXt0aGlzLl9jb3JlPWMsdGhpcy5fcHJldmlvdXNIZWlnaHQ9bnVsbCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmdGhpcy51cGRhdGUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmXCJwb3NpdGlvblwiPT09YS5wcm9wZXJ0eS5uYW1lJiZ0aGlzLnVwZGF0ZSgpfSx0aGlzKSxcImxvYWRlZC5vd2wubGF6eVwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmYS5lbGVtZW50LmNsb3Nlc3QoXCIuXCIrdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLmluZGV4KCk9PT10aGlzLl9jb3JlLmN1cnJlbnQoKSYmdGhpcy51cGRhdGUoKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyksdGhpcy5faW50ZXJ2YWxJZD1udWxsO3ZhciBkPXRoaXM7YShiKS5vbihcImxvYWRcIixmdW5jdGlvbigpe2QuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmZC51cGRhdGUoKX0pLGEoYikucmVzaXplKGZ1bmN0aW9uKCl7ZC5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0JiYobnVsbCE9ZC5faW50ZXJ2YWxJZCYmY2xlYXJUaW1lb3V0KGQuX2ludGVydmFsSWQpLGQuX2ludGVydmFsSWQ9c2V0VGltZW91dChmdW5jdGlvbigpe2QudXBkYXRlKCl9LDI1MCkpfSl9O2UuRGVmYXVsdHM9e2F1dG9IZWlnaHQ6ITEsYXV0b0hlaWdodENsYXNzOlwib3dsLWhlaWdodFwifSxlLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLl9jb3JlLl9jdXJyZW50LGM9Yit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1zLGQ9dGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCxlPXRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCkudG9BcnJheSgpLnNsaWNlKGIsYyksZj1bXSxnPTA7YS5lYWNoKGUsZnVuY3Rpb24oYixjKXtmLnB1c2goYShjKS5oZWlnaHQoKSl9KSxnPU1hdGgubWF4LmFwcGx5KG51bGwsZiksZzw9MSYmZCYmdGhpcy5fcHJldmlvdXNIZWlnaHQmJihnPXRoaXMuX3ByZXZpb3VzSGVpZ2h0KSx0aGlzLl9wcmV2aW91c0hlaWdodD1nLHRoaXMuX2NvcmUuJHN0YWdlLnBhcmVudCgpLmhlaWdodChnKS5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fdmlkZW9zPXt9LHRoaXMuX3BsYXlpbmc9bnVsbCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnJlZ2lzdGVyKHt0eXBlOlwic3RhdGVcIixuYW1lOlwicGxheWluZ1wiLHRhZ3M6W1wiaW50ZXJhY3RpbmdcIl19KX0sdGhpcyksXCJyZXNpemUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlbyYmdGhpcy5pc0luRnVsbFNjcmVlbigpJiZhLnByZXZlbnREZWZhdWx0KCl9LHRoaXMpLFwicmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuaXMoXCJyZXNpemluZ1wiKSYmdGhpcy5fY29yZS4kc3RhZ2UuZmluZChcIi5jbG9uZWQgLm93bC12aWRlby1mcmFtZVwiKS5yZW1vdmUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09PWEucHJvcGVydHkubmFtZSYmdGhpcy5fcGxheWluZyYmdGhpcy5zdG9wKCl9LHRoaXMpLFwicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSl7dmFyIGM9YShiLmNvbnRlbnQpLmZpbmQoXCIub3dsLXZpZGVvXCIpO2MubGVuZ3RoJiYoYy5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLHRoaXMuZmV0Y2goYyxhKGIuY29udGVudCkpKX19LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24oXCJjbGljay5vd2wudmlkZW9cIixcIi5vd2wtdmlkZW8tcGxheS1pY29uXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLnBsYXkoYSl9LHRoaXMpKX07ZS5EZWZhdWx0cz17dmlkZW86ITEsdmlkZW9IZWlnaHQ6ITEsdmlkZW9XaWR0aDohMX0sZS5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBhLmF0dHIoXCJkYXRhLXZpbWVvLWlkXCIpP1widmltZW9cIjphLmF0dHIoXCJkYXRhLXZ6YWFyLWlkXCIpP1widnphYXJcIjpcInlvdXR1YmVcIn0oKSxkPWEuYXR0cihcImRhdGEtdmltZW8taWRcIil8fGEuYXR0cihcImRhdGEteW91dHViZS1pZFwiKXx8YS5hdHRyKFwiZGF0YS12emFhci1pZFwiKSxlPWEuYXR0cihcImRhdGEtd2lkdGhcIil8fHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxmPWEuYXR0cihcImRhdGEtaGVpZ2h0XCIpfHx0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvSGVpZ2h0LGc9YS5hdHRyKFwiaHJlZlwiKTtpZighZyl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHZpZGVvIFVSTC5cIik7aWYoZD1nLm1hdGNoKC8oaHR0cDp8aHR0cHM6fClcXC9cXC8ocGxheWVyLnx3d3cufGFwcC4pPyh2aW1lb1xcLmNvbXx5b3V0dShiZVxcLmNvbXxcXC5iZXxiZVxcLmdvb2dsZWFwaXNcXC5jb218YmVcXC1ub2Nvb2tpZVxcLmNvbSl8dnphYXJcXC5jb20pXFwvKHZpZGVvXFwvfHZpZGVvc1xcL3xlbWJlZFxcL3xjaGFubmVsc1xcLy4rXFwvfGdyb3Vwc1xcLy4rXFwvfHdhdGNoXFw/dj18dlxcLyk/KFtBLVphLXowLTkuXyUtXSopKFxcJlxcUyspPy8pLGRbM10uaW5kZXhPZihcInlvdXR1XCIpPi0xKWM9XCJ5b3V0dWJlXCI7ZWxzZSBpZihkWzNdLmluZGV4T2YoXCJ2aW1lb1wiKT4tMSljPVwidmltZW9cIjtlbHNle2lmKCEoZFszXS5pbmRleE9mKFwidnphYXJcIik+LTEpKXRocm93IG5ldyBFcnJvcihcIlZpZGVvIFVSTCBub3Qgc3VwcG9ydGVkLlwiKTtjPVwidnphYXJcIn1kPWRbNl0sdGhpcy5fdmlkZW9zW2ddPXt0eXBlOmMsaWQ6ZCx3aWR0aDplLGhlaWdodDpmfSxiLmF0dHIoXCJkYXRhLXZpZGVvXCIsZyksdGhpcy50aHVtYm5haWwoYSx0aGlzLl92aWRlb3NbZ10pfSxlLnByb3RvdHlwZS50aHVtYm5haWw9ZnVuY3Rpb24oYixjKXt2YXIgZCxlLGYsZz1jLndpZHRoJiZjLmhlaWdodD9cIndpZHRoOlwiK2Mud2lkdGgrXCJweDtoZWlnaHQ6XCIrYy5oZWlnaHQrXCJweDtcIjpcIlwiLGg9Yi5maW5kKFwiaW1nXCIpLGk9XCJzcmNcIixqPVwiXCIsaz10aGlzLl9jb3JlLnNldHRpbmdzLGw9ZnVuY3Rpb24oYyl7ZT0nPGRpdiBjbGFzcz1cIm93bC12aWRlby1wbGF5LWljb25cIj48L2Rpdj4nLGQ9ay5sYXp5TG9hZD9hKFwiPGRpdi8+XCIse2NsYXNzOlwib3dsLXZpZGVvLXRuIFwiK2osc3JjVHlwZTpjfSk6YShcIjxkaXYvPlwiLHtjbGFzczpcIm93bC12aWRlby10blwiLHN0eWxlOlwib3BhY2l0eToxO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiK2MrXCIpXCJ9KSxiLmFmdGVyKGQpLGIuYWZ0ZXIoZSl9O2lmKGIud3JhcChhKFwiPGRpdi8+XCIse2NsYXNzOlwib3dsLXZpZGVvLXdyYXBwZXJcIixzdHlsZTpnfSkpLHRoaXMuX2NvcmUuc2V0dGluZ3MubGF6eUxvYWQmJihpPVwiZGF0YS1zcmNcIixqPVwib3dsLWxhenlcIiksaC5sZW5ndGgpcmV0dXJuIGwoaC5hdHRyKGkpKSxoLnJlbW92ZSgpLCExO1wieW91dHViZVwiPT09Yy50eXBlPyhmPVwiLy9pbWcueW91dHViZS5jb20vdmkvXCIrYy5pZCtcIi9ocWRlZmF1bHQuanBnXCIsbChmKSk6XCJ2aW1lb1wiPT09Yy50eXBlP2EuYWpheCh7dHlwZTpcIkdFVFwiLHVybDpcIi8vdmltZW8uY29tL2FwaS92Mi92aWRlby9cIitjLmlkK1wiLmpzb25cIixqc29ucDpcImNhbGxiYWNrXCIsZGF0YVR5cGU6XCJqc29ucFwiLHN1Y2Nlc3M6ZnVuY3Rpb24oYSl7Zj1hWzBdLnRodW1ibmFpbF9sYXJnZSxsKGYpfX0pOlwidnphYXJcIj09PWMudHlwZSYmYS5hamF4KHt0eXBlOlwiR0VUXCIsdXJsOlwiLy92emFhci5jb20vYXBpL3ZpZGVvcy9cIitjLmlkK1wiLmpzb25cIixqc29ucDpcImNhbGxiYWNrXCIsZGF0YVR5cGU6XCJqc29ucFwiLHN1Y2Nlc3M6ZnVuY3Rpb24oYSl7Zj1hLmZyYW1lZ3JhYl91cmwsbChmKX19KX0sZS5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuX2NvcmUudHJpZ2dlcihcInN0b3BcIixudWxsLFwidmlkZW9cIiksdGhpcy5fcGxheWluZy5maW5kKFwiLm93bC12aWRlby1mcmFtZVwiKS5yZW1vdmUoKSx0aGlzLl9wbGF5aW5nLnJlbW92ZUNsYXNzKFwib3dsLXZpZGVvLXBsYXlpbmdcIiksdGhpcy5fcGxheWluZz1udWxsLHRoaXMuX2NvcmUubGVhdmUoXCJwbGF5aW5nXCIpLHRoaXMuX2NvcmUudHJpZ2dlcihcInN0b3BwZWRcIixudWxsLFwidmlkZW9cIil9LGUucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oYil7dmFyIGMsZD1hKGIudGFyZ2V0KSxlPWQuY2xvc2VzdChcIi5cIit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcyksZj10aGlzLl92aWRlb3NbZS5hdHRyKFwiZGF0YS12aWRlb1wiKV0sZz1mLndpZHRofHxcIjEwMCVcIixoPWYuaGVpZ2h0fHx0aGlzLl9jb3JlLiRzdGFnZS5oZWlnaHQoKTt0aGlzLl9wbGF5aW5nfHwodGhpcy5fY29yZS5lbnRlcihcInBsYXlpbmdcIiksdGhpcy5fY29yZS50cmlnZ2VyKFwicGxheVwiLG51bGwsXCJ2aWRlb1wiKSxlPXRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZShlLmluZGV4KCkpKSx0aGlzLl9jb3JlLnJlc2V0KGUuaW5kZXgoKSksYz1hKCc8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gd2Via2l0QWxsb3dGdWxsU2NyZWVuID48L2lmcmFtZT4nKSxjLmF0dHIoXCJoZWlnaHRcIixoKSxjLmF0dHIoXCJ3aWR0aFwiLGcpLFwieW91dHViZVwiPT09Zi50eXBlP2MuYXR0cihcInNyY1wiLFwiLy93d3cueW91dHViZS5jb20vZW1iZWQvXCIrZi5pZCtcIj9hdXRvcGxheT0xJnJlbD0wJnY9XCIrZi5pZCk6XCJ2aW1lb1wiPT09Zi50eXBlP2MuYXR0cihcInNyY1wiLFwiLy9wbGF5ZXIudmltZW8uY29tL3ZpZGVvL1wiK2YuaWQrXCI/YXV0b3BsYXk9MVwiKTpcInZ6YWFyXCI9PT1mLnR5cGUmJmMuYXR0cihcInNyY1wiLFwiLy92aWV3LnZ6YWFyLmNvbS9cIitmLmlkK1wiL3BsYXllcj9hdXRvcGxheT10cnVlXCIpLGEoYykud3JhcCgnPGRpdiBjbGFzcz1cIm93bC12aWRlby1mcmFtZVwiIC8+JykuaW5zZXJ0QWZ0ZXIoZS5maW5kKFwiLm93bC12aWRlb1wiKSksdGhpcy5fcGxheWluZz1lLmFkZENsYXNzKFwib3dsLXZpZGVvLXBsYXlpbmdcIikpfSxlLnByb3RvdHlwZS5pc0luRnVsbFNjcmVlbj1mdW5jdGlvbigpe3ZhciBiPWMuZnVsbHNjcmVlbkVsZW1lbnR8fGMubW96RnVsbFNjcmVlbkVsZW1lbnR8fGMud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7cmV0dXJuIGImJmEoYikucGFyZW50KCkuaGFzQ2xhc3MoXCJvd2wtdmlkZW8tZnJhbWVcIil9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO3RoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKFwiY2xpY2sub3dsLnZpZGVvXCIpO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuVmlkZW89ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5jb3JlPWIsdGhpcy5jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLmNvcmUub3B0aW9ucyksdGhpcy5zd2FwcGluZz0hMCx0aGlzLnByZXZpb3VzPWQsdGhpcy5uZXh0PWQsdGhpcy5oYW5kbGVycz17XCJjaGFuZ2Uub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJih0aGlzLnByZXZpb3VzPXRoaXMuY29yZS5jdXJyZW50KCksdGhpcy5uZXh0PWEucHJvcGVydHkudmFsdWUpfSx0aGlzKSxcImRyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmKHRoaXMuc3dhcHBpbmc9XCJ0cmFuc2xhdGVkXCI9PWEudHlwZSl9LHRoaXMpLFwidHJhbnNsYXRlLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuc3dhcHBpbmcmJih0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlT3V0fHx0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlSW4pJiZ0aGlzLnN3YXAoKX0sdGhpcyl9LHRoaXMuY29yZS4kZWxlbWVudC5vbih0aGlzLmhhbmRsZXJzKX07ZS5EZWZhdWx0cz17YW5pbWF0ZU91dDohMSxcbmFuaW1hdGVJbjohMX0sZS5wcm90b3R5cGUuc3dhcD1mdW5jdGlvbigpe2lmKDE9PT10aGlzLmNvcmUuc2V0dGluZ3MuaXRlbXMmJmEuc3VwcG9ydC5hbmltYXRpb24mJmEuc3VwcG9ydC50cmFuc2l0aW9uKXt0aGlzLmNvcmUuc3BlZWQoMCk7dmFyIGIsYz1hLnByb3h5KHRoaXMuY2xlYXIsdGhpcyksZD10aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5wcmV2aW91cyksZT10aGlzLmNvcmUuJHN0YWdlLmNoaWxkcmVuKCkuZXEodGhpcy5uZXh0KSxmPXRoaXMuY29yZS5zZXR0aW5ncy5hbmltYXRlSW4sZz10aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dDt0aGlzLmNvcmUuY3VycmVudCgpIT09dGhpcy5wcmV2aW91cyYmKGcmJihiPXRoaXMuY29yZS5jb29yZGluYXRlcyh0aGlzLnByZXZpb3VzKS10aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5uZXh0KSxkLm9uZShhLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCxjKS5jc3Moe2xlZnQ6YitcInB4XCJ9KS5hZGRDbGFzcyhcImFuaW1hdGVkIG93bC1hbmltYXRlZC1vdXRcIikuYWRkQ2xhc3MoZykpLGYmJmUub25lKGEuc3VwcG9ydC5hbmltYXRpb24uZW5kLGMpLmFkZENsYXNzKFwiYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLWluXCIpLmFkZENsYXNzKGYpKX19LGUucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKGIpe2EoYi50YXJnZXQpLmNzcyh7bGVmdDpcIlwifSkucmVtb3ZlQ2xhc3MoXCJhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0IG93bC1hbmltYXRlZC1pblwiKS5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluKS5yZW1vdmVDbGFzcyh0aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZU91dCksdGhpcy5jb3JlLm9uVHJhbnNpdGlvbkVuZCgpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjtmb3IoYSBpbiB0aGlzLmhhbmRsZXJzKXRoaXMuY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLmhhbmRsZXJzW2FdKTtmb3IoYiBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2JdJiYodGhpc1tiXT1udWxsKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkFuaW1hdGU9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2NhbGw9bnVsbCx0aGlzLl90aW1lPTAsdGhpcy5fdGltZW91dD0wLHRoaXMuX3BhdXNlZD0hMCx0aGlzLl9oYW5kbGVycz17XCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwic2V0dGluZ3NcIj09PWEucHJvcGVydHkubmFtZT90aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5P3RoaXMucGxheSgpOnRoaXMuc3RvcCgpOmEubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMuX3BhdXNlZCYmKHRoaXMuX3RpbWU9MCl9LHRoaXMpLFwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSYmdGhpcy5wbGF5KCl9LHRoaXMpLFwicGxheS5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKGEsYixjKXthLm5hbWVzcGFjZSYmdGhpcy5wbGF5KGIsYyl9LHRoaXMpLFwic3RvcC5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLnN0b3AoKX0sdGhpcyksXCJtb3VzZW92ZXIub3dsLmF1dG9wbGF5XCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJnRoaXMucGF1c2UoKX0sdGhpcyksXCJtb3VzZWxlYXZlLm93bC5hdXRvcGxheVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiZ0aGlzLnBsYXkoKX0sdGhpcyksXCJ0b3VjaHN0YXJ0Lm93bC5jb3JlXCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJnRoaXMucGF1c2UoKX0sdGhpcyksXCJ0b3VjaGVuZC5vd2wuY29yZVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5wbGF5KCl9LHRoaXMpfSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpfTtlLkRlZmF1bHRzPXthdXRvcGxheTohMSxhdXRvcGxheVRpbWVvdXQ6NWUzLGF1dG9wbGF5SG92ZXJQYXVzZTohMSxhdXRvcGxheVNwZWVkOiExfSxlLnByb3RvdHlwZS5fbmV4dD1mdW5jdGlvbihkKXt0aGlzLl9jYWxsPWIuc2V0VGltZW91dChhLnByb3h5KHRoaXMuX25leHQsdGhpcyxkKSx0aGlzLl90aW1lb3V0KihNYXRoLnJvdW5kKHRoaXMucmVhZCgpL3RoaXMuX3RpbWVvdXQpKzEpLXRoaXMucmVhZCgpKSx0aGlzLl9jb3JlLmlzKFwiaW50ZXJhY3RpbmdcIil8fGMuaGlkZGVufHx0aGlzLl9jb3JlLm5leHQoZHx8dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheVNwZWVkKX0sZS5wcm90b3R5cGUucmVhZD1mdW5jdGlvbigpe3JldHVybihuZXcgRGF0ZSkuZ2V0VGltZSgpLXRoaXMuX3RpbWV9LGUucHJvdG90eXBlLnBsYXk9ZnVuY3Rpb24oYyxkKXt2YXIgZTt0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIil8fHRoaXMuX2NvcmUuZW50ZXIoXCJyb3RhdGluZ1wiKSxjPWN8fHRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlUaW1lb3V0LGU9TWF0aC5taW4odGhpcy5fdGltZSUodGhpcy5fdGltZW91dHx8YyksYyksdGhpcy5fcGF1c2VkPyh0aGlzLl90aW1lPXRoaXMucmVhZCgpLHRoaXMuX3BhdXNlZD0hMSk6Yi5jbGVhclRpbWVvdXQodGhpcy5fY2FsbCksdGhpcy5fdGltZSs9dGhpcy5yZWFkKCklYy1lLHRoaXMuX3RpbWVvdXQ9Yyx0aGlzLl9jYWxsPWIuc2V0VGltZW91dChhLnByb3h5KHRoaXMuX25leHQsdGhpcyxkKSxjLWUpfSxlLnByb3RvdHlwZS5zdG9wPWZ1bmN0aW9uKCl7dGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiYodGhpcy5fdGltZT0wLHRoaXMuX3BhdXNlZD0hMCxiLmNsZWFyVGltZW91dCh0aGlzLl9jYWxsKSx0aGlzLl9jb3JlLmxlYXZlKFwicm90YXRpbmdcIikpfSxlLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbigpe3RoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmIXRoaXMuX3BhdXNlZCYmKHRoaXMuX3RpbWU9dGhpcy5yZWFkKCksdGhpcy5fcGF1c2VkPSEwLGIuY2xlYXJUaW1lb3V0KHRoaXMuX2NhbGwpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7dGhpcy5zdG9wKCk7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5hdXRvcGxheT1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5faW5pdGlhbGl6ZWQ9ITEsdGhpcy5fcGFnZXM9W10sdGhpcy5fY29udHJvbHM9e30sdGhpcy5fdGVtcGxhdGVzPVtdLHRoaXMuJGVsZW1lbnQ9dGhpcy5fY29yZS4kZWxlbWVudCx0aGlzLl9vdmVycmlkZXM9e25leHQ6dGhpcy5fY29yZS5uZXh0LHByZXY6dGhpcy5fY29yZS5wcmV2LHRvOnRoaXMuX2NvcmUudG99LHRoaXMuX2hhbmRsZXJzPXtcInByZXBhcmVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7Yi5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEmJnRoaXMuX3RlbXBsYXRlcy5wdXNoKCc8ZGl2IGNsYXNzPVwiJyt0aGlzLl9jb3JlLnNldHRpbmdzLmRvdENsYXNzKydcIj4nK2EoYi5jb250ZW50KS5maW5kKFwiW2RhdGEtZG90XVwiKS5hZGRCYWNrKFwiW2RhdGEtZG90XVwiKS5hdHRyKFwiZGF0YS1kb3RcIikrXCI8L2Rpdj5cIil9LHRoaXMpLFwiYWRkZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSYmdGhpcy5fdGVtcGxhdGVzLnNwbGljZShhLnBvc2l0aW9uLDAsdGhpcy5fdGVtcGxhdGVzLnBvcCgpKX0sdGhpcyksXCJyZW1vdmUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSYmdGhpcy5fdGVtcGxhdGVzLnNwbGljZShhLnBvc2l0aW9uLDEpfSx0aGlzKSxcImNoYW5nZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMuZHJhdygpfSx0aGlzKSxcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJiF0aGlzLl9pbml0aWFsaXplZCYmKHRoaXMuX2NvcmUudHJpZ2dlcihcImluaXRpYWxpemVcIixudWxsLFwibmF2aWdhdGlvblwiKSx0aGlzLmluaXRpYWxpemUoKSx0aGlzLnVwZGF0ZSgpLHRoaXMuZHJhdygpLHRoaXMuX2luaXRpYWxpemVkPSEwLHRoaXMuX2NvcmUudHJpZ2dlcihcImluaXRpYWxpemVkXCIsbnVsbCxcIm5hdmlnYXRpb25cIikpfSx0aGlzKSxcInJlZnJlc2hlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9pbml0aWFsaXplZCYmKHRoaXMuX2NvcmUudHJpZ2dlcihcInJlZnJlc2hcIixudWxsLFwibmF2aWdhdGlvblwiKSx0aGlzLnVwZGF0ZSgpLHRoaXMuZHJhdygpLHRoaXMuX2NvcmUudHJpZ2dlcihcInJlZnJlc2hlZFwiLG51bGwsXCJuYXZpZ2F0aW9uXCIpKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e25hdjohMSxuYXZUZXh0OlsnPHNwYW4gYXJpYS1sYWJlbD1cIlByZXZpb3VzXCI+JiN4MjAzOTs8L3NwYW4+JywnPHNwYW4gYXJpYS1sYWJlbD1cIk5leHRcIj4mI3gyMDNhOzwvc3Bhbj4nXSxuYXZTcGVlZDohMSxuYXZFbGVtZW50OididXR0b24gdHlwZT1cImJ1dHRvblwiIHJvbGU9XCJwcmVzZW50YXRpb25cIicsbmF2Q29udGFpbmVyOiExLG5hdkNvbnRhaW5lckNsYXNzOlwib3dsLW5hdlwiLG5hdkNsYXNzOltcIm93bC1wcmV2XCIsXCJvd2wtbmV4dFwiXSxzbGlkZUJ5OjEsZG90Q2xhc3M6XCJvd2wtZG90XCIsZG90c0NsYXNzOlwib3dsLWRvdHNcIixkb3RzOiEwLGRvdHNFYWNoOiExLGRvdHNEYXRhOiExLGRvdHNTcGVlZDohMSxkb3RzQ29udGFpbmVyOiExfSxlLnByb3RvdHlwZS5pbml0aWFsaXplPWZ1bmN0aW9uKCl7dmFyIGIsYz10aGlzLl9jb3JlLnNldHRpbmdzO3RoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZT0oYy5uYXZDb250YWluZXI/YShjLm5hdkNvbnRhaW5lcik6YShcIjxkaXY+XCIpLmFkZENsYXNzKGMubmF2Q29udGFpbmVyQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuX2NvbnRyb2xzLiRwcmV2aW91cz1hKFwiPFwiK2MubmF2RWxlbWVudCtcIj5cIikuYWRkQ2xhc3MoYy5uYXZDbGFzc1swXSkuaHRtbChjLm5hdlRleHRbMF0pLnByZXBlbmRUbyh0aGlzLl9jb250cm9scy4kcmVsYXRpdmUpLm9uKFwiY2xpY2tcIixhLnByb3h5KGZ1bmN0aW9uKGEpe3RoaXMucHJldihjLm5hdlNwZWVkKX0sdGhpcykpLHRoaXMuX2NvbnRyb2xzLiRuZXh0PWEoXCI8XCIrYy5uYXZFbGVtZW50K1wiPlwiKS5hZGRDbGFzcyhjLm5hdkNsYXNzWzFdKS5odG1sKGMubmF2VGV4dFsxXSkuYXBwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKS5vbihcImNsaWNrXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLm5leHQoYy5uYXZTcGVlZCl9LHRoaXMpKSxjLmRvdHNEYXRhfHwodGhpcy5fdGVtcGxhdGVzPVthKCc8YnV0dG9uIHJvbGU9XCJidXR0b25cIj4nKS5hZGRDbGFzcyhjLmRvdENsYXNzKS5hcHBlbmQoYShcIjxzcGFuPlwiKSkucHJvcChcIm91dGVySFRNTFwiKV0pLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZT0oYy5kb3RzQ29udGFpbmVyP2EoYy5kb3RzQ29udGFpbmVyKTphKFwiPGRpdj5cIikuYWRkQ2xhc3MoYy5kb3RzQ2xhc3MpLmFwcGVuZFRvKHRoaXMuJGVsZW1lbnQpKS5hZGRDbGFzcyhcImRpc2FibGVkXCIpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5vbihcImNsaWNrXCIsXCJidXR0b25cIixhLnByb3h5KGZ1bmN0aW9uKGIpe3ZhciBkPWEoYi50YXJnZXQpLnBhcmVudCgpLmlzKHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZSk/YShiLnRhcmdldCkuaW5kZXgoKTphKGIudGFyZ2V0KS5wYXJlbnQoKS5pbmRleCgpO2IucHJldmVudERlZmF1bHQoKSx0aGlzLnRvKGQsYy5kb3RzU3BlZWQpfSx0aGlzKSk7Zm9yKGIgaW4gdGhpcy5fb3ZlcnJpZGVzKXRoaXMuX2NvcmVbYl09YS5wcm94eSh0aGlzW2JdLHRoaXMpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQsZTtlPXRoaXMuX2NvcmUuc2V0dGluZ3M7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGIgaW4gdGhpcy5fY29udHJvbHMpXCIkcmVsYXRpdmVcIj09PWImJmUubmF2Q29udGFpbmVyP3RoaXMuX2NvbnRyb2xzW2JdLmh0bWwoXCJcIik6dGhpcy5fY29udHJvbHNbYl0ucmVtb3ZlKCk7Zm9yKGQgaW4gdGhpcy5vdmVyaWRlcyl0aGlzLl9jb3JlW2RdPXRoaXMuX292ZXJyaWRlc1tkXTtmb3IoYyBpbiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSlcImZ1bmN0aW9uXCIhPXR5cGVvZiB0aGlzW2NdJiYodGhpc1tjXT1udWxsKX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7dmFyIGEsYixjLGQ9dGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgvMixlPWQrdGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCxmPXRoaXMuX2NvcmUubWF4aW11bSghMCksZz10aGlzLl9jb3JlLnNldHRpbmdzLGg9Zy5jZW50ZXJ8fGcuYXV0b1dpZHRofHxnLmRvdHNEYXRhPzE6Zy5kb3RzRWFjaHx8Zy5pdGVtcztpZihcInBhZ2VcIiE9PWcuc2xpZGVCeSYmKGcuc2xpZGVCeT1NYXRoLm1pbihnLnNsaWRlQnksZy5pdGVtcykpLGcuZG90c3x8XCJwYWdlXCI9PWcuc2xpZGVCeSlmb3IodGhpcy5fcGFnZXM9W10sYT1kLGI9MCxjPTA7YTxlO2ErKyl7aWYoYj49aHx8MD09PWIpe2lmKHRoaXMuX3BhZ2VzLnB1c2goe3N0YXJ0Ok1hdGgubWluKGYsYS1kKSxlbmQ6YS1kK2gtMX0pLE1hdGgubWluKGYsYS1kKT09PWYpYnJlYWs7Yj0wLCsrY31iKz10aGlzLl9jb3JlLm1lcmdlcnModGhpcy5fY29yZS5yZWxhdGl2ZShhKSl9fSxlLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKCl7dmFyIGIsYz10aGlzLl9jb3JlLnNldHRpbmdzLGQ9dGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aDw9Yy5pdGVtcyxlPXRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLGY9Yy5sb29wfHxjLnJld2luZDt0aGlzLl9jb250cm9scy4kcmVsYXRpdmUudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFjLm5hdnx8ZCksYy5uYXYmJih0aGlzLl9jb250cm9scy4kcHJldmlvdXMudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFmJiZlPD10aGlzLl9jb3JlLm1pbmltdW0oITApKSx0aGlzLl9jb250cm9scy4kbmV4dC50b2dnbGVDbGFzcyhcImRpc2FibGVkXCIsIWYmJmU+PXRoaXMuX2NvcmUubWF4aW11bSghMCkpKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUudG9nZ2xlQ2xhc3MoXCJkaXNhYmxlZFwiLCFjLmRvdHN8fGQpLGMuZG90cyYmKGI9dGhpcy5fcGFnZXMubGVuZ3RoLXRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmxlbmd0aCxjLmRvdHNEYXRhJiYwIT09Yj90aGlzLl9jb250cm9scy4kYWJzb2x1dGUuaHRtbCh0aGlzLl90ZW1wbGF0ZXMuam9pbihcIlwiKSk6Yj4wP3RoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5hcHBlbmQobmV3IEFycmF5KGIrMSkuam9pbih0aGlzLl90ZW1wbGF0ZXNbMF0pKTpiPDAmJnRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLnNsaWNlKGIpLnJlbW92ZSgpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5maW5kKFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLl9jb250cm9scy4kYWJzb2x1dGUuY2hpbGRyZW4oKS5lcShhLmluQXJyYXkodGhpcy5jdXJyZW50KCksdGhpcy5fcGFnZXMpKS5hZGRDbGFzcyhcImFjdGl2ZVwiKSl9LGUucHJvdG90eXBlLm9uVHJpZ2dlcj1mdW5jdGlvbihiKXt2YXIgYz10aGlzLl9jb3JlLnNldHRpbmdzO2IucGFnZT17aW5kZXg6YS5pbkFycmF5KHRoaXMuY3VycmVudCgpLHRoaXMuX3BhZ2VzKSxjb3VudDp0aGlzLl9wYWdlcy5sZW5ndGgsc2l6ZTpjJiYoYy5jZW50ZXJ8fGMuYXV0b1dpZHRofHxjLmRvdHNEYXRhPzE6Yy5kb3RzRWFjaHx8Yy5pdGVtcyl9fSxlLnByb3RvdHlwZS5jdXJyZW50PWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSk7cmV0dXJuIGEuZ3JlcCh0aGlzLl9wYWdlcyxhLnByb3h5KGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGEuc3RhcnQ8PWImJmEuZW5kPj1ifSx0aGlzKSkucG9wKCl9LGUucHJvdG90eXBlLmdldFBvc2l0aW9uPWZ1bmN0aW9uKGIpe3ZhciBjLGQsZT10aGlzLl9jb3JlLnNldHRpbmdzO3JldHVyblwicGFnZVwiPT1lLnNsaWRlQnk/KGM9YS5pbkFycmF5KHRoaXMuY3VycmVudCgpLHRoaXMuX3BhZ2VzKSxkPXRoaXMuX3BhZ2VzLmxlbmd0aCxiPysrYzotLWMsYz10aGlzLl9wYWdlc1soYyVkK2QpJWRdLnN0YXJ0KTooYz10aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSxkPXRoaXMuX2NvcmUuaXRlbXMoKS5sZW5ndGgsYj9jKz1lLnNsaWRlQnk6Yy09ZS5zbGlkZUJ5KSxjfSxlLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGIpe2EucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oITApLGIpfSxlLnByb3RvdHlwZS5wcmV2PWZ1bmN0aW9uKGIpe2EucHJveHkodGhpcy5fb3ZlcnJpZGVzLnRvLHRoaXMuX2NvcmUpKHRoaXMuZ2V0UG9zaXRpb24oITEpLGIpfSxlLnByb3RvdHlwZS50bz1mdW5jdGlvbihiLGMsZCl7dmFyIGU7IWQmJnRoaXMuX3BhZ2VzLmxlbmd0aD8oZT10aGlzLl9wYWdlcy5sZW5ndGgsYS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkodGhpcy5fcGFnZXNbKGIlZStlKSVlXS5zdGFydCxjKSk6YS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkoYixjKX0sYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLk5hdmlnYXRpb249ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ZnVuY3Rpb24oYyl7dGhpcy5fY29yZT1jLHRoaXMuX2hhc2hlcz17fSx0aGlzLiRlbGVtZW50PXRoaXMuX2NvcmUuJGVsZW1lbnQsdGhpcy5faGFuZGxlcnM9e1wiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihjKXtjLm5hbWVzcGFjZSYmXCJVUkxIYXNoXCI9PT10aGlzLl9jb3JlLnNldHRpbmdzLnN0YXJ0UG9zaXRpb24mJmEoYikudHJpZ2dlcihcImhhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb25cIil9LHRoaXMpLFwicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSl7dmFyIGM9YShiLmNvbnRlbnQpLmZpbmQoXCJbZGF0YS1oYXNoXVwiKS5hZGRCYWNrKFwiW2RhdGEtaGFzaF1cIikuYXR0cihcImRhdGEtaGFzaFwiKTtpZighYylyZXR1cm47dGhpcy5faGFzaGVzW2NdPWIuY29udGVudH19LHRoaXMpLFwiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGMpe2lmKGMubmFtZXNwYWNlJiZcInBvc2l0aW9uXCI9PT1jLnByb3BlcnR5Lm5hbWUpe3ZhciBkPXRoaXMuX2NvcmUuaXRlbXModGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSkpLGU9YS5tYXAodGhpcy5faGFzaGVzLGZ1bmN0aW9uKGEsYil7cmV0dXJuIGE9PT1kP2I6bnVsbH0pLmpvaW4oKTtpZighZXx8Yi5sb2NhdGlvbi5oYXNoLnNsaWNlKDEpPT09ZSlyZXR1cm47Yi5sb2NhdGlvbi5oYXNoPWV9fSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKSxhKGIpLm9uKFwiaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvblwiLGEucHJveHkoZnVuY3Rpb24oYSl7dmFyIGM9Yi5sb2NhdGlvbi5oYXNoLnN1YnN0cmluZygxKSxlPXRoaXMuX2NvcmUuJHN0YWdlLmNoaWxkcmVuKCksZj10aGlzLl9oYXNoZXNbY10mJmUuaW5kZXgodGhpcy5faGFzaGVzW2NdKTtmIT09ZCYmZiE9PXRoaXMuX2NvcmUuY3VycmVudCgpJiZ0aGlzLl9jb3JlLnRvKHRoaXMuX2NvcmUucmVsYXRpdmUoZiksITEsITApfSx0aGlzKSl9O2UuRGVmYXVsdHM9e1VSTGhhc2hMaXN0ZW5lcjohMX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBjLGQ7YShiKS5vZmYoXCJoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uXCIpO2ZvcihjIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGMsdGhpcy5faGFuZGxlcnNbY10pO2ZvcihkIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbZF0mJih0aGlzW2RdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuSGFzaD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXtmdW5jdGlvbiBlKGIsYyl7dmFyIGU9ITEsZj1iLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Iuc2xpY2UoMSk7cmV0dXJuIGEuZWFjaCgoYitcIiBcIitoLmpvaW4oZitcIiBcIikrZikuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGEsYil7aWYoZ1tiXSE9PWQpcmV0dXJuIGU9IWN8fGIsITF9KSxlfWZ1bmN0aW9uIGYoYSl7cmV0dXJuIGUoYSwhMCl9dmFyIGc9YShcIjxzdXBwb3J0PlwiKS5nZXQoMCkuc3R5bGUsaD1cIldlYmtpdCBNb3ogTyBtc1wiLnNwbGl0KFwiIFwiKSxpPXt0cmFuc2l0aW9uOntlbmQ6e1dlYmtpdFRyYW5zaXRpb246XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIsTW96VHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIixPVHJhbnNpdGlvbjpcIm9UcmFuc2l0aW9uRW5kXCIsdHJhbnNpdGlvbjpcInRyYW5zaXRpb25lbmRcIn19LGFuaW1hdGlvbjp7ZW5kOntXZWJraXRBbmltYXRpb246XCJ3ZWJraXRBbmltYXRpb25FbmRcIixNb3pBbmltYXRpb246XCJhbmltYXRpb25lbmRcIixPQW5pbWF0aW9uOlwib0FuaW1hdGlvbkVuZFwiLGFuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwifX19LGo9e2Nzc3RyYW5zZm9ybXM6ZnVuY3Rpb24oKXtyZXR1cm4hIWUoXCJ0cmFuc2Zvcm1cIil9LGNzc3RyYW5zZm9ybXMzZDpmdW5jdGlvbigpe3JldHVybiEhZShcInBlcnNwZWN0aXZlXCIpfSxjc3N0cmFuc2l0aW9uczpmdW5jdGlvbigpe3JldHVybiEhZShcInRyYW5zaXRpb25cIil9LGNzc2FuaW1hdGlvbnM6ZnVuY3Rpb24oKXtyZXR1cm4hIWUoXCJhbmltYXRpb25cIil9fTtqLmNzc3RyYW5zaXRpb25zKCkmJihhLnN1cHBvcnQudHJhbnNpdGlvbj1uZXcgU3RyaW5nKGYoXCJ0cmFuc2l0aW9uXCIpKSxhLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQ9aS50cmFuc2l0aW9uLmVuZFthLnN1cHBvcnQudHJhbnNpdGlvbl0pLGouY3NzYW5pbWF0aW9ucygpJiYoYS5zdXBwb3J0LmFuaW1hdGlvbj1uZXcgU3RyaW5nKGYoXCJhbmltYXRpb25cIikpLGEuc3VwcG9ydC5hbmltYXRpb24uZW5kPWkuYW5pbWF0aW9uLmVuZFthLnN1cHBvcnQuYW5pbWF0aW9uXSksai5jc3N0cmFuc2Zvcm1zKCkmJihhLnN1cHBvcnQudHJhbnNmb3JtPW5ldyBTdHJpbmcoZihcInRyYW5zZm9ybVwiKSksYS5zdXBwb3J0LnRyYW5zZm9ybTNkPWouY3NzdHJhbnNmb3JtczNkKCkpfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAkKFwiLnBvcnRmb2xpby1jYXJvdXNlbFwiKS5vd2xDYXJvdXNlbCh7XG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIG1hcmdpbjogMTAsXG4gICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAvLyBhdXRvcGxheTp0cnVlLFxuICAgICAgICBuYXY6IHRydWUsXG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBhdXRvcGxheVRpbWVvdXQ6IDMwMDAsXG4gICAgICAgIHNtYXJ0U3BlZWQ6IDcwMCxcbiAgICAgICAgcmVzcG9uc2l2ZTp7XG4gICAgICAgICAgICAwOntcbiAgICAgICAgICAgICAgICBpdGVtczogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDc2ODp7XG4gICAgICAgICAgICAgICAgaXRlbXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAxNDAwOntcbiAgICAgICAgICAgICAgICBpdGVtczogNlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKFwiLnJldmlldy1jYXJvdXNlbFwiKS5vd2xDYXJvdXNlbCh7XG4gICAgICAgIGxvb3A6IHRydWUsXG4gICAgICAgIG1hcmdpbjogMzAsXG4gICAgICAgIG1lcmdlOiB0cnVlLFxuICAgICAgICAvLyBhdXRvcGxheTp0cnVlLFxuICAgICAgICBuYXY6IHRydWUsXG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBhdXRvcGxheVRpbWVvdXQ6IDMwMDAsXG4gICAgICAgIHNtYXJ0U3BlZWQ6IDcwMCxcbiAgICAgICAgcmVzcG9uc2l2ZTp7XG4gICAgICAgICAgICAwOntcbiAgICAgICAgICAgICAgICBpdGVtczogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIDc2ODp7XG4gICAgICAgICAgICAgICAgaXRlbXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAxNDAwOntcbiAgICAgICAgICAgICAgICBpdGVtczogNlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCcudmlkZW9fX3Bvc3RlcicsZnVuY3Rpb24oZSkgeyAgICAgIFxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciBwb3N0ZXIgPSAkKHRoaXMpO1xuICAgICAgICB2YXIgd3JhcHBlciA9IHBvc3Rlci5jbG9zZXN0KCcudmlkZW9fX3dyYXBwZXInKTtcbiAgICAgICAgdmlkZW9QbGF5KHdyYXBwZXIpO1xuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGZ1bmN0aW9uIHZpZGVvUGxheSh3cmFwcGVyKSB7XG4gICAgICAgIHZhciBpZnJhbWUgPSB3cmFwcGVyLmZpbmQoJy52aWRlb19faWZyYW1lJyk7XG4gICAgICAgIHZhciBzcmMgPSBpZnJhbWUuZGF0YSgnc3JjJyk7XG4gICAgICAgIHdyYXBwZXIuY2xvc2VzdCgnLnRlYW0nKS5hZGRDbGFzcygndGVhbV9fYWN0aXZlJyk7XG4gICAgICAgIGlmcmFtZS5hdHRyKCdzcmMnLHNyYyk7XG4gICAgICB9XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
